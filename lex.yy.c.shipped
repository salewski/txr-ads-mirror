
#line 3 "lex.yy.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yyget_lval
#define yyget_lval_ALREADY_DEFINED
#else
#define yyget_lval yyget_lval
#endif

#ifdef yyset_lval
#define yyset_lval_ALREADY_DEFINED
#else
#define yyset_lval yyset_lval
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 169
#define YY_END_OF_BUFFER 170
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_acclist[1787] =
    {   0,
       65,   65,   65,   65,   65,   65,   65,   65,  141,  141,
      141,  141,  152,  152,  166,  166,  170,  117,  169,  118,
      169,  118,  169,  116,  169,  120,  169,  117,  169,  117,
      169,  117,  169,  120,  169,  101,  102,  169,   65,  101,
      102,  169,   87,  169,   87,  101,  102,  169,   66,  101,
      102,  169,  101,  102,  169,   58,  101,  102,  169,   64,
      101,  102,  169,  101,  102,  169,   92,  101,  102,  169,
       88,  101,  102,  169,    1,    2,   21,  101,  102,  169,
    16402,  100,  101,  102,  169,   86,  101,  102,  169,   21,
      101,  102,  169,16402,   58,  101,  102,  169,  101,  102,

      169,   70,  101,  102,  169,   57,  101,  102,  169,   64,
      101,  102,  169,  102,  169,  102,  169,  102,  169,  102,
      169,   65,  101,  102,  169,   22,  101,  102,  169,16403,
       75,  101,  102,  169,   61,  101,  102,  169,   22,  101,
      102,  169,16403,   61,  101,  102,  169,   92,  101,  102,
      169,    1,    2,   22,  101,  102,  169,16403,   22,  101,
      102,  169,16403,   59,  101,  102,  169,   22,  101,  102,
      169,16403,   62,  101,  102,  169,  102,  169,  102,  169,
      102,  169,   65,  101,  102,  169,   23,  101,  102,  169,
    16404,   75,  101,  102,  169,   23,  101,  102,  169,16404,

       92,  101,  102,  169,    1,    2,   23,  101,  102,  169,
    16404,   23,  101,  102,  169,16404,   59,  101,  102,  169,
       23,  101,  102,  169,16404,  102,  169,  102,  169,  102,
      169,  114,  115,  169,  114,  115,  169,  108,  169,  108,
      114,  115,  169,  110,  114,  115,  169,  103,  110,  114,
      115,  169,  113,  114,  115,  169,  115,  169,  115,  169,
      115,  169,  115,  169,  109,  169,  109,  114,  115,  169,
      149,  155,  169,  149,  155,  169,  135,  169,  135,  149,
      155,  169,  123,  149,  155,  169,  149,  155,  169,  155,
      169,  155,  169,  155,  169,  155,  169,  134,  149,  155,

      169,  136,  169,  136,  149,  155,  169,  133,  134,  149,
      155,  169,  133,  134,  149,  155,  169,  133,  134,  149,
      155,  169,  134,  155,  169,  134,  155,  169,  134,  155,
      169,  134,  155,  169,  137,  169,  137,  149,  155,  169,
      140,  149,  155,  169,  149,  155,  169,  124,  149,  155,
      169,   65,  101,  102,  169,  101,  102,  169,  101,  102,
      169,   92,  101,  102,  169,    1,    2,   12,   21,  101,
      102,  169,16402,   59,  101,  102,  169,  101,  102,  169,
      141,  149,  155,  169,  138,  169,  138,  149,  155,  169,
      149,  155,  169,  149,  155,  169,  154,  169,  152,  154,

      169,  153,  169,  153,  154,  169,  151,  154,  169,  150,
      154,  169,  160,  167,  169,  166,  167,  169,  165,  169,
      165,  167,  169,  161,  164,  167,  169,  160,  167,  169,
      164,  167,  169,  160,  167,  169,  156,  160,  167,  169,
      156,  160,  167,  169,  100,  160,  167,  169,  160,  167,
      169,  160,  167,  169,  160,  167,  169,  163,  164,  167,
      169,  148,  169,  148,  149,  155,  169,  142,  149,  155,
      169,  149,  155,  169,  168,  169,  169,  117,  117,  117,
      117,  118,  116,  122,  119,  117,  117,  117,  122,   65,
       91,   87,   71,   69,   67,   73,    1,    2,   90,    5,

        6,   93,    1,    2,   21,16402,   21,16402,   21,16402,
      100,   99,   95,   95,   99,   96,   99,   97,   99,   98,
       99,  101,   65,   91,   22,   24,16403,   22,16403,   22,
       24,16403,   22,16403,   22,16403,   82,   76,   81,   79,
       78,   77,   80,    1,    2,   22,   24,16403,   60,    5,
        6,    1,    2,   22,   24,16403,   22,   24,16403,   22,
       24,16403,   22,16403,   24,   22,16403,   22,16403,   22,
    16403,   11,   22,16403,   95,   22,  101,16403,   65,   91,
       23,   25,16404,   23,16404,   23,   25,16404,   23,16404,
       23,16404,    1,    2,   23,   25,16404,   85,    5,    6,

        1,    2,   23,   25,16404,   23,   25,16404,   23,   25,
    16404,   23,16404,   25,   23,16404,   23,16404,   23,16404,
       11,   23,16404,   23,  101,16404,  108,  112,  107,  107,
      112,  104,  112,  111,  112,  105,  112,  106,  112,  112,
      114,  109,  135,  131,  127,  128,  127,  128,  131,  125,
      131,  129,  131,  130,  131,  149,  136,  133,  132,  133,
      132,  133,  137,  139,   11,  139,  139,  126,  131,   65,
       91,    1,    2,   12,    1,    2,   12,   21,16402,  141,
      138,  128,  128,  131,  152,  153,  160,  166,  165,  160,
      156,  160,  156,  160,  160,  160,  156,  160,  100,  160,

      160,  160,  160,  162,  148,  147,  143,  147,  146,  147,
      122,  117,  122,  121,  121,  122,   89,   94,   72,   74,
       68,    3,    3,    3,   63,    1,    2,    5,    6,    7,
        7,    7,    2,   10,    5,    6,    7,   10, 8210,    7,
       10,    7,   10,    5,    6,   21,16402, 8210,   95,   97,
       97,   97,   22,   24,16403,   22,   24,16403,   22,   24,
    16403,   22,   24,16403, 8211,   22,   24,16403,   22,   24,
    16403,   22,   24,16403,   24,   24,   84,   83,   22,   24,
    16403,   22,16403,   22,16403,    5,    6, 8211,    1,    2,
       22,   24,16403,   22,   24,16403,    8,    5,    6,    8,

        8,    8,    2,    8,   10,   10,    5,    6,    8,   10,
     8211,    8,   10,   10,    8,   10,   10,   10,   10,   22,
       24,16403,    5,    6,   22,   24,16403,   22,   24,16403,
       22,   24,16403,   24,   22,   24,16403,   24,   22,   24,
    16403,   22,16403,   22,16403,   11,   22,   24,16403,   23,
       25,16404,   23,   25,16404,   23,   25,16404,   23,   25,
    16404, 8212,   23,   25,16404,   23,   25,16404,   23,   25,
    16404,   25,   25,   23,   25,16404,   23,16404,   23,16404,
        5,    6, 8212,    1,    2,   23,   25,16404,   23,   25,
    16404,    9,    5,    6,    9,    9,    9,    2,    9,   10,

       10,    5,    6,    9,   10, 8212,    9,   10,   10,    9,
       10,   10,   10,   10,   23,   25,16404,    5,    6,   23,
       25,16404,   23,   25,16404,   23,   25,16404,   25,   23,
       25,16404,   25,   23,   25,16404,   23,16404,   23,16404,
       11,   23,   25,16404,  107,  107,  105,  105,  105,  127,
      128,  127,  128,  129,  129,  129,   11,    3,   16,    3,
       14,    1,    2,   12,    2,   10, 8210,  128,  128,   84,
      160,   83,  160,  156,  160,  160,  156,  160,  160,  160,
      160,  121,    5,    6,    7,    7,    5,    6,    3,    4,
        4,    3,    4,    3,    4,   54,   54,   54,   54,   54,

       54,   35,    5,    6,    7,   10,    6,    5,    6,    7,
        2,    5,    6,    7, 8210,    5,    6,    7,    5,    6,
        7,   21,16402,    7,   21,16402,    5,    6,    8,    8,
        5,    6,   22,   24,16403,   22,   24,16403,   22,   24,
    16403,   22,   24,16403,   22,   24,16403,   22,   24,16403,
       24,   24,   24,   24,   22,   24,16403,   22,   24,16403,
       22,   24,16403,    5,    6,    8, 8211,    8,    8,    8,
        6,    8,    8,    5,    6,    8,    8,    8,    8,    8,
        8,    5,    6,    8,    2,    5,    6,    8, 8211,    8,
        5,    6,    8,    8,   22,   24,16403,   22,   24,16403,

        5,    6,    8,   22,   24,16403,    8,   22,   24,16403,
       24,   22,   24,16403,   22,   24,16403,   22,   24,16403,
       11,   22,   24,16403,    5,    6,    9,    9,    5,    6,
       23,   25,16404,   23,   25,16404,   23,   25,16404,   23,
       25,16404,   23,   25,16404,   23,   25,16404,   25,   25,
       25,   25,   23,   25,16404,   23,   25,16404,   23,   25,
    16404,    5,    6,    9, 8212,    9,    9,    9,    6,    9,
        9,    5,    6,    9,    9,    9,    9,    9,    9,    5,
        6,    9,    2,    5,    6,    9, 8212,    9,    5,    6,
        9,    9,   23,   25,16404,   23,   25,16404,    5,    6,

        9,   23,   25,16404,    9,   23,   25,16404,   25,   23,
       25,16404,   23,   25,16404,   23,   25,16404,   17,   15,
       13,   11,   23,   25,16404,    3,    4,   16,    3,    4,
       14,    2,  160,  160,  160,    3,    3,    3,   26,   34,
       36,   48,   48,   48,   48,   48,   48,   43,   43,   43,
       43,   43,   43,   51,    6,    7,    7,    5,    6,    6,
        7,   10,    7,   10,    6,    7, 8210,    5,    6,    8,
       22,   24,16403,   22,   24,16403,   22,   24,16403,   24,
        8,    8,    6,    8,    8,    8,    8,    8,    5,    6,
        8,    6,    8,   10,    8,   10,    6,    5,    6,    8,

        8,   22,   24,16403,    8,   22,   24,16403,    8,   22,
       24,16403,    8,   22,   24,16403,    8,   22,   24,16403,
        8, 8211,    8,   22,   24,16403,    8,   22,   24,16403,
        5,    6,    8,   22,   24,16403,    8,   22,   24,16403,
        8,   22,   24,16403,    8,   22,   24,16403,    8,   22,
       24,16403,    8,   24,    8,   24,    5,    6,    9,   23,
       25,16404,   23,   25,16404,   23,   25,16404,   25,    9,
        9,    6,    9,    9,    9,    9,    9,    5,    6,    9,
        6,    9,   10,    9,   10,    6,    5,    6,    9,    9,
       23,   25,16404,    9,   23,   25,16404,    9,   23,   25,

    16404,    9,   23,   25,16404,    9,   23,   25,16404,    9,
     8212,    9,   23,   25,16404,    9,   23,   25,16404,    5,
        6,    9,   23,   25,16404,    9,   23,   25,16404,    9,
       23,   25,16404,    9,   23,   25,16404,    9,   23,   25,
    16404,    9,   25,    9,   25,  160,  159,  157,    6,    7,
        7,   38,   38,   38,   38,   38,   38,   55,   55,   55,
       55,   55,   55,   56,   46,   46,   46,   46,   46,   46,
       28,   42,   42,   42,   42,   42,   42,   27,   27,   27,
       27,   27,   27,    6,    7,    6,    7,    6,    8,    8,
        6,    8,    8,    8,    6,    8,    8,    6,    8,    6,

        8,    8,   22,   24,16403,    8,   22,   24,16403,    8,
       22,   24,16403,    8,   22,   24,16403,    8,   22,   24,
    16403,    8,   22,   24,16403,    8, 8211,    8,   22,   24,
    16403,    8,   22,   24,16403,    8,   22,   24,16403,    8,
       22,   24,16403,    8,   22,   24,16403,    8,   22,   24,
    16403,    8,   24,    8,   24,    8,   24,    8,   24,    6,
        9,    9,    6,    9,    9,    9,    6,    9,    9,    6,
        9,    6,    9,    9,   23,   25,16404,    9,   23,   25,
    16404,    9,   23,   25,16404,    9,   23,   25,16404,    9,
       23,   25,16404,    9,   23,   25,16404,    9, 8212,    9,

       23,   25,16404,    9,   23,   25,16404,    9,   23,   25,
    16404,    9,   23,   25,16404,    9,   23,   25,16404,    9,
       23,   25,16404,    9,   25,    9,   25,    9,   25,    9,
       25,  158,  145,  145,   31,   31,   31,   31,   31,   31,
       30,   52,   52,   52,   52,   52,   52,   47,   45,   29,
       39,   39,   39,   39,   39,   39,    6,    6,    8,    6,
        8,    8,   22,   24,16403,    8,   22,   24,16403,    8,
       22,   24,16403,    8,   22,   24,16403,    8,   22,   24,
    16403,    8,   22,   24,16403,    8,   22,   24,16403,    8,
       22,   24,16403,    8,   22,   24,16403,    8,   24,    6,

        9,    6,    9,    9,   23,   25,16404,    9,   23,   25,
    16404,    9,   23,   25,16404,    9,   23,   25,16404,    9,
       23,   25,16404,    9,   23,   25,16404,    9,   23,   25,
    16404,    9,   23,   25,16404,    9,   23,   25,16404,    9,
       25,   32,   32,   32,   32,   32,   32,   50,   50,   50,
       50,   50,   50,   33,   33,   33,   33,   33,   33,   40,
       40,   40,   40,   40,   40,   41,   41,   41,   41,   41,
       41,   44,   37,   37,   37,   37,   37,   37,   53,   49,
       49,   49,   49,   49,   49,  144
    } ;

static const flex_int16_t yy_accept[1765] =
    {   0,
        1,    1,    1,    2,    3,    4,    5,    6,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   17,   17,
       17,   17,   17,   18,   20,   22,   24,   26,   28,   30,
       32,   34,   36,   39,   43,   45,   49,   53,   56,   60,
       64,   67,   71,   75,   82,   86,   90,   95,   99,  102,
      106,  110,  114,  116,  118,  120,  122,  126,  131,  135,
      139,  144,  148,  152,  159,  164,  168,  173,  177,  179,
      181,  183,  187,  192,  196,  201,  205,  212,  217,  221,
      226,  228,  230,  232,  235,  238,  240,  244,  248,  253,

      257,  259,  261,  263,  265,  267,  271,  274,  277,  279,
      283,  287,  290,  292,  294,  296,  298,  302,  304,  308,
      313,  318,  323,  326,  329,  332,  335,  337,  341,  345,
      348,  352,  356,  359,  362,  366,  374,  378,  381,  385,
      387,  391,  394,  397,  399,  402,  404,  407,  410,  413,
      416,  419,  421,  424,  428,  431,  434,  437,  441,  445,
      449,  452,  455,  458,  462,  464,  468,  472,  475,  477,
      478,  479,  480,  481,  482,  483,  484,  484,  485,  486,
      487,  488,  489,  489,  490,  491,  491,  492,  492,  493,
      494,  494,  495,  496,  497,  497,  497,  497,  497,  497,

      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  499,  500,  502,  503,  503,  503,  507,
      509,  511,  512,  512,  513,  514,  516,  518,  520,  522,
      523,  523,  523,  524,  524,  525,  525,  528,  530,  530,
      533,  533,  535,  535,  535,  535,  535,  537,  538,  539,
      540,  541,  542,  543,  544,  544,  549,  550,  552,  552,
      552,  557,  560,  563,  565,  566,  568,  568,  568,  568,
      570,  570,  572,  575,  575,  575,  575,  576,  579,  579,
      579,  580,  580,  581,  581,  584,  586,  586,  589,  589,

      591,  591,  591,  591,  593,  593,  598,  599,  601,  601,
      601,  606,  609,  612,  614,  615,  617,  617,  617,  617,
      619,  619,  621,  624,  624,  624,  624,  627,  627,  627,
      627,  627,  628,  629,  630,  632,  634,  636,  638,  640,
      641,  642,  642,  642,  643,  643,  643,  644,  645,  647,
      650,  652,  654,  656,  657,  657,  657,  658,  659,  661,
      663,  664,  664,  665,  665,  667,  668,  670,  671,  672,
      672,  672,  675,  675,  675,  680,  680,  681,  681,  682,
      683,  685,  686,  687,  688,  689,  690,  691,  693,  695,
      696,  697,  699,  701,  702,  703,  704,  705,  706,  707,

      709,  711,  712,  713,  714,  715,  717,  718,  719,  719,
      719,  719,  719,  720,  721,  722,  722,  723,  723,  724,
      724,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      726,  726,  728,  728,  728,  731,  732,  733,  734,  735,
      740,  742,  744,  744,  748,  749,  750,  751,  752,  753,
      753,  753,  753,  753,  753,  753,  756,  759,  762,  765,

      765,  765,  765,  766,  769,  772,  775,  775,  775,  775,
      776,  776,  777,  777,  777,  777,  777,  777,  778,  779,
      782,  784,  786,  786,  786,  786,  789,  794,  797,  798,
      798,  798,  798,  801,  802,  802,  803,  803,  803,  803,
      804,  806,  807,  812,  814,  815,  817,  818,  819,  820,
      823,  828,  831,  834,  835,  838,  838,  838,  838,  839,
      839,  839,  839,  839,  839,  842,  844,  846,  846,  846,
      846,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      853,  856,  859,  862,  862,  862,  862,  863,  866,  869,
      872,  872,  872,  872,  873,  873,  874,  874,  874,  874,

      874,  874,  877,  879,  881,  881,  881,  881,  884,  889,
      892,  893,  893,  893,  893,  896,  897,  897,  898,  898,
      898,  898,  899,  901,  902,  907,  909,  910,  912,  913,
      914,  915,  918,  923,  926,  929,  930,  933,  933,  933,
      933,  934,  934,  934,  934,  934,  934,  937,  939,  941,
      941,  941,  941,  941,  941,  941,  945,  945,  945,  945,
      946,  947,  948,  949,  950,  950,  952,  954,  955,  956,
      957,  957,  958,  958,  960,  960,  962,  962,  965,  966,
      968,  969,  970,  972,  974,  976,  977,  979,  980,  981,
      982,  982,  982,  983,  983,  986,  987,  989,  989,  991,

      992,  992,  994,  994,  996,  996,  996,  996,  996,  996,
      996,  996,  996,  996,  996,  996,  996,  996,  996,  996,
      996,  996,  996,  996,  996,  996,  996,  996,  996,  996,
      996,  996,  996,  996,  996,  996,  996,  996,  996,  996,
      996,  996,  996,  996,  996,  996,  996,  997,  998,  999,
     1000, 1001, 1002, 1002, 1002, 1002, 1002, 1002, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1007, 1008, 1008,
     1011, 1011, 1012, 1012, 1016, 1019, 1019, 1024, 1027, 1027,
     1030, 1031, 1031, 1033, 1036, 1039, 1042, 1042, 1042, 1042,
     1042, 1042, 1045, 1048, 1051, 1051, 1051, 1051, 1051, 1051,

     1052, 1053, 1054, 1054, 1054, 1054, 1055, 1055, 1055, 1055,
     1055, 1055, 1055, 1058, 1061, 1064, 1064, 1064, 1064, 1064,
     1064, 1068, 1069, 1070, 1070, 1070, 1070, 1071, 1072, 1073,
     1074, 1077, 1078, 1079, 1079, 1079, 1079, 1080, 1080, 1080,
     1080, 1081, 1081, 1081, 1081, 1082, 1085, 1085, 1085, 1085,
     1086, 1086, 1090, 1091, 1094, 1098, 1101, 1101, 1107, 1111,
     1111, 1111, 1111, 1111, 1112, 1112, 1112, 1112, 1112, 1112,
     1112, 1112, 1112, 1115, 1118, 1121, 1121, 1121, 1121, 1121,
     1121, 1125, 1125, 1125, 1128, 1129, 1129, 1131, 1134, 1137,
     1140, 1140, 1140, 1140, 1140, 1140, 1143, 1146, 1149, 1149,

     1149, 1149, 1149, 1149, 1150, 1151, 1152, 1152, 1152, 1152,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1156, 1159, 1162,
     1162, 1162, 1162, 1162, 1162, 1166, 1167, 1168, 1168, 1168,
     1168, 1169, 1170, 1171, 1172, 1175, 1176, 1177, 1177, 1177,
     1177, 1178, 1178, 1178, 1178, 1179, 1179, 1179, 1179, 1180,
     1183, 1183, 1183, 1183, 1184, 1184, 1188, 1189, 1192, 1196,
     1199, 1199, 1205, 1209, 1209, 1209, 1209, 1209, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1213, 1216, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1220, 1220, 1221, 1221,
     1222, 1226, 1226, 1229, 1232, 1233, 1234, 1235, 1236, 1236,

     1236, 1236, 1236, 1237, 1238, 1239, 1239, 1239, 1239, 1239,
     1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239,
     1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239,
     1239, 1239, 1239, 1239, 1240, 1240, 1241, 1241, 1241, 1241,
     1241, 1241, 1241, 1241, 1241, 1241, 1241, 1242, 1242, 1242,
     1242, 1242, 1242, 1243, 1244, 1245, 1245, 1246, 1247, 1248,
     1248, 1248, 1248, 1249, 1250, 1251, 1251, 1252, 1253, 1254,
     1254, 1254, 1254, 1255, 1255, 1257, 1258, 1260, 1263, 1265,
     1265, 1266, 1268, 1268, 1268, 1271, 1274, 1277, 1280, 1280,
     1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1281, 1281,

     1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281,
     1282, 1282, 1282, 1282, 1282, 1282, 1283, 1283, 1283, 1283,
     1285, 1286, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287,
     1288, 1289, 1289, 1289, 1289, 1289, 1289, 1292, 1292, 1295,
     1297, 1297, 1298, 1301, 1305, 1309, 1313, 1317, 1317, 1317,
     1317, 1321, 1323, 1327, 1331, 1337, 1341, 1341, 1341, 1341,
     1345, 1349, 1353, 1353, 1353, 1353, 1355, 1355, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1360, 1363, 1366, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1370, 1370, 1370, 1370,

     1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1371, 1371,
     1371, 1371, 1371, 1371, 1372, 1372, 1372, 1372, 1374, 1375,
     1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1377, 1378,
     1378, 1378, 1378, 1378, 1378, 1381, 1381, 1384, 1386, 1386,
     1387, 1390, 1394, 1398, 1402, 1406, 1406, 1406, 1406, 1410,
     1412, 1416, 1420, 1426, 1430, 1430, 1430, 1430, 1434, 1438,
     1442, 1442, 1442, 1442, 1444, 1444, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1447,
     1448, 1449, 1449, 1449, 1451, 1452, 1452, 1452, 1452, 1452,
     1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452,

     1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
     1452, 1452, 1453, 1454, 1455, 1455, 1456, 1457, 1458, 1458,
     1459, 1460, 1461, 1462, 1463, 1464, 1464, 1465, 1465, 1465,
     1465, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1471, 1471,
     1471, 1472, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1478,
     1478, 1479, 1480, 1481, 1482, 1483, 1484, 1484, 1484, 1486,
     1488, 1490, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1493, 1494, 1495,
     1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497, 1498, 1500,
     1502, 1506, 1510, 1514, 1514, 1514, 1514, 1514, 1514, 1518,

     1522, 1526, 1526, 1526, 1526, 1528, 1532, 1536, 1540, 1540,
     1540, 1540, 1540, 1540, 1544, 1548, 1552, 1552, 1552, 1552,
     1552, 1552, 1554, 1556, 1558, 1558, 1558, 1558, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1562, 1563, 1563,
     1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563,
     1563, 1563, 1563, 1565, 1566, 1567, 1569, 1569, 1569, 1569,
     1569, 1569, 1569, 1569, 1570, 1572, 1574, 1578, 1582, 1586,
     1586, 1586, 1586, 1586, 1586, 1590, 1594, 1598, 1598, 1598,
     1598, 1600, 1604, 1608, 1612, 1612, 1612, 1612, 1612, 1612,
     1616, 1620, 1624, 1624, 1624, 1624, 1624, 1624, 1626, 1628,

     1630, 1630, 1630, 1630, 1632, 1632, 1632, 1632, 1632, 1632,
     1632, 1632, 1632, 1633, 1634, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1641, 1642,
     1643, 1644, 1645, 1646, 1647, 1648, 1648, 1648, 1648, 1648,
     1649, 1649, 1649, 1650, 1650, 1650, 1651, 1651, 1651, 1651,
     1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1658, 1658,
     1658, 1658, 1660, 1660, 1660, 1662, 1666, 1670, 1674, 1674,
     1674, 1674, 1674, 1674, 1674, 1678, 1682, 1686, 1686, 1686,
     1686, 1686, 1686, 1690, 1694, 1698, 1698, 1698, 1698, 1698,

     1698, 1698, 1698, 1698, 1698, 1700, 1700, 1700, 1700, 1700,
     1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1702, 1702,
     1702, 1704, 1708, 1712, 1716, 1716, 1716, 1716, 1716, 1716,
     1716, 1720, 1724, 1728, 1728, 1728, 1728, 1728, 1728, 1732,
     1736, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1742, 1742, 1742, 1742, 1742, 1742, 1742, 1742, 1742,
     1742, 1742, 1742, 1742, 1742, 1742, 1742, 1742, 1742, 1742,
     1743, 1744, 1745, 1746, 1747, 1748, 1748, 1749, 1750, 1751,
     1752, 1753, 1754, 1754, 1755, 1756, 1757, 1758, 1759, 1760,
     1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769,

     1770, 1771, 1772, 1772, 1773, 1773, 1773, 1773, 1773, 1773,
     1773, 1773, 1773, 1773, 1773, 1773, 1773, 1773, 1773, 1773,
     1773, 1773, 1773, 1773, 1773, 1773, 1773, 1773, 1773, 1773,
     1773, 1773, 1773, 1773, 1773, 1773, 1773, 1774, 1775, 1776,
     1777, 1778, 1779, 1779, 1780, 1781, 1782, 1783, 1784, 1785,
     1786, 1786, 1786, 1786, 1786, 1786, 1786, 1786, 1786, 1786,
     1786, 1786, 1787, 1787
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    6,    9,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       21,   21,   21,   21,   21,   22,   22,   23,   24,    6,
       25,    6,   26,   27,   28,   28,   29,   30,   31,   29,
       32,   33,   32,   34,   32,   32,   32,   35,   32,   32,
       32,   36,   37,   38,   32,   32,   39,   32,   32,   32,
       40,   41,   42,   43,   32,   44,   45,   46,   47,   48,

       49,   50,   51,   52,   53,   32,   54,   55,   56,   57,
       58,   59,   32,   60,   61,   62,   63,   64,   39,   65,
       66,   32,   67,   68,   69,   70,    1,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   72,   72,   73,   73,   73,   73,   73,   73,   73,

       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   75,
       75,   75,   75,   75,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72
    } ;

static const YY_CHAR yy_meta[76] =
    {   0,
        1,    2,    3,    4,    5,    6,    7,    8,    6,    9,
       10,    2,   11,   12,   13,   12,   14,   15,   16,   16,
       16,   16,   17,   18,    6,    6,   19,   16,   16,   16,
       16,   20,   20,   20,   20,   20,   20,   20,   20,   10,
        6,    7,   21,    1,   16,   16,   16,   16,   22,   16,
       20,   20,   20,   20,   23,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   10,    1,    7,   11,
        1,    1,   24,   24,   24
    } ;

static const flex_int16_t yy_base[2030] =
    {   0,
        0,    3,   78,    0,  153,    0,  228,    0,  302,  376,
        6,    8,  350,  356,  451,    0,  525,  599,  673,    0,
      362,  534,  715,  789,  863,  912,  961, 1030,  539,  544,
     5784, 5782, 5784,  235,13484, 5780, 5768,   11,  250,  256,
      261,   12,13484,   24,13484, 5769,13484,  621, 1099, 5745,
       30,   37,13484,  389,    0,13484,    6,13484, 1172,13484,
    13484,13484,13484, 5690, 5689, 5686,  551,  633, 1231,13484,
     1289, 5743,   12,  682,  707,  724,   50,13484, 5678, 5671,
     5667,  572,  731, 5714, 1357,  625,  706,  752,  801,  379,
     5664, 5663, 5655,13484,  343,13484, 5720,13484,13484, 1432,

    13484, 5641, 5637, 5634,13484, 5700,13484,  345,13484, 5697,
    13484, 1505,13484, 5626, 5619, 5617,13484,13484, 5679,    0,
       41, 1552,13484, 5550, 5530, 5529,13484, 5595, 1595, 1660,
    13484,  559,  794,  318,  529,  616, 5586,   61,  366,13484,
     5583,  554,  409,13484,   13,13484, 5577,13484,13484,    0,
      344,13484, 5576,13484,  420,13484,  601,  649,  822, 1724,
     5532, 5510, 5506, 5546,13484, 5555,13484,  840,13484,13484,
      509,  584,  678,  690,13484, 5542,  922,    0,13484,  579,
      697,  775,  943,  411,  973,  933,  899,  995,13484,13484,
      388,13484,13484,13484,  986, 1041,   52,    0,  710, 1750,

      832,  924, 1036,  805, 1184, 1016, 1002,  990, 1188, 1225,
     1172, 1219, 1250, 1093, 1261,  947, 1264, 5472, 5471, 5469,
      690,  917, 1163,  530, 1182,13484, 1063, 1813, 1326,  428,
     1339,    0, 1167,13484,  557,  808,13484, 1047,    0,13484,
     5467, 5462, 1385, 1206, 1307, 1499, 1514, 1569, 1282, 1610,
     1297, 1623, 5460, 5448, 5446, 1373, 1685,13484,13484,13484,
    13484,13484,13484,13484, 1330, 1881,13484, 1949, 1393, 2024,
        0, 1734, 1908, 1915,  703, 1920, 5444, 5443, 5442, 2092,
     5486, 2160,    0, 5436, 5434, 5427,  829, 2097, 5422, 5420,
     1655, 1399, 1982, 1753, 2100, 2121, 1347, 2133, 1520, 2182,

     5418, 5416, 5415, 2193, 1403, 2261,13484, 2329, 1514, 2404,
        0, 2223, 2288, 2295, 1135, 2300, 5414, 5408, 5406, 2472,
     1494, 2540,    0, 5404, 5402, 5401, 2477, 5400, 5394,  627,
      541,13484,13484,  558,  867,13484,13484, 1195,13484,    0,
    13484, 5385, 5382,13484,  986,  546,13484,13484,  585,  893,
    13484, 1600,    0,13484, 5379, 5378,13484,    0, 1390, 2597,
    13484, 1028,13484, 1407, 1669,    0,13484, 1269,  659, 1609,
      786, 1723, 1766, 1694, 1898, 5402, 1276,  575,13484,  921,
     1093, 1101,13484,    0, 1121,13484, 1940, 1496, 2210, 1757,
     1991, 2230, 2646, 5384, 5383, 5369,13484,13484,13484,13484,

        7,    0, 1574,  621,13484,  645, 1283,13484, 1999, 2082,
     2486, 2133,13484,13484,13484,  716,  747, 1635, 1742,    0,
     2702, 1659, 5347, 5343, 5342, 1001, 5354, 1508, 5355, 1835,
     5350, 5355, 5347, 5346,  624, 5332, 1255, 5325, 5334,  259,
     5321, 5322, 1871, 1904, 2084, 2225, 2088, 2251, 2266, 2306,
     2324, 2463, 2459, 2291, 2752, 2467, 2319, 2491, 2189, 2566,
     2507, 2526, 2499, 2520, 2530, 2556, 2561, 5302, 5299, 2202,
     2827, 2645, 2367,    0, 2653,    0, 2671, 2688,13484, 2504,
        0, 2720, 2587, 2660, 2676, 1380, 1886,13484, 5345, 5294,
     2706, 2751, 2895, 2766, 2784, 2902, 2913, 2916, 2924, 5288,

     5287, 5286, 2724, 2938, 2977, 2998, 5280, 5274, 5273, 2905,
     5320, 1866, 5269, 5267, 5266, 5259, 5250,13484,13484, 3001,
     3006, 3019, 5248, 5247, 5244, 3087, 3155, 3039, 2111, 5290,
     2792, 3011, 3223, 1900, 2993, 3106, 5241, 5237, 5232, 3118,
     2626, 5277, 3291, 1942, 3024, 3132, 5223, 5221, 5219, 3168,
     3359, 3210, 3250, 2118, 3278, 5218, 5217, 5215, 2140, 5209,
     5207, 5195, 5193, 5191, 3318, 3331, 3367, 5189, 5181, 5178,
     3435, 5177, 5172, 5171, 2885, 3181, 3503, 3240, 3194, 3392,
     3395, 3463, 3471, 5164, 5157, 5143, 2952, 3474, 3512, 3545,
     5139, 5129, 5127, 3148, 5174, 2144, 5125, 5115, 5114, 5104,

     5103, 3548, 3556, 3573, 5102, 5101, 5092, 3641, 3709, 3593,
     2735, 5139, 3259, 3323, 3777, 2220, 3161, 3618, 5080, 5077,
     5076, 3654, 2889, 5122, 3845, 2246, 3296, 3686, 5073, 5071,
     5068, 3722, 3913, 3764, 3804, 2418, 3832, 5065, 5054, 5050,
     2423, 5046, 5045, 5042, 5039, 5030, 3872, 3885, 3921, 5028,
     5027, 4963, 2102, 3249, 1125, 3989, 4942, 4940, 4932, 1386,
     1381, 2933,13484, 4970, 4922, 1573, 1537, 3092,13484, 4968,
     4918, 3122, 2535, 2577,    0, 4050,    0, 3406, 3429, 3173,
     1656, 1542,    0,    0, 3453, 3308, 3521, 4926, 4925, 4926,
        0, 2591,13484, 3794, 3950, 3667, 1547,  799, 1680, 4955,

     2635, 3205, 4953, 4082, 4895, 4889, 4901, 4907, 4894,  775,
     4888, 4877, 4877,  280, 4865, 4870, 1547, 4841,    0, 4841,
     4826, 4842, 4831, 1909, 4825, 4824, 4824, 4821, 4817, 4805,
     4804, 3744, 3880, 3977, 4017, 4002, 4082, 4033, 4112, 4121,
     4140, 4136, 4149, 4176, 4168, 4195,13484, 4214, 4245, 4794,
     4790, 4789, 4250, 4274, 4349, 4262, 2772,13484, 4254, 4363,
     4438, 4383, 4465, 4461, 4474, 4782, 4379, 3744, 3538, 3813,
     4549, 4610, 4039, 3573, 2116, 4211, 3584, 4834, 4618, 4660,
     4631, 3606, 4691, 4647, 4709, 4720, 4768, 4759, 4757, 4753,
     4751, 4731, 4734, 4745, 4742, 4739, 4732, 4730, 4727, 3704,

     3888, 2716, 4720, 4716, 4714, 2743, 4709, 4707, 4702, 4696,
     4689, 4688, 4773, 4794, 4806, 4684, 4679, 4674, 4673, 4669,
     4874, 3016, 2909, 4667, 4656, 4645, 2990, 4942, 3174, 3269,
     3631, 3057, 4836, 4644, 4621, 4618, 3084, 4617, 4607, 4600,
     4161, 4590, 4577, 4573, 3903, 4295, 4571, 4565, 5017, 4823,
     4411,    0, 4470, 4359, 4908, 4911, 4922, 5085, 5092, 3647,
     4555, 4495, 4475, 3091, 4471, 4470, 4466, 4462, 4461, 4448,
     4447, 4445, 5103, 5106, 5114, 4437, 4433, 4428, 4427, 4412,
     5182, 4404, 4957, 5250, 5201, 3658, 5210, 5236, 5274, 5279,
     4401, 4400, 4398, 4397, 4389, 5312, 5319, 5333, 4388, 4383,

     4381, 4376, 4364, 4421, 4620, 3242, 4355, 4348, 4336, 3263,
     4334, 4332, 4331, 4326, 4316, 4306, 5355, 5372, 5393, 4296,
     4292, 4287, 4284, 4275, 5461, 3430, 3282, 4274, 4268, 4263,
     3314, 5529, 3458, 3621, 3930, 3356, 5421, 4262, 4251, 4250,
     3386, 4238, 4228, 4207, 4789, 4204, 4201, 4200, 5133, 4855,
     4194, 4192, 5604, 5219, 4501,    0, 5172, 5402, 5447, 5489,
     5508, 5672, 5679, 3715, 4190, 4189, 4187, 3592, 4186, 4183,
     4182, 4177, 4157, 4149, 4146, 4141, 5690, 5693, 5701, 4137,
     4135, 4134, 4122, 4121,  837,  909, 3678, 3714,    0,    0,
     5769, 4119, 3922, 5830, 4022, 4133, 5879, 5948,    0,    0,

     3971, 5550, 1914, 4100, 6000, 4108, 2990, 2991, 4127, 4113,
     4111, 4091, 4088, 4084, 4084, 4073, 4056, 3005, 4064, 4028,
     4033, 4020, 4028, 4018, 4019, 4008, 4005, 4005, 3985, 3985,
     3207, 3980, 3412,13484, 3487,13484, 4093, 3783, 3728, 4257,
     6050, 4428, 6125, 5138, 4296, 3516,13484, 3695, 4102, 4451,
     6200, 4611,13484, 4623, 6231, 4696, 3960, 3959, 3952, 5293,
     4752, 6294,13484, 4650,    0, 4922, 3950, 3947, 3946, 4935,
     6369, 3549,13484, 5109, 5710, 5312, 4321,    0, 5438, 4262,
     4392, 4509, 6437, 5778, 6505, 5793, 5796, 5814, 3944, 3942,
     3934, 3932, 3930, 3927, 3909, 3897, 3895, 3749, 3886, 3868,

     3856, 3846, 3845, 3843, 3842, 3839, 3838, 3830, 3815, 3796,
     3812, 3803, 3802, 3792, 3790, 3900, 3783, 3777, 3775, 6573,
     5891, 3910, 3774, 3771, 3770, 3765, 3758, 3739, 3734, 5095,
     5388, 3724, 3715, 3705, 3703, 3702, 5878, 3691,    0, 5909,
     4893, 6081, 5921, 5950, 6088, 6163, 6316, 3686, 3683, 3654,
     6377, 5480, 6380, 6461, 6641, 6464, 3648, 3642, 3639, 6472,
     6532, 6544, 3588, 3586, 3583, 5518, 3622, 3953, 3564, 3531,
     3527, 3526, 3518, 3513, 3511, 3499, 3496, 3495, 3479, 3456,
     6709, 5977, 6777, 6607, 6612, 6648, 3445, 3441, 3436, 3429,
     3425, 3424, 3414, 3405, 3393, 3973, 3392, 3376, 3366, 3349,

     3345, 3340, 3337, 3328, 3314, 3301, 3292, 4128, 3289, 3288,
     3278, 3276, 3262, 4165, 3261, 3249, 3236, 6845, 6156, 4171,
     3231, 3220, 3217, 3216, 3204, 3193, 3185, 5696, 5931, 3181,
     3180, 3170, 3168, 3161, 6060, 3140,    0, 6239, 4979, 6675,
     6326, 6682, 6716, 6737, 6744, 3102, 3097, 3079, 6805, 5759,
     6816, 6869, 6937, 6894, 3076, 3074, 3063, 6908, 6962, 6970,
     3053, 3034, 3032, 5964, 3078, 4309, 3029, 3025, 3016, 3011,
     3007, 2998, 2986, 2977, 2974, 2972, 2969, 2964, 7044,13484,
    13484,    0,    0, 6621, 5568, 2976, 2965, 2970, 2947, 2956,
     2901,    0, 3631, 2884, 2894, 2880, 2889,    0, 2886, 2889,

     3699, 2860,    0, 2875, 2856,    0, 2854, 7114, 7189, 7264,
     4134,13484, 3743, 7295, 4660, 2837, 2773, 2751, 4787,13484,
     3879,    0, 2731, 2730, 2711, 3885,13484, 4081, 4829, 4148,
     5359,13484, 4664,    0, 2709, 2707, 2697, 4744, 4774, 4924,
    13484, 5372,13484, 4928,    0, 2694, 2690,  251, 5506, 5122,
    13484, 5000,    0,  255,  280,  285, 7358, 5075, 6049, 2316,
     7426, 6756,  291,  334,  348,  355,  462,  469,  483,  524,
      592,  606,  625,  634,  651,  658, 7494, 7000, 6013, 6657,
      670,  686,  702,  725,  732,  737,  758, 6835, 6884, 7009,
     7025, 7136, 7209,  774,  780,  806,  817,  828, 7227, 7363,

     7397,  873,  878,  900, 6927, 7460, 7465, 7519,  915,  937,
      938,  948,  953, 7533, 7536, 7547,  958,  965,  977, 1008,
     1031, 6277, 6423, 4583, 1036, 1043, 1072, 4627, 1099, 1100,
     1108, 1110, 1119, 1125, 1127, 1129, 7615, 7074, 1134, 1135,
     1149, 1153, 1164, 1172, 1185, 1189, 1205, 1209, 1219, 1220,
     1224, 1236, 7683, 7087, 6952, 7149, 1251, 1259, 1260, 1269,
     1271, 1273, 1302, 7059, 7199, 7274, 7574, 7642, 7649, 1325,
     1326, 1332, 1346, 1440, 7654, 7717, 7722, 1452, 1461, 1467,
     7388, 7725, 7746, 7758, 1485, 1487, 1497, 1508, 1513, 7785,
     7799, 7807, 1514, 1519, 1520, 1537, 1542, 6510, 7304, 4656,

     1555, 1561, 1563, 4825, 1565, 1568, 1570, 1580, 1581, 1597,
     1602, 1607,13484,13484, 1645,    0, 5002,    0, 1643, 1647,
     1654, 5214, 1652, 5249, 1651, 5302, 1657, 1657, 1659, 1674,
        0,13484, 5352, 7838, 1656, 1659, 1670, 5400,13484,13484,
     5501,    0, 1675, 1681, 1698, 7901, 5732, 7976, 5709,13484,
     5780, 5738,13484, 8051, 5746,13484, 5842, 8126, 8201, 6539,
    13484, 5522,    0, 1700, 1709, 1711, 5664, 1718, 1719, 1721,
     1733, 8269, 1759, 1822, 8337, 7923, 7998, 8073, 1824, 1826,
     1828, 1838, 1851, 1865, 8148, 8209, 8277, 1878, 1879, 1882,
     1896, 1914, 8294, 8354, 8362, 1915, 1920, 1921, 1925, 1926,

     1929, 1935, 1938, 1970, 4833, 2035, 2039, 2041, 2054, 2055,
     2057, 2065, 2066, 2068, 2074, 2080, 2098, 8430, 2107, 2117,
     8498, 8390, 8417, 8453, 2118, 2126, 2127, 2129, 2131, 2133,
     8458, 8470, 8531, 2140, 2155, 2157, 2182, 2187, 8534, 8539,
     8542, 2189, 2194, 2199, 2200, 2202, 2204, 2206, 2214, 2219,
     4847, 2220, 2226, 2230, 2231, 2236, 2238, 2242, 2257, 2282,
        0, 2292,    0, 2289,    0, 2295,    0,    0, 5806,13484,
     5860,    0, 2287, 2300, 2301, 8617,13484, 5939,    0, 2305,
     2306, 2313, 7100,13484, 6072,    0, 2319, 2320, 2324, 8692,
    13484, 6084,    0, 2325, 2329, 2330,13484, 6159,    0, 2350,

     2410, 2412, 5812,13484, 2413, 2416, 2417, 2431, 2438, 2439,
     2441, 2442, 2447, 2450, 2456, 2458, 2460, 2473, 2499, 2504,
     2505, 2514, 2517, 2519, 2520, 2531, 2549, 2550, 2553, 2561,
     2562, 2566, 2681,    0, 5823,    0,13484, 6172,    0, 2567,
     2581, 2592, 5973,13484,13484, 6190,    0, 2600, 2607, 2612,
     2633, 2635, 2641, 2643, 2647, 2649, 2664, 2667, 6385,    0,
        0,13484,13484, 8767, 8791, 8815, 8839, 8863, 8887, 8911,
     8923, 8946, 8970, 8989, 9008, 9027, 9046, 9065, 9084, 9108,
     9117, 9133, 9156, 9180, 9204, 9228, 9252, 2915, 9271, 9283,
     9306, 2777, 9325, 9344, 9363, 9382, 9401, 9420, 9439, 9458,

     9477, 9496, 9515, 9534, 9553, 9572, 9591, 9610, 9629, 9648,
     9667, 9686, 2944, 3015, 9695, 9703, 3278, 9726, 9738, 9761,
     9785, 3061, 9809, 9833, 9857, 9866, 9877, 3099, 9895, 9906,
     3101, 9924, 9943, 9962, 9981,10000,10019,10038,10057,10076,
    10095,10114,10133,10152,10171,10190,10209,10228,10247,10266,
    10285,10304,10323,10342,10361,10380,10399,10418,10437,10456,
    10475,10494,10513,10532,10551,10570,10589,10608,10627, 3361,
     3497, 3882,10639, 3260,10662,10686, 3287, 3346,10698, 3423,
    10721,10744,10755,10773,10792,10811,10830,10849,10868,10887,
    10906,10925,10944,10963,10982,11001,11020,11039,11058,11077,

    11096,11115,11134,11153,11172,11191,11210,11229,11248,11267,
    11286,11305,11324,11343,11362,11381,11400,11419,11438,11457,
    11476,11495,11514,11533,11552,11571,11590, 3379,11602,11625,
     3391, 3461,11634,11657,11681,11700,11719,11738,11757,11776,
    11795,11814,11833,11852,11871,11890,11909,11928,11947,11966,
    11985,12004,12023,12042,12061,12080,12099,12118,12137,12156,
    12175,12194,12213,12232,12251,12270,12289,12308,12327,12346,
    12365,12384,12408, 3471, 3547,12420,12443,12467,12491,12515,
    12539,12563,12582,12601,12620,12639,12658,12677,12696,12715,
    12734,12753,12772,12791,12810,12829,12848,12867,12886,12905,

    12924,12943,12962,12981,13000,13019,13043,13067,13091,13110,
    13121,13139,13158,13177,13196,13215,13234,13253,13272,13291,
    13315,13339,13363,13387,13411,13435,13459, 3558, 3595
    } ;

static const flex_int16_t yy_def[2030] =
    {   0,
     1764, 1764, 1763,    3, 1763,    5, 1763,    7, 1765, 1765,
       10,   10, 1766, 1766, 1763,   15, 1766, 1766,    3,   19,
     1766, 1766, 1766, 1766, 1767, 1767, 1768, 1768, 1766, 1766,
     1769, 1769, 1763, 1770, 1763, 1763, 1763, 1763, 1770, 1770,
     1770, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1771, 1772, 1763, 1771, 1763, 1773, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1774, 1763, 1763,
     1774, 1763, 1763,   71, 1775, 1776,   71, 1763, 1763, 1763,
     1763, 1763, 1777,   69, 1777, 1763,   85, 1778, 1779,   85,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,

     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1780, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1781,
     1781, 1781, 1763, 1763, 1763, 1763, 1763, 1763, 1782, 1780,
     1763, 1763, 1763, 1763, 1763, 1771, 1763, 1763, 1763, 1763,
     1763,  130,  130, 1763, 1763, 1763, 1763, 1763, 1763, 1783,
     1763, 1763, 1763, 1763, 1783, 1763, 1783, 1783, 1783, 1784,
     1783, 1783, 1783, 1763, 1763, 1763, 1763, 1785, 1763, 1763,
     1770, 1770, 1770, 1770, 1763, 1763, 1763, 1786, 1763, 1770,
     1770, 1770, 1763, 1787, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1788,   49, 1789, 1763,

     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1790, 1763, 1763, 1763, 1771, 1771,
     1771, 1791, 1763, 1763, 1763, 1763, 1763, 1763, 1792, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1793, 1794, 1763, 1795,
     1796, 1794, 1763, 1763, 1763, 1763, 1797, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1793, 1763, 1798, 1763, 1763,
      266,  266, 1799, 1800, 1801, 1800, 1763, 1763, 1763, 1802,
     1763, 1802,  282, 1763, 1763, 1763, 1763, 1794, 1763, 1763,
     1763, 1763, 1763, 1763, 1803, 1804, 1763, 1805, 1806, 1804,

     1763, 1763, 1763, 1807, 1763, 1803, 1763, 1808, 1763, 1763,
      306,  306, 1809, 1810, 1811, 1810, 1763, 1763, 1763, 1812,
     1763, 1812,  322, 1763, 1763, 1763, 1804, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1813,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1814, 1763, 1763, 1763, 1763, 1815, 1815, 1815,
     1763, 1763, 1763, 1763, 1816, 1816, 1763, 1763, 1763, 1763,
     1817, 1763, 1763, 1818, 1819, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1820, 1763, 1763, 1820, 1820, 1820, 1820,
     1820, 1820, 1821, 1820, 1820, 1820, 1763, 1763, 1763, 1763,

     1822, 1823, 1824, 1825, 1763, 1825, 1763, 1763, 1763, 1826,
     1763, 1763, 1763, 1763, 1763, 1763, 1827, 1763, 1827, 1828,
     1827, 1829, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1829, 1829, 1829, 1829, 1829, 1829, 1829, 1829,
     1829, 1829, 1829, 1829, 1829, 1829, 1829, 1829, 1829, 1829,
     1829, 1829, 1829, 1829, 1829, 1829, 1829, 1763, 1763, 1763,
     1763, 1763, 1763, 1826, 1826, 1826, 1826, 1763, 1763,  475,
     1826, 1826, 1763, 1830, 1763, 1763, 1763, 1763, 1831, 1763,
     1763, 1763, 1832, 1763, 1763, 1833, 1833, 1834, 1833, 1763,

     1763, 1763, 1763, 1835, 1836, 1836, 1763, 1763, 1763, 1837,
     1763, 1838, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1839,
     1840, 1840, 1763, 1763, 1763, 1832, 1833,  527, 1841, 1763,
     1763, 1832, 1842, 1843, 1844, 1841, 1763, 1763, 1763, 1763,
     1841, 1763, 1842, 1843, 1844, 1841, 1763, 1763, 1763,  527,
     1845, 1846, 1846, 1847, 1846, 1763, 1763, 1763, 1848, 1763,
     1763, 1763, 1763, 1763, 1849, 1850, 1850, 1763, 1763, 1763,
     1849, 1763, 1763, 1763, 1763, 1763, 1851, 1763, 1763, 1852,
     1852, 1853, 1852, 1763, 1763, 1763, 1763, 1854, 1855, 1855,
     1763, 1763, 1763, 1856, 1763, 1857, 1763, 1763, 1763, 1763,

     1763, 1858, 1859, 1859, 1763, 1763, 1763, 1851, 1852,  609,
     1860, 1763, 1763, 1851, 1861, 1862, 1863, 1860, 1763, 1763,
     1763, 1763, 1860, 1763, 1861, 1862, 1863, 1860, 1763, 1763,
     1763,  609, 1864, 1865, 1865, 1866, 1865, 1763, 1763, 1763,
     1867, 1763, 1763, 1763, 1763, 1763, 1868, 1869, 1869, 1763,
     1763, 1763, 1763, 1763, 1870, 1868, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1871, 1763, 1763, 1763, 1763, 1763, 1872,
     1763, 1763, 1763, 1873, 1874, 1873, 1875, 1763, 1763, 1763,
     1763, 1763, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876,
     1877, 1878, 1763, 1763, 1879, 1879,  696, 1763, 1873, 1873,

     1763, 1873, 1880,  676, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1881, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1882, 1882, 1882, 1882, 1882, 1882, 1882, 1882, 1882,
     1882, 1882, 1882, 1882, 1882, 1882, 1763, 1882, 1763, 1763,
     1763, 1763, 1882, 1882, 1882, 1882, 1763, 1763, 1882, 1882,
     1882, 1882, 1882, 1882, 1882, 1763, 1879,  767, 1763, 1879,
     1763, 1763, 1763,  767,  696,  696, 1883, 1883, 1763, 1884,
     1885, 1763, 1886, 1887, 1888, 1888, 1763, 1763, 1763, 1763,
     1763, 1889, 1889, 1889, 1763, 1763, 1763, 1763, 1763, 1890,

     1890, 1891, 1763, 1763, 1763, 1892, 1763, 1763, 1763, 1763,
     1763, 1763, 1893, 1893, 1893, 1763, 1763, 1763, 1763, 1763,
     1884, 1885, 1894, 1763, 1763, 1763, 1895, 1886, 1885, 1885,
      821, 1896, 1885, 1763, 1763, 1763, 1897, 1763, 1763, 1763,
     1898, 1763, 1763, 1763, 1885,  821, 1763, 1763, 1763, 1763,
     1763,  821, 1885,  821, 1899, 1900,  828, 1901, 1902, 1903,
     1763, 1763, 1763, 1904, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1905, 1905, 1905, 1763, 1763, 1763, 1763, 1763,
     1905, 1763, 1763, 1906, 1907, 1763, 1908, 1909, 1910, 1910,
     1763, 1763, 1763, 1763, 1763, 1911, 1911, 1911, 1763, 1763,

     1763, 1763, 1763, 1912, 1912, 1913, 1763, 1763, 1763, 1914,
     1763, 1763, 1763, 1763, 1763, 1763, 1915, 1915, 1915, 1763,
     1763, 1763, 1763, 1763, 1906, 1907, 1916, 1763, 1763, 1763,
     1917, 1908, 1907, 1907,  925, 1918, 1907, 1763, 1763, 1763,
     1919, 1763, 1763, 1763, 1920, 1763, 1763, 1763, 1907,  925,
     1763, 1763, 1763, 1763, 1763,  925, 1907,  925, 1921, 1922,
      932, 1923, 1924, 1925, 1763, 1763, 1763, 1926, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1927, 1927, 1927, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1928, 1928,
     1927, 1763, 1929, 1929, 1763, 1930, 1930, 1930, 1931, 1932,

     1933, 1763, 1929, 1929,  994, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1934, 1763, 1763, 1763, 1935, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1936, 1936, 1936, 1936,
     1936, 1936, 1936, 1936, 1936, 1763, 1763, 1936, 1936, 1936,
     1936, 1936, 1763, 1936, 1763, 1936, 1763, 1763, 1763, 1936,
     1936, 1936, 1763, 1936, 1055, 1936, 1763, 1763, 1763, 1936,
     1936, 1763, 1763, 1936, 1933, 1933, 1933, 1075, 1933, 1763,
     1933, 1933, 1937, 1763, 1938, 1939, 1939, 1939, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1940, 1763, 1763,

     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1941,
     1763, 1763, 1763, 1763, 1763, 1942, 1763, 1763, 1763, 1938,
     1943, 1944, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1945,
     1945, 1763, 1763, 1763, 1763, 1763, 1120, 1763, 1120, 1943,
     1763, 1937, 1120, 1946, 1946, 1947, 1946, 1763, 1763, 1763,
     1948, 1943, 1946, 1946, 1949, 1950, 1763, 1763, 1763, 1951,
     1952, 1952, 1763, 1763, 1763, 1953, 1763, 1954, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1955, 1763, 1956, 1957, 1957, 1957, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1958, 1763, 1763, 1763, 1763,

     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1959, 1763, 1763,
     1763, 1763, 1763, 1960, 1763, 1763, 1763, 1956, 1961, 1962,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1963, 1963, 1763,
     1763, 1763, 1763, 1763, 1218, 1763, 1218, 1961, 1763, 1955,
     1218, 1964, 1964, 1965, 1964, 1763, 1763, 1763, 1966, 1961,
     1964, 1964, 1967, 1968, 1763, 1763, 1763, 1969, 1970, 1970,
     1763, 1763, 1763, 1971, 1763, 1972, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1973, 1763,
     1763, 1974, 1975, 1976, 1976, 1763, 1763, 1763, 1763, 1977,
     1763, 1978, 1763, 1763, 1763, 1763, 1763, 1979, 1763, 1763,

     1763, 1763, 1980, 1763, 1763, 1981, 1763, 1982, 1982, 1982,
     1309, 1763, 1309, 1763, 1309, 1763, 1763, 1763, 1309, 1763,
     1309, 1314, 1763, 1763, 1763, 1763, 1763, 1309, 1309, 1309,
     1309, 1763, 1309, 1314, 1763, 1763, 1763, 1309, 1309, 1763,
     1763, 1309, 1763, 1309, 1314, 1763, 1763, 1763, 1309, 1309,
     1763, 1309, 1314, 1763, 1763, 1763, 1309, 1763, 1976, 1285,
     1983, 1984, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1983, 1984, 1984, 1377,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1984, 1377, 1377,
     1985, 1986, 1986, 1763, 1763, 1763, 1763, 1763, 1987, 1988,

     1988, 1763, 1763, 1763, 1984, 1989, 1990, 1990, 1763, 1763,
     1763, 1763, 1763, 1991, 1991, 1991, 1763, 1763, 1763, 1763,
     1763, 1992, 1992, 1993, 1763, 1763, 1763, 1994, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1995, 1996, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1995, 1996, 1996, 1453, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1996, 1453, 1453, 1997, 1998, 1998, 1763,
     1763, 1763, 1763, 1763, 1999, 2000, 2000, 1763, 1763, 1763,
     1996, 2001, 2002, 2002, 1763, 1763, 1763, 1763, 1763, 2003,
     2003, 2003, 1763, 1763, 1763, 1763, 1763, 2004, 2004, 2005,

     1763, 1763, 1763, 2006, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 2007, 1763, 2008, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     2009, 1763, 2010, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     2010, 1534, 1763, 1763, 1763, 2010, 2010, 2010, 1763, 1763,
     2010, 1763, 1763, 2010, 1763, 1763, 2010, 2010, 2010, 2010,
     1763, 2010, 1534, 1763, 1763, 1763, 2011, 1763, 1763, 1763,
     1763, 2012, 1763, 1763, 2012, 2013, 2013, 2013, 1763, 1763,
     1763, 1763, 1763, 1763, 2014, 2014, 2014, 1763, 1763, 1763,
     1763, 1763, 2015, 2015, 2015, 1763, 1763, 1763, 1763, 1763,

     1763, 1763, 1763, 1763, 2016, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 2017, 1763, 1763,
     2017, 2018, 2018, 2018, 1763, 1763, 1763, 1763, 1763, 1763,
     2019, 2019, 2019, 1763, 1763, 1763, 1763, 1763, 2020, 2020,
     2020, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     2005, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     2021, 1763, 2022, 1763, 2023, 1763, 2024, 2025, 1763, 1763,
     2010, 1534, 1763, 1763, 1763, 2010, 1763, 2010, 1534, 1763,
     1763, 1763, 2010, 1763, 2010, 1534, 1763, 1763, 1763, 2010,
     1763, 2010, 1534, 1763, 1763, 1763, 1763, 2010, 1534, 1763,

     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 2026, 1763, 2027, 1763, 2010, 1534, 1763,
     1763, 1763, 1763, 1763, 1763, 2010, 1534, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 2028,
     2029, 1763,    0, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,

     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,

     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,

     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763
    } ;

static const flex_int16_t yy_nxt[13560] =
    {   0,
     1763, 1763,   35,   36,   37,   35,   36,   37,  105,  106,
      105,  106,  177,  183,  382,  177,  183,  382,  178,  184,
     1763, 1763,  233,  179,  179,  185,   38, 1763,  185,   42,
      268,  268,  268,  268,  178,  184,  692,  186,  224,  186,
      187,  224,  188,  188,  188,  188,  222, 1763,  223,  223,
      223,  223,  235,  287,  692,  225,  225,  225,  225,  359,
      359,  359,  226,  235,  287,  420,  249,  420,  247,  247,
      247,  247,   39,   40,   41,   39,   40,   41,   43,   44,
       45,   46,   44,   43,   47,   48,   43,   43,   49,   50,
       43,   51,   43,   51,   52,   53,   54,   54,   54,   54,

       43,   55,   43,   43,   56,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   58,   59,   50,
       43,   60,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   61,   43,   62,   43,   63,   63,
       64,   65,   66,   43,   67,   45,   46,   67,   68,   47,
       69,   68,   70,   58,   43,   68,   71,   72,   71,   73,
       53,   74,   74,   74,   74,   75,   55,   68,   68,   76,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   58,   77,   43,   70,   60,   68,   68,   68,

       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   43,
       43,   78,   68,   63,   63,   79,   80,   81,   43,   82,
       45,   46,   82,   83,   47,   84,   83,   70,   58,   50,
       83,   85,   72,   85,   86,   83,   87,   87,   87,   87,
       88,   55,   83,   83,   89,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   58,   90,   50,
       70,   60,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   43,   43,   62,   83,   63,   63,

       91,   92,   93,   95,   96,   97,   95,  172,  173,  174,
       98,  728,   98,   98,   98,   98,  729,   98,   98,   99,
      180,  706,  172,  173,  174,  422,  181,   98,  172,  173,
      174,  182, 1015,  172,  173,  174,  372,  372,  372,  372,
     1016,   98,  100,   98,  330,  385,  345,  330,  385,  345,
      705,  108,  109,  110,  108,  706,  111,  108,  109,  110,
      108, 1086,  111,  139,  140,  141,  139,  377,  111,   98,
      377,   98,  101,  101,  102,  103,  104,   95,   96,   97,
       95,  235,  287,  331,   98,  346,   98,   98,   98,   98,
      112,   98,   98,   99,  413,  297,  112,  295,  295,  295,

      295,   98,  142,  227, 1568,  228,  378,  229,  229,  229,
      229,  380,  381,  405,  406,   98,  100,   98,  784,  231,
      113,  113,  114,  115,  116,  792,  113,  113,  114,  115,
      116,  414,  113,  113,  114,  115,  116,  231,  387,  387,
      387,  387, 1763,   98,  233,   98,  101,  101,  102,  103,
      104,  117,  107,  118,  119,  107,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  120,
      120,  120,  120,  117,  117,  117,  117,  117,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      117,  117,  117,  117,  117,  120,  120,  120,  120,  120,

      120,  120,  120,  120,  120,  120,  120,  120,  121,  120,
      120,  120,  120,  120,  120,  122,  120,  117,  117,  117,
      117,  123,  123,  124,  125,  126,  108,  127,  128,  108,
      224,  224, 1098,  224,  224,  139,  140,  141,  139, 1569,
      111,  165,  166,  334,  660,  167,  165,  166,  349,  666,
      167,  129,  243,  800,  226,  243,  380,  381,  486,  661,
      368,  486,  661,  368,  244,  130,  244,  245,  131,  246,
      246,  246,  246,  291,  142,  369,  291,  380,  681,  168,
      348,  172,  173,  174,  168,  292,  667,  292,  293,  667,
      294,  294,  294,  294,  806,  113,  113,  114,  115,  116,

      108,  127,  128,  108,  113,  113,  114,  115,  116,  113,
      113,  114,  115,  116,  113,  113,  114,  115,  116,  388,
      389,  389,  389,  405,  406,  129,  224,  190,  330,  224,
      373,  330,  374,  191,  375,  375,  375,  375,  192,  130,
      248,  307,  131,  308,  308,  308,  308,  693,  406,  249,
      226,  172,  173,  174,  180,  250,  172,  173,  174,  251,
      407,  193,  813,  407,  194,  390,  195,  331,  721,  113,
      113,  114,  115,  116,  132,  252, 1110,  132,  196,  391,
      133,  722,   70,   58,  408,  197,  134,   72,  134,  135,
       43,  136,  136,  136,  136, 1570,  269,  391,  270,  137,

      271,  271,  271,  271,  822,  253,  254,  255,  470,  470,
      470,  470,  272,  138,  274,   70,  139,  140,  141,  139,
      309, 1116,  310,  249,  311,  311,  311,  311, 1571,  275,
      272,  281,  200,  251,  417,  417,  312,  282,  296,  282,
     1122,  129,  283,  283,  283,  283,  257,  297,  181,  276,
      172,  173,  174,  298,  312,  143, 1573,  299,  131,  314,
      182,  698,  172,  173,  174,  699,  699,  180,  297,  172,
      173,  174,  829,  300,  315,  560,  561,  562,  299,  277,
      278,  279,  423,  424,  425,  113,  113,  114,  115,  116,
      139,  140,  141,  139,  316,  837,  284,  285,  286,  675,

      190,  675, 1130,  301,  302,  303,  191, 1574,  321,  486,
      235,  192,  486,  698,  322,  129,  322, 1003, 1003,  323,
      323,  323,  323,  304,  317,  318,  319,  200,  841,  143,
      486,  235,  131,  486,  193, 1010, 1011,  194,  390,  195,
      392,  392,  392,  392, 1391,  403,  400,  172,  173,  174,
     1582,  370,  391,  449,  200,  986,  986,  400,  371,  113,
      113,  114,  115,  116,  145,  146,  147,  145,  661,  334,
      391,  661,  148,  324,  325,  326, 1583,  423,  424,  425,
      400,  149,  149,  149,  149,  400,  443, 1144,  444,  400,
      149,  149,  149,  149,  667,  349,  400,  667, 1584,  400,

      407,  400,  401,  407,  423,  424,  425,  149,  149,  149,
      149,  149,  149,  145,  146,  147,  145,  225,  225,  225,
      225,  148,  682,  177,  408,  682,  177,  986,  986,  178,
      149,  149,  149,  149,  179,  225,  225,  225,  225,  149,
      149,  149,  149, 1399,  183,  178,  200,  183, 1591,  222,
      184,  188,  188,  188,  188,  179,  149,  149,  149,  149,
      149,  149,  151,  152,  153,  151,  184,  154,  155,  200,
     1592,  156,  156,  156,  185,  156,  157,  185,  445,  158,
      159,  159,  159,  156,  160, 1406,  186,  345,  186,  187,
      345,  188,  188,  188,  188,  415,  423,  424,  425,  416,

      156,  416,  156,  156,  417,  417,  466, 1599, 1600,  409,
      161,  410,  200,  411,  411,  411,  411,  162, 1153,  423,
      424,  425,  163, 1601,  200,  412,  346,  156, 1414,  156,
      164,  151,  152,  153,  151, 1602,  154,  155,  200,  455,
      156,  156,  156,  412,  156,  157,  454, 1603,  158,  159,
      159,  159,  156,  160,  418,  707,  418,  708,  200,  419,
      419,  419,  423,  424,  425,  487,  487,  487,  453,  156,
      488,  156,  156,  653,  423,  424,  425,  227, 1160,  161,
      446,  478,  478,  478,  478,  654,  162,  447,  423,  424,
      425,  163,  655,  448,  682,  380,  156,  682,  156,  164,

      198, 1604,  382,  198,  199,  382, 1422,  199,  423,  424,
      425,  199,  199, 1609,  199,  200,  199,  199,  199,  199,
      199,  200,  385,  199,  199,  385,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  989,  199,
      989,  463, 1610,  201,  202,  203,  204,  205,  206,  207,
      199,  208,  199,  209,  210,  211,  212,  213,  214,  215,
      216,  217,  199,  199,  199,  423,  424,  425,  199, 1428,
     1611,  218,  219,  220,  235,  236,  237,  227, 1612,  471,
     1166,  472,  472,  472,  472,  485,  485,  485,  485, 1613,
      238,  238,  238,  412,  200,  855,  473,  864,  474,  873,

      475,  475,  475,  475, 1184, 1614,  200,  642,  643,  644,
      200,  412,  477,  662,  662,  662,  237,  237,  663,  888,
      237,  237,  491,  896,  246,  246,  246,  246,  237,  459,
      477,  237,  456,  237, 1196,  237,  239,  190,  450,  451,
      452,  200, 1615,  191,  423,  424,  425,  200,  192,  256,
      256,  256,  256,  257,  258,  904,  423,  424,  425,  910,
      423,  424,  425,  259,  260,  261,  262,  263,  264,  457,
      368,  193,  200,  368,  194,  917,  195,  377,  460, 1208,
      377,  461,  458,  200,  407,  369,  200,  407,  196, 1616,
      926,  423,  424,  425, 1214,  197,  248,  423,  424,  425,

      503,  503,  503,  503,  511,  265, 1617,  266,  266,  266,
      266,  250,  462,  464,  724,  251,  378,  725,  465,  512,
      467, 1220,  423,  424,  425,  268,  268,  268,  268, 1619,
      933,  252,  408,  423,  424,  425,  423,  424,  425,  941,
      227, 1228,  228, 1620,  229,  229,  229,  229,  526,  526,
      526,  526,  483, 1763,  483,  233,  231,  484,  484,  484,
      484,  253,  254,  255,  296,  587,  587,  587,  587,  513,
      514,  515,  945,  305,  231,  306,  306,  306,  306,  298,
      518,  486,  661,  299,  486,  661,  243,  661,  334,  243,
      661,  256,  256,  256,  256, 1467, 1628,  519,  244,  300,

      244,  245, 1629,  246,  246,  246,  246,  269,  359,  359,
      359,  540,  540,  540,  540,  575, 1242,  294,  294,  294,
      294,  608,  608,  608,  608,  672,  672,  672,  672,  301,
      302,  303,  333,  333,  334,  335,  336,  333,  333,  333,
      337,  333,  337,  337,  337,  337,  333,  337,  337,  337,
      338,  338,  338,  333,  333,  333,  333,  337,  333,  333,
      333,  339,  333,  333,  333,  333,  333,  333,  339,  333,
      339,  337,  336,  337,  333,  333,  336,  336,  333,  339,
      336,  336,  333,  333,  333,  333,  333,  333,  336,  333,
      333,  336,  339,  336,  333,  336,  340,  333,  333,  337,

      333,  337,  333,  333,  333,  333,  333,  349,  350,  351,
     1630,  351,  390,  492,  351,  493,  304,  494,  494,  494,
      494,  497, 1475,  352,  352,  352,  391,  595,  309,  495,
      249, 1637,  622,  622,  622,  622,  498, 1638,  667,  653,
      251,  667,  596,  682,  391,  351,  682,  495,  351,  351,
      351,  654,  710,  351,  351, 1482,  499, 1645,  655,  711,
     1763,  351, 1763,  474,  351,  712,  351, 1646,  351,  353,
      360,  360,  360,  360,  667,  349,  248,  667, 1251,  360,
      360,  360,  360, 1647, 1490,  249,  500,  501,  502, 1648,
     1649,  250,  597,  598,  599,  251,  360,  360,  360,  360,

      360,  360,  362, 1019,  363,  363, 1020, 1258,  364,  363,
      364,  252, 1650,  365,  365,  365,  365,  505,  668,  668,
      668,  363,  673,  669,  673, 1498,  249,  674,  674,  674,
      248, 1655,  275, 1656,  363, 1504,  251,  363, 1657,  249,
     1658,  253,  254,  255,  180,  250,  172,  173,  174,  251,
     1264, 1659,  506,  419,  419,  419,  291,  682,  380,  291,
      682,  363,  349,  350,  351,  252,  351,  959,  292,  351,
      292,  293,  968,  294,  294,  294,  294,  977,  352,  352,
      352,  200,  507,  508,  509, 1660,  367,  365,  365,  365,
      365, 1661,  521, 1662,  698,  253,  254,  255,  699,  699,

      351,  249, 1663,  351,  351,  351, 1664,  275,  351,  351,
     1665,  251,  680,  680,  680,  680,  351, 1666, 1667,  351,
     1668,  351, 1669,  351,  353,  232,  422,  522,  232,  705,
      232,  423,  424,  425,  232,  232,  232,  373,  232,  677,
      706,  678,  678,  678,  678,  422,  232,  550, 1763,  550,
      249,  705,  551,  551,  551,  551,  701,  523,  524,  525,
      702,  702,  702,  232,  496,  232,  232,  576,  706,  577,
      422,  578,  578,  578,  578,  685,  685,  685,  685,  705,
      373,  706,  496,  579,  679,  679,  679,  679, 1086, 1098,
      232, 1110,  232,  232,  426,  427,  428,  429,  430,  431,

      432,  579,  433, 1116,  434,  435,  436,  437,  438,  439,
      440,  441,  442,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479, 1122,
      479,  480,  480,  480,  480,  479,  479,  479,  479,  479,
      481,  481,  481,  482,  481,  481,  481,  481,  481,  481,
      481,  481,  479,  479,  479,  479,  479,  481,  481,  481,
      481,  482,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  497,  714,
      715,  716, 1130,  200, 1576,  269, 1705,  270, 1706,  527,

      527,  527,  527,  498,  487,  487,  487,  251, 1391,  488,
      757,  528,  373,  757,  374,  553,  375,  375,  375,  375,
      758, 1707,  274,  499,  249,  732,  200,  274,  698,  528,
      554,  249,  699,  699,  251, 1144,  249,  275,  807,  808,
      809,  251,  275,  423,  424,  425,  251,  683, 1585, 1708,
      555,  733, 1709,  500,  501,  502,  530,  276,  387,  387,
      387,  387,  276,  531,  684,  532, 1399,  533,  533,  533,
      533,  534,  838,  839,  840,  535,  423,  424,  425,  536,
      556,  557,  558,  407, 1710, 1593,  407,  277,  278,  279,
     1711, 1712,  277,  278,  279, 1406, 1713,  536,  307, 1153,

      308,  308,  308,  308,  686, 1414,  686,  408, 1714,  687,
      687,  687,  687,  409,  838,  839,  840,  694,  694,  694,
      694,  537,  538,  539,  479,  479,  479,  479,  479,  541,
      479,  542,  541,  479,  479,  479,  541,  541,  479,  541,
     1160,  479,  543,  543,  543,  543,  544,  479,  541,  541,
      545,  541,  541,  541,  546,  541,  541,  541,  541,  541,
      541,  541,  541,  479,  541,  479,  479,  479,  541,  541,
      541,  541,  546,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      479,  479,  479,  541,  479,  479,  547,  548,  549,  566,

      695,  695,  695,  695,  248, 1605,  200,  581,  249, 1715,
      200, 1716,  696,  249,  250,  985,  297,  985,  251,  250,
      986,  986,  582,  251, 1422, 1717,  299, 1428,  296, 1763,
      696, 1763,  474,  823,  567, 1718, 1166,  297, 1184,  252,
      589,  734,  583,  298, 1196,  737,  483,  299,  483,  297,
     1208,  697,  697,  697,  697,  315,  423,  424,  425,  299,
      423,  424,  425,  300,  568,  569,  570,  566, 1214,  253,
      254,  255,  584,  585,  586,  590,  249, 1220,  571,  571,
      571,  571,  250,  824,  825,  826,  251, 1228, 1622,  296,
      865,  866,  867,  301,  302,  303, 1719, 1720,  297, 1467,

      603, 1721,  567, 1242,  298,  591,  592,  593,  299,  297,
     1631,  200,  560,  561,  562,  315,  911,  912,  913,  299,
      470,  470,  470,  470,  300, 1722,  390, 1723,  392,  392,
      392,  392,  568,  569,  570,  604,  632, 1763,  632,  297,
      391,  633,  633,  633,  633,  756,  390,  200,  392,  392,
      392,  392, 1475,  580,  301,  302,  303, 1724,  391, 1639,
      391,  423,  424,  425, 1725,  605,  606,  607,  581, 1726,
     1482,  580, 1727,  200, 1251,  309, 1490,  310,  391,  609,
      609,  609,  609,  582, 1728,  735,  736,  299,  200, 1258,
     1651,  610,  942,  943,  944,  635, 1729,  423,  424,  425,

     1730, 1498,  314,  583,  297,  738, 1731,  314, 1504,  610,
      636,  297, 1732,  200,  299,  739,  297,  315,  942,  943,
      944,  299,  315,  423,  424,  425,  299, 1264,  200, 1763,
      637, 1763,  474,  584,  585,  586,  612,  316,  423,  424,
      425,  200,  316,  613, 1733,  614,  200,  615,  615,  615,
      615,  616,  746, 1734, 1735,  617, 1736,  422,  740,  618,
      638,  639,  640,  423,  424,  425,  741,  317,  318,  319,
      705,  706,  317,  318,  319,  422,  705,  618,  423,  424,
      425,  473,  742,  706,  754,  768,  768,  768,  768,  422,
      705,  423,  424,  425,  706,  422,  423,  424,  425,  705,

      706,  619,  620,  621,  479,  479,  479,  479,  479,  623,
      479,  624,  623,  479,  479,  479,  623,  623,  479,  623,
      422,  623,  625,  625,  625,  625,  626,  479,  623,  623,
      627,  623,  623,  623,  628,  623,  623,  623,  623,  623,
      623,  623,  623,  479,  623,  479,  479,  479,  623,  623,
      623,  623,  628,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      479,  479,  479,  623,  479,  479,  629,  630,  631,  648,
      705,  200,  706, 1576,  296,  200, 1751, 1391,  297,  200,
      969,  970,  971,  297,  298,  642,  643,  644,  299,  298,

      409, 1585,  410,  299,  411,  411,  411,  411, 1752, 1399,
      743, 1593, 1753,  200,  649,  744,  412, 1406,  745,  300,
     1414,  200,  774,  774,  774,  774, 1605,  753, 1754,  200,
     1422,  423,  424,  425,  412,  423,  424,  425,  755,  423,
      424,  425,  200, 1428,  650,  651,  652,  648,  200,  301,
      302,  303,  200,  674,  674,  674,  297,  761,  656,  656,
      656,  656,  298,  423,  424,  425,  299,  757,  759, 1622,
      757,  423,  424,  425, 1755, 1467,  762,  758,  200,  423,
      424,  425,  649,  200, 1631,  763,  760, 1756,  200, 1475,
     1639,  701,  423,  424,  425,  993,  993,  993,  423,  424,

      425, 1757,  423,  424,  425,  697,  697,  697,  697,  999,
      999,  999,  650,  651,  652,  360,  360,  360,  360, 1482,
     1490,  764,  765, 1651,  360,  360,  360,  360,  423,  424,
      425, 1758, 1498,  423,  424,  425, 1504,  422,  423,  424,
      425,  360,  360,  360,  360,  360,  360,  232,  823,  701,
      232,  705,  232, 1004, 1004, 1004,  232,  232,  232,  227,
      232,  471,  706,  472,  472,  472,  472,  473,  232,  474,
      422,  475,  475,  475,  475,  412,  776,  705,  777,  777,
      777,  777,  706,  477,  769,  232,  769,  232,  232,  770,
      770,  770,  770,  412,  485,  485,  485,  485,  824,  825,

      826,  477,  227, 1576,  771, 1585,  772,  772,  772,  772,
     1759, 1593,  232, 1605,  232,  232,  703, 1622,  773, 1631,
      704,  704,  704,  704,  268,  268,  268,  268, 1759,  704,
      704,  704,  704,  483, 1639,  483,  773, 1651,  775,  775,
      775,  775,  503,  503,  503,  503,  704,  704,  704,  704,
      704,  704,  747,  747,  747,  747,  747,  927,  747,  748,
      705,  747,  747,  747,  422,  492,  747,  706,  747,  779,
      779,  779,  779,  757,  749,  747,  757,  705,  747,  422,
      492,  706,  493,  758,  494,  494,  494,  494, 1099, 1100,
     1101,  747,  489,  747,  748,  747,  495,  782,  489,  782,

      705,  422,  783,  783,  783,  783,  531,  928,  929,  930,
      828,  828,  828,  828,  495,  807,  808,  809,  747,  747,
      747,  706,  747,  747,  750,  751,  752,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  705,  479,  767,  767,  767,  767,  479,
      479,  479,  479,  479,  481,  481,  481,  482,  481,  481,
      481,  481,  481,  481,  481,  481,  479,  479,  479,  479,
      479,  481,  481,  481,  481,  482,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  479,  479,  479,  479,  479,  479,  479,

      479,  479,  530,  308,  308,  308,  308,  422, 1531,  497,
     1530,  927,  801,  780,  780,  780,  780,  534,  249, 1529,
      497,  535, 1528,  785,  498,  781,  421,  802,  251,  249,
      421,  497,  249, 1527, 1526,  498,  421, 1525,  275,  251,
      249, 1524,  251,  781,  499,  793,  498,  801, 1523, 1522,
      251,  662,  662,  662,  249,  499,  663, 1521,  786,  664,
      554,  928,  929,  930,  251,  664,  499,  537,  538,  539,
      587,  587,  587,  587,  500,  501,  502,  803,  804,  805,
      794, 1111, 1112, 1113,  505,  500,  501,  502,  787,  788,
      789, 1033, 1035,  249, 1033, 1035,  500,  501,  502,  275,

      530, 1034, 1036,  251, 1520,  505, 1046, 1519,  814, 1046,
      795,  796,  797,  521,  249,  827, 1047,  249,  530,  506,
      275, 1518,  249,  554,  251, 1517,  521,  251,  275, 1516,
      670,  530,  251,  534,  647,  249,  670,  535,  823, 1512,
      506,  275,  977,  815,  641,  251,  827,  634,  522,  507,
      508,  509,  550, 1763,  550,  249, 1511,  551,  551,  551,
      551,  522, 1117, 1118, 1119,  842,  843,  844,  968,  496,
      507,  508,  509,  816,  817,  818,  691, 1510,  523,  524,
      525,  959,  691,  537,  538,  539, 1509,  496,  824,  825,
      826,  523,  524,  525,  530, 1508,  842,  843,  844, 1264,

     1266,  531, 1497,  532, 1496,  821,  821,  821,  821,  534,
      668,  668,  668,  535,  421,  669,  489,  536,  489,  845,
      421,  845,  489, 1258,  846,  846,  846,  846,  823, 1123,
     1124, 1125,  269, 1489,  849,  536,  850,  850,  850,  850,
      672,  672,  672,  672, 1488,  853, 1251,  853,  851, 1474,
      854,  854,  854,  854,  823,  905,  838,  839,  840,  537,
      538,  539,  497,  865,  866,  867,  851, 1473,  612,  269,
      906,  270, 1242,  527,  527,  527,  527,  498,  824,  825,
      826,  251, 1763,  931,  249,  528,  551,  551,  551,  551,
      905,  485,  485,  485,  485,  576,  823,  499,  496,  883,

      883,  883,  883,  528,  824,  825,  826,  886, 1072,  886,
      611, 1072,  887,  887,  887,  887,  496,  553, 1073,  701,
      907,  908,  909,  702,  702,  702,  249,  500,  501,  502,
      830, 1463,  554,  946,  947,  948,  251,  531,  945,  532,
     1462,  831,  831,  831,  831,  832,  824,  825,  826,  535,
     1461, 1228,  555,  833,  576, 1460,  577,  553,  578,  578,
      578,  578,  987,  941,  987,  822,  249,  988,  988,  988,
      579,  833,  554,  613, 1459,  676,  251,  932,  932,  932,
      932,  676,  556,  557,  558,  553,  933, 1458,  579,  676,
     1457,  832,  555,  676,  249,  834,  835,  836,  830,  676,

      554, 1220,  999,  612,  251,  531, 1452,  532,  999,  852,
      852,  852,  852,  832, 1197, 1198, 1199,  535,  931, 1451,
      555,  833,  556,  557,  558,  874,  687,  687,  687,  687,
      612, 1214, 1450,  822,  249,  911,  912,  913,  566,  833,
      498,  824,  825,  826,  251,  616,  926,  249, 1449,  617,
      556,  557,  558,  250, 1209, 1210, 1211,  251, 1448, 1208,
      875, 1000,  602,  834,  835,  836,  856, 1000,  946,  947,
      948, 1447,  990,  567,  566,  857,  990,  858,  858,  858,
      858,  859,  990,  249,  917,  860, 1215, 1216, 1217,  250,
      876,  877,  878,  251,  990,  619,  620,  621,  594,  581,

      990,  499,  581,  568,  569,  570, 1282, 1446,  297,  567,
      910,  297, 1282, 1033,  582, 1445, 1033,  582,  299,  904,
      373,  299,  677, 1034,  678,  678,  678,  678, 1221, 1222,
     1223,  861,  862,  863,  583, 1005, 1444,  583, 1005,  568,
      569,  570,  874,  373, 1005,  677, 1443,  995,  995,  995,
      995,  249,  927,  881,  881,  881,  881,  498,  942,  943,
      944,  251, 1196,  588,  584,  585,  586,  584,  585,  586,
      889,  685,  685,  685,  685, 1442, 1283,  875,  581,  297,
      927,  897, 1283,  391,  896,  315, 1514,  297, 1035,  299,
      297, 1035, 1514,  582,  580, 1441,  636,  299, 1036,  888,

      299,  391,  928,  929,  930,  890, 1440,  876,  877,  878,
      612, 1439,  664,  583,  664, 1184,  898, 1046,  664,  589,
     1046,  884,  884,  884,  884,  616,  565, 1047,  297,  617,
      928,  929,  930,  885,  315,  891,  892,  893,  299,  687,
      687,  687,  687,  584,  585,  586,  899,  900,  901, 1436,
     1072,  885,  589, 1072,  590,  918, 1077, 1077, 1077, 1077,
     1073,  297, 1515,  603,  297,  873,  559,  315, 1515,  552,
      636,  299,  297, 1761,  299,  619,  620,  621,  315, 1761,
      603, 1435,  299,  864,  591,  592,  593,  590, 1434,  297,
      919,  774,  774,  774,  774,  315,  855, 1433,  604,  299,

      776, 1432,  777,  777,  777,  777,  632, 1763,  632,  297,
     1762,  633,  633,  633,  633,  604, 1762,  591,  592,  593,
      920,  921,  922,  580,  783,  783,  783,  783,  605,  606,
      607,  949, 1326,  949, 1166, 1326,  950,  950,  950,  950,
      927,  580, 1327,  936, 1168,  605,  606,  607,  612,  831,
      831,  831,  831, 1421, 1167,  613, 1420,  614, 1160,  925,
      925,  925,  925,  616,  969,  970,  971,  617,  309, 1168,
      953,  618,  954,  954,  954,  954,  887,  887,  887,  887,
      483, 1763,  483, 1763,  955,  775,  775,  775,  775,  618,
      928,  929,  930,  928,  929,  930,  988,  988,  988,  957,

     1340,  957,  955, 1340,  958,  958,  958,  958,  927, 1413,
     1341,  801, 1412,  619,  620,  621,  581,  200, 1153, 1169,
     1170, 1171, 1265,  309, 1398,  310,  802,  609,  609,  609,
      609,  582,  988,  988,  988,  299, 1763, 1266,  297,  610,
      633,  633,  633,  633, 1763, 1033,  801, 1763, 1033, 1329,
      200,  583,  580, 1397, 1763, 1034, 1144,  610,  928,  929,
      930,  529, 1075, 1075, 1075, 1075,  200,  423,  424,  425,
      580,  635, 1387,  841, 1076, 1386,  803,  804,  805, 1310,
      297,  584,  585,  586,  934, 1385,  636, 1267, 1268, 1269,
      299,  613, 1076,  614, 1130,  935,  935,  935,  935,  936,

      423,  424,  425,  617, 1384,  200,  637,  937,  409,  837,
     1001,  635, 1002, 1002, 1002, 1002,  423,  424,  425,  926,
      297, 1099, 1100, 1101,  773,  937,  636, 1763, 1383,  474,
      299,  770,  770,  770,  770,  829,  638,  639,  640,  635,
     1382, 1381,  773, 1309, 1122, 1376,  637, 1375,  297,  938,
      939,  940,  934, 1116,  636,  423,  424,  425,  299,  613,
     1374,  614,  822,  956,  956,  956,  956,  936, 1111, 1112,
     1113,  617, 1373, 1372,  637,  937,  638,  639,  640,  978,
     1763, 1035, 1110, 1763, 1035,  520, 1326,  926,  297, 1326,
     1763, 1036,  648,  937,  582,  801, 1327,  670,  299,  670,

     1371,  297,  200,  670,  638,  639,  640,  298,  813,  510,
      802,  299, 1370,  806,  979, 1369,  800,  938,  939,  940,
      960,  846,  846,  846,  846,  823, 1368,  649,  648,  961,
      801,  962,  962,  962,  962,  963,  701,  297, 1367,  964,
      993,  993,  993,  298,  980,  981,  982,  299,  935,  935,
      935,  935,  423,  424,  425,  583, 1098,  650,  651,  652,
      803,  804,  805,  649,  473,  504,  474, 1366,  475,  475,
      475,  475, 1117, 1118, 1119,  824,  825,  826, 1763,  792,
      477, 1763, 1123, 1124, 1125,  965,  966,  967, 1763, 1284,
     1284, 1284, 1284,  650,  651,  652,  978,  496,  477,  200,

     1365, 1285,  784, 1763, 1364,  297, 1763,  991,  991,  991,
      991,  582, 1363, 1763, 1086,  299,  706,  705, 1763, 1285,
      422, 1763,  706, 1037,  200, 1429, 1430, 1431, 1763,  705,
      422,  979, 1307, 1306, 1763, 1305,  373, 1763,  677,  200,
      995,  995,  995,  995, 1763, 1197, 1198, 1199, 1039,  423,
      424,  425, 1080, 1304, 1080,  200, 1303, 1081, 1081, 1081,
     1081,  980,  981,  982,  703, 1038, 1302, 1301,  994,  994,
      994,  994, 1300, 1299,  423,  424,  425,  994,  994,  994,
      994, 1298, 1549, 1763, 1297, 1549, 1763, 1041, 1296,  423,
      424,  425, 1550, 1763,  994,  994,  994,  994,  994,  994,

      704,  704,  704,  704,  200,  423,  424,  425, 1295,  704,
      704,  704,  704, 1763,  701,  200, 1763, 1294,  702,  702,
      702, 1293, 1763, 1763,  200, 1763,  704,  704,  704,  704,
      704,  704, 1763, 1292,  200, 1763, 1291, 1763, 1763, 1040,
     1763, 1763, 1290,  200, 1763, 1763, 1308, 1763, 1289, 1552,
     1046, 1763, 1552, 1046,  423,  424,  425, 1288,  200, 1553,
     1047, 1287,  200, 1330, 1042,  423,  424,  425, 1131, 1763,
     1043,  200, 1763, 1286,  423,  424,  425, 1763,  422, 1763,
     1763, 1279, 1546,  823,  423,  424,  425, 1763, 1044,  320,
      200, 1278,  647,  423,  424,  425, 1763, 1045,  200, 1763,

     1209, 1210, 1211, 1131, 1277, 1276, 1763,  977,  423,  424,
      425,  313,  423,  424,  425, 1763, 1275,  200, 1763,  641,
     1048,  423,  424,  425, 1763, 1763, 1763, 1274, 1049, 1082,
     1082, 1082, 1082, 1132, 1133, 1134,  200, 1215, 1216, 1217,
      423,  424,  425, 1221, 1222, 1223, 1050,  634,  423,  424,
      425, 1763, 1273, 1272, 1763, 1763,  968, 1271, 1763, 1270,
      959, 1763, 1236, 1763,  611, 1763, 1763,  423,  424,  425,
     1234, 1233,  200, 1763,  945, 1763,  200, 1227, 1763,  200,
     1081, 1081, 1081, 1081,  200, 1763,  423,  424,  425,  426,
      427,  428,  429,  430,  431,  432,  200,  433, 1226,  434,

      435,  436,  437,  438,  439,  440,  441,  442,  941, 1763,
     1060, 1051, 1061, 1137, 1137, 1137, 1137, 1311,  200, 1052,
     1225, 1224,  423,  424,  425,  829,  423,  424,  425,  423,
      424,  425,  933, 1213,  423,  424,  425,  474, 1212,  770,
      770,  770,  770,  829,  926, 1207,  423,  424,  425, 1053,
     1053, 1053, 1053, 1053,  602, 1053, 1054, 1206, 1053, 1053,
     1053, 1328, 1205, 1053, 1763, 1053,  917, 1763,  423,  424,
      425, 1055, 1053, 1763, 1763, 1053,  295, 1143, 1143, 1143,
     1143, 1505, 1506, 1507, 1763,  200, 1204, 1763, 1053,  829,
     1053, 1054, 1053,  473, 1763,  474,  594,  475,  475,  475,

      475, 1203, 1202, 1056,  910,  200, 1201,  829,  474,  477,
     1360, 1360, 1360, 1360, 1062, 1053, 1053, 1053, 1200, 1053,
     1053, 1057, 1058, 1059, 1141,  904, 1141,  477,  905, 1142,
     1142, 1142, 1142, 1070, 1195,  423,  424,  425, 1063, 1063,
     1063, 1063, 1063,  906, 1063, 1064,  588, 1063, 1063, 1063,
      200, 1194, 1063, 1193, 1063,  423,  424,  425,  896, 1192,
     1065, 1063, 1072,  905, 1063, 1072, 1763,  580, 1191, 1763,
     1190,  888, 1073,  200,  280, 1763, 1763, 1063, 1763, 1063,
     1064, 1063, 1180,  200, 1319, 1763, 1066,  200,  854,  854,
      854,  854,  823,  907,  908,  909,  200,  565, 1179, 1331,

      423,  424,  425, 1178, 1063, 1063, 1063,  873, 1063, 1063,
     1067, 1068, 1069, 1071, 1239,  273, 1239, 1177,  559, 1240,
     1240, 1240, 1240,  423,  424,  425, 1074, 1082, 1082, 1082,
     1082, 1176,  552,  423,  424,  425, 1175,  423,  424,  425,
     1174,  864,  824,  825,  826, 1173,  423,  424,  425,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479, 1172,  479, 1078, 1078, 1078,
     1078,  479,  479,  479,  479,  479,  481,  481,  481, 1079,
      481,  481,  481,  481,  481,  481,  481,  481,  479,  479,
      479,  479,  479,  481,  481,  481,  481, 1079,  481,  481,

      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  227,  855,  771,  905,  772,  772,
      772,  772,  492,  200, 1083, 1138, 1084, 1084, 1084, 1084,
      773,  529,  906, 1136,  853,  200,  853, 1135,  851,  854,
      854,  854,  854,  823, 1087, 1606, 1607, 1608,  773, 1338,
      841, 1763,  905,  249, 1763, 1763,  851,  830, 1763,  554,
     1129, 1763,  200,  251,  531, 1763,  532, 1128,  831,  831,
      831,  831,  832,  423,  424,  425,  535,  837, 1127, 1088,
      833, 1126,  907,  908,  909,  423,  424,  425,  530, 1429,

     1430, 1431,  822,  824,  825,  826, 1547,  532,  833, 1085,
     1085, 1085, 1085,  534,  829, 1115,  785,  535,  200, 1089,
     1090, 1091,  423,  424,  425,  249, 1114,  785, 1652, 1653,
     1654,  275,  834,  835,  836,  251,  249,  822,  793, 1109,
     1339,  793,  275,  520, 1108, 1555,  251,  249, 1555, 1107,
      249,  786,  793,  554,  813, 1556,  554,  251,  247, 1106,
      251,  249,  786,  537,  538,  539,  510,  554,  423,  424,
      425,  251, 1105,  794,  200, 1763,  794, 1104, 1763,  806,
      814,  787,  788,  789, 1103, 1763, 1102,  794, 1763,  249,
      800, 1763,  787,  788,  789,  554, 1229, 1097, 1763,  251,

      504,  814, 1096,  795,  796,  797,  795,  796,  797, 1095,
      249,  927,  792,  814, 1342,  815,  554,  795,  796,  797,
      251, 1094,  249,  496,  423,  424,  425, 1093,  554, 1092,
     1763, 1229,  251, 1763, 1557, 1548,  815,  269,  784,  849,
     1763,  850,  850,  850,  850,  816,  817,  818,  815,  845,
      233,  845,  199,  851,  846,  846,  846,  846,  823,  706,
      705, 1230, 1231, 1232,  422, 1032,  816,  817,  818, 1763,
     1031,  851, 1030, 1235, 1235, 1235, 1235, 1029,  816,  817,
      818,  830, 1028, 1551, 1027,  933, 1026, 1025,  531, 1024,
      532, 1023,  852,  852,  852,  852,  832, 1505, 1506, 1507,

      535, 1022, 1021,  933,  833, 1606, 1607, 1608,  824,  825,
      826, 1142, 1142, 1142, 1142, 1145,  822, 1018,  497, 1652,
     1653, 1654,  833, 1017,  249, 1340, 1014,  249, 1340, 1763,
     1146, 1013, 1763, 1151,  251, 1341, 1763,  251, 1763, 1763,
     1152, 1152, 1152, 1152,  200, 1012,  834,  835,  836,  530,
     1147, 1009,  529,  499, 1008, 1007,  531,  200,  532, 1006,
     1120, 1120, 1120, 1120,  534,  422, 1349,  703,  535, 1763,
      529,  576, 1121, 1181,  998, 1182, 1182, 1182, 1182,  997,
     1148, 1149, 1150,  500,  501,  502,  996,  955,  354, 1350,
     1121,  669,  341,  663,  423,  424,  425, 1240, 1240, 1240,

     1240, 1763,  327, 1538, 1763,  955, 1538,  423,  424,  425,
      992, 1763,  320, 1539,  537,  538,  539,  479,  479,  479,
      479,  479,  541,  479,  542,  541,  479,  479,  479,  541,
      541,  479,  541,  984,  479, 1139, 1139, 1139, 1139,  544,
      479,  541,  541,  545,  541,  541,  541, 1140,  541,  541,
      541,  541,  541,  541,  541,  541,  479,  541,  479,  479,
      479,  541,  541,  541,  541, 1140,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  479,  479,  479,  541,  479,  479,  547,
      548,  549, 1154, 1567, 1567, 1567, 1567,  983,  647, 1161,

      976,  857, 1131, 1155, 1155, 1155, 1155, 1156,  249,  313,
      874,  860,  975,  874,  275,  974,  641,  823,  251,  249,
      973,  874,  249, 1763,  972,  498, 1763, 1147,  498,  251,
      249,  200,  251, 1763, 1162,  634,  498, 1131,  952, 1326,
      251,  951, 1326,  611,  931,  875,  952,  951,  875, 1327,
      611,  950,  950,  950,  950,  927,  875, 1157, 1158, 1159,
      200,  931,  924, 1357, 1163, 1164, 1165, 1132, 1133, 1134,
     1560,  923,  602,  916,  295,  876,  877,  878,  876,  877,
      878,  423,  424,  425,  915,  914,  876,  877,  878,  874,
      958,  958,  958,  958,  927,  594,  596,  903,  249,  902,

      881,  881,  881,  881,  498,  928,  929,  930,  251,  588,
      423,  424,  425,  895,  957, 1549,  957,  612, 1549,  958,
      958,  958,  958,  927,  875, 1550,  614,  894, 1183, 1183,
     1183, 1183,  616,  309,  580,  953,  617,  954,  954,  954,
      954,  288,  882, 1185,  928,  929,  930,  280,  880,  955,
     1552,  879,  297, 1552,  876,  877,  878,  934,  636,  565,
     1553,  872,  299,  273,  613,  871,  614,  955,  935,  935,
      935,  935,  936,  928,  929,  930,  617,  870, 1186,  559,
      937,  889,  619,  620,  621,  869,  889,  868,  552,  848,
      297,  847,  926,  529, 1340,  297,  315, 1340,  937,  827,

      299,  315,  848, 1555, 1341,  299, 1555,  847, 1187, 1188,
     1189,  529,  827, 1556,  820,  200,  890,  819,  520,  897,
      812,  890,  938,  939,  940, 1358,  897, 1358,  297,  247,
     1359, 1359, 1359, 1359,  636,  297,  811,  810,  299,  510,
      897,  636,  512,  799,  798,  299,  891,  892,  893,  297,
      504,  891,  892,  893,  898,  636,  791,  790,  496,  299,
     1763,  898,  918, 1763,  240,  423,  424,  425,  488,  766,
     1763,  297,  199, 1763,  200,  898, 1763,  636,  731,  918,
      730,  299,  727, 1763,  899,  900,  901,  726,  297,  723,
      720,  899,  900,  901,  636, 1131,  719,  919,  299,  718,

      918, 1538,  717,  713, 1538,  899,  900,  901,  709,  297,
      823, 1539,  706,  705,  919,  636, 1763,  422, 1554,  299,
     1241, 1241, 1241, 1241,  423,  424,  425,  920,  921,  922,
     1131,  690,  933, 1558,  949,  919,  949,  689,  688,  950,
      950,  950,  950,  927,  920,  921,  922,  653,  671,  354,
      933, 1080,  665, 1080, 1243,  341, 1360, 1360, 1360, 1360,
     1132, 1133, 1134,  297,  659,  920,  921,  922,  934, 1244,
      327,  658,  657,  299,  320,  613,  646,  614,  645,  956,
      956,  956,  956,  936,  313,  601,  600,  617,  295, 1245,
      574,  937,  288,  928,  929,  930,  581,  573, 1405, 1405,

     1405, 1405,  823,  926,  572,  297,  280, 1763,  257,  937,
     1763, 1249,  564,  563,  273,  299,  517, 1763,  516, 1246,
     1247, 1248, 1763,  200, 1763, 1423, 1250, 1250, 1250, 1250,
      247,  583,  490,  938,  939,  940,  612,  240,  611,  469,
     1424,  468,  199,  613,  200,  614,  176, 1218, 1218, 1218,
     1218,  616,  824,  825,  826,  617,  611,  398,  397, 1219,
     1423,  584,  585,  586,  409,  396, 1001, 1559, 1002, 1002,
     1002, 1002,  395,  423,  424,  425,  394, 1219,  386,  383,
      773, 1080, 1763, 1080, 1763,  379, 1360, 1360, 1360, 1360,
     1425, 1426, 1427,  376,  423,  424,  425,  361,  773,  356,

      355,  619,  620,  621,  479,  479,  479,  479,  479,  623,
      479,  624,  623,  479,  479,  479,  623,  623,  479,  623,
      354,  623, 1237, 1237, 1237, 1237,  626,  479,  623,  623,
      627,  623,  623,  623, 1238,  623,  623,  623,  623,  623,
      623,  623,  623,  479,  623,  479,  479,  479,  623,  623,
      623,  623, 1238,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      479,  479,  479,  623,  479,  479,  629,  630,  631, 1252,
      474,  357, 1359, 1359, 1359, 1359, 1259,  356,  961,  355,
     1253, 1253, 1253, 1253, 1254,  297,  354,  978,  964,  347,

      978,  315,  344, 1229,  343,  299,  297,  342,  978,  297,
     1549,  341,  582, 1549, 1245,  582,  299,  297,  927,  299,
     1550, 1260,  332,  582,  473,  329,  474,  299, 1075, 1075,
     1075, 1075,  979,  328,  327,  979,  304,  290, 1229, 1552,
     1076,  289, 1552,  979, 1255, 1256, 1257, 1555,  288, 1553,
     1555, 1261, 1262, 1263,  200,  267,  242, 1556, 1076,  241,
      240,  221,  980,  981,  982,  980,  981,  982, 1230, 1231,
     1232,  189,  176,  980,  981,  982,  978, 1481, 1481, 1481,
     1481,  927,  175, 1763,  170,  297,  170,  991,  991,  991,
      991,  582,  492, 1676, 1083,  299, 1084, 1084, 1084, 1084,

     1087, 1763,  200, 1087,  423,  424,  425, 1703,  851,  249,
     1703,  979,  249, 1703, 1763,  554, 1703, 1704,  554,  251,
     1763, 1087,  251, 1704, 1743, 1763,  851, 1743, 1763, 1763,
      249,  928,  929,  930, 1744, 1088,  554, 1763, 1088, 1763,
      251,  980,  981,  982,  703, 1683, 1763, 1763,  994,  994,
      994,  994,  423,  424,  425, 1763, 1088,  994,  994,  994,
      994, 1763, 1763, 1763,  200, 1089, 1090, 1091, 1089, 1090,
     1091, 1763, 1763, 1763,  994,  994,  994,  994,  994,  994,
     1280, 1280,  200, 1280, 1763, 1280, 1089, 1090, 1091, 1280,
     1280, 1280, 1763, 1280, 1763, 1763, 1137, 1137, 1137, 1137,

     1763, 1280, 1763, 1690, 1379, 1763, 1379, 1763,  829, 1380,
     1380, 1380, 1380,  823,  423,  424,  425, 1763, 1280, 1763,
     1280, 1280, 1388, 1763, 1388, 1763,  829, 1389, 1389, 1389,
     1389,  823,  423,  424,  425, 1763, 1763, 1763, 1229, 1143,
     1143, 1143, 1143, 1763, 1763, 1280, 1763, 1280, 1280, 1281,
     1281,  829, 1281,  927, 1281, 1763, 1763, 1145, 1281, 1281,
     1281,  200, 1281,  824,  825,  826,  249, 1763, 1763,  829,
     1281, 1499, 1146, 1229, 1743, 1763,  251, 1743, 1763, 1763,
     1763,  824,  825,  826, 1744, 1763, 1500, 1281, 1763, 1281,
     1281,  576, 1147, 1181, 1763, 1182, 1182, 1182, 1182, 1763,

     1763, 1763, 1763, 1230, 1231, 1232, 1499,  955, 1763, 1763,
     1763,  423,  424,  425, 1281, 1763, 1281, 1281,  704,  704,
      704,  704, 1148, 1149, 1150,  955, 1763,  704,  704,  704,
      704, 1380, 1380, 1380, 1380,  823, 1501, 1502, 1503, 1763,
     1763, 1763, 1763, 1763,  704,  704,  704,  704,  704,  704,
     1312, 1312, 1312, 1312, 1312, 1763, 1312, 1313, 1763, 1312,
     1312, 1312, 1763, 1763, 1312,  474, 1312, 1359, 1359, 1359,
     1359, 1763, 1314, 1312, 1763, 1763, 1312, 1763, 1235, 1235,
     1235, 1235, 1763, 1763, 1763,  824,  825,  826,  530, 1312,
      933, 1312, 1313, 1312,  200, 1145, 1763,  532, 1315, 1390,

     1390, 1390, 1390,  534,  249, 1763,  200,  535,  933, 1763,
     1146, 1763, 1763, 1763,  251, 1763, 1312, 1312, 1312, 1763,
     1312, 1312, 1316, 1317, 1318, 1320, 1320, 1320, 1320, 1320,
     1147, 1320, 1321, 1763, 1320, 1320, 1320, 1763, 1763, 1320,
     1763, 1320, 1763, 1763,  423,  424,  425, 1322, 1320, 1763,
     1763, 1320, 1763,  537,  538,  539,  423,  424,  425, 1763,
     1148, 1149, 1150, 1763, 1320, 1763, 1320, 1321, 1320, 1455,
     1392, 1455, 1763, 1763, 1456, 1456, 1456, 1456,  927,  249,
     1763,  200, 1763, 1763, 1763,  275, 1763, 1763, 1763,  251,
     1763, 1320, 1320, 1320,  200, 1320, 1320, 1323, 1324, 1325,

     1332, 1332, 1332, 1332, 1332, 1393, 1332, 1333, 1763, 1332,
     1332, 1332,  200, 1763, 1332, 1763, 1332, 1763, 1763, 1763,
     1763, 1763, 1334, 1332, 1763, 1763, 1332, 1763,  928,  929,
      930,  423,  424,  425, 1763, 1394, 1395, 1396, 1763, 1332,
     1763, 1332, 1333, 1332,  423,  424,  425, 1763, 1763, 1763,
     1763, 1763, 1464, 1763, 1464, 1763, 1763, 1465, 1465, 1465,
     1465,  927,  423,  424,  425, 1763, 1332, 1332, 1332, 1763,
     1332, 1332, 1335, 1336, 1337,  426,  427,  428,  429,  430,
      431,  432, 1763,  433, 1423,  434,  435,  436,  437,  438,
      439,  440,  441,  442, 1343, 1343, 1343, 1343, 1343, 1424,

     1343, 1344, 1763, 1343, 1343, 1343, 1763, 1763, 1343, 1763,
     1343,  928,  929,  930, 1763, 1763, 1345, 1343, 1763, 1423,
     1343, 1763, 1763, 1145, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763,  249, 1343, 1763, 1343, 1344, 1343, 1146, 1763,
     1763, 1763,  251, 1763, 1241, 1241, 1241, 1241, 1763, 1425,
     1426, 1427, 1763, 1763, 1763, 1763,  933, 1763, 1147, 1763,
     1343, 1343, 1343, 1763, 1343, 1343, 1346, 1347, 1348, 1351,
     1351, 1351, 1351, 1351,  933, 1351, 1352, 1763, 1351, 1351,
     1351, 1763, 1763, 1351, 1400, 1351, 1763, 1145, 1148, 1149,
     1150, 1353, 1351,  249, 1763, 1351,  249, 1763, 1763,  275,

     1763, 1763, 1146,  251, 1763, 1763,  251, 1763, 1351, 1763,
     1351, 1352, 1351, 1760, 1760, 1760, 1763, 1763, 1763, 1401,
     1763, 1763, 1147, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1423, 1760, 1760, 1760, 1760, 1351, 1351, 1351, 1763, 1351,
     1351, 1354, 1355, 1356,  530, 1424, 1763, 1763, 1763, 1402,
     1403, 1404, 1148, 1149, 1150, 1361, 1361, 1361, 1361,  534,
     1763, 1763, 1763,  535, 1763, 1423, 1763, 1362, 1145, 1763,
     1763, 1407, 1763, 1763, 1763, 1763, 1763,  249, 1763, 1415,
      249, 1763, 1763, 1156, 1763, 1362,  275,  251,  249, 1763,
      251, 1763, 1763, 1763,  554, 1425, 1426, 1427,  251, 1763,

     1763, 1763, 1763, 1147, 1763, 1763, 1408, 1763, 1763,  537,
      538,  539,  830, 1763, 1416, 1763, 1763, 1499, 1763, 1763,
     1763,  532, 1763, 1143, 1143, 1143, 1143,  832, 1763, 1763,
     1763,  535, 1500, 1148, 1149, 1150, 1409, 1410, 1411, 1161,
     1703, 1763, 1763, 1703, 1417, 1418, 1419,  822,  249, 1763,
     1704, 1161, 1499, 1763,  275, 1763, 1763, 1763,  251, 1763,
      249,  200, 1763, 1763, 1763, 1763,  275, 1763, 1763, 1763,
      251, 1763, 1763, 1763, 1162, 1763, 1763,  834,  835,  836,
      830, 1763, 1501, 1502, 1503, 1763, 1162,  531, 1763,  532,
     1763, 1377, 1377, 1377, 1377,  832, 1763, 1763, 1763,  535,

     1763, 1763, 1763, 1378, 1163, 1164, 1165, 1763, 1763, 1763,
     1763,  423,  424,  425, 1185,  822, 1163, 1164, 1165, 1185,
     1763, 1378, 1763,  297, 1763, 1763, 1763, 1763,  297,  636,
     1763, 1763, 1763,  299,  636,  473, 1763,  474,  299, 1075,
     1075, 1075, 1075, 1763, 1763,  834,  835,  836, 1154, 1186,
     1763, 1076, 1763, 1763, 1186, 1185, 1763,  857, 1763, 1155,
     1155, 1155, 1155, 1156,  297, 1763, 1763,  860, 1763, 1076,
      636, 1763, 1763, 1763,  299, 1572, 1572, 1572, 1572, 1187,
     1188, 1189,  612, 1147, 1187, 1188, 1189,  829, 1763, 1243,
     1186,  614, 1763, 1466, 1466, 1466, 1466,  616,  297, 1763,

     1763,  617, 1763, 1763, 1244,  829, 1763, 1763,  299, 1763,
     1763, 1763, 1763, 1157, 1158, 1159,  612, 1763, 1763, 1763,
     1187, 1188, 1189, 1243, 1245, 1763, 1763, 1437, 1437, 1437,
     1437,  616,  297, 1763, 1763,  617, 1763, 1763, 1244, 1438,
     1763, 1763,  299, 1763, 1468, 1763, 1763,  619,  620,  621,
     1763, 1243, 1763,  297, 1246, 1247, 1248, 1438, 1245,  315,
      297, 1763, 1763,  299, 1763, 1763, 1244, 1763, 1763, 1388,
      299, 1388, 1763, 1763, 1389, 1389, 1389, 1389,  823, 1469,
     1763,  619,  620,  621,  934, 1763, 1245, 1763, 1246, 1247,
     1248, 1763, 1763,  614, 1763, 1241, 1241, 1241, 1241,  936,

     1763, 1763, 1763,  617, 1763, 1763, 1763, 1763, 1763, 1470,
     1471, 1472, 1476, 1763, 1763, 1763, 1246, 1247, 1248,  926,
     1763,  297, 1763, 1243, 1763, 1763, 1763,  315,  824,  825,
      826,  299,  297, 1763, 1763, 1763, 1763, 1763, 1244, 1763,
     1763, 1763,  299, 1763, 1763, 1763, 1763, 1477, 1763,  938,
      939,  940,  934, 1389, 1389, 1389, 1389,  823, 1245,  613,
     1763,  614, 1763, 1453, 1453, 1453, 1453,  936, 1763, 1763,
     1763,  617, 1763, 1763, 1763, 1454, 1243, 1478, 1479, 1480,
     1763, 1763, 1763, 1763, 1763,  297, 1763,  926, 1246, 1247,
     1248, 1254, 1763, 1454, 1763,  299, 1763, 1763, 1763, 1763,

     1763, 1483, 1575, 1575, 1575, 1575, 1763,  824,  825,  826,
      297, 1245, 1763, 1763,  829, 1491,  315,  938,  939,  940,
      299, 1763, 1763, 1763,  297, 1763, 1763, 1763, 1763, 1763,
      636, 1763,  829, 1763,  299, 1763, 1484, 1763, 1763, 1763,
     1763, 1246, 1247, 1248, 1252, 1405, 1405, 1405, 1405,  823,
     1492, 1763, 1763,  961, 1763, 1253, 1253, 1253, 1253, 1254,
     1763, 1763, 1763,  964, 1763, 1763, 1485, 1486, 1487, 1259,
     1456, 1456, 1456, 1456,  927, 1763, 1763, 1259,  297, 1245,
     1493, 1494, 1495, 1763,  315, 1763,  297, 1763,  299, 1763,
     1763, 1763,  315, 1763, 1763, 1763,  299, 1763, 1763,  824,

      825,  826, 1763, 1763, 1260, 1763, 1763, 1763, 1763, 1255,
     1256, 1257, 1260, 1379, 1763, 1379, 1763, 1763, 1380, 1380,
     1380, 1380,  823, 1763,  928,  929,  930, 1575, 1575, 1575,
     1575, 1763, 1577, 1763, 1261, 1262, 1263, 1763, 1763,  829,
     1763,  249, 1261, 1262, 1263, 1513, 1513,  554, 1513, 1763,
     1513,  251, 1763, 1763, 1513, 1513, 1513,  829, 1513, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1513, 1578, 1763, 1763,
     1763, 1763,  824,  825,  826, 1763, 1763, 1465, 1465, 1465,
     1465,  927, 1763, 1513, 1763, 1513, 1513, 1464, 1763, 1464,
     1763, 1763, 1465, 1465, 1465, 1465,  927, 1579, 1580, 1581,

     1455, 1743, 1455, 1763, 1743, 1456, 1456, 1456, 1456,  927,
     1513, 1744, 1513, 1513, 1532, 1532, 1532, 1532, 1532, 1763,
     1532, 1533,  200, 1532, 1532, 1532, 1763, 1763, 1532, 1763,
     1532,  928,  929,  930, 1763, 1763, 1534, 1532, 1763, 1763,
     1532, 1763, 1763, 1392, 1763, 1763,  928,  929,  930, 1763,
     1763, 1763,  249, 1532, 1763, 1532, 1533, 1532,  275,  928,
      929,  930,  251, 1763, 1763, 1763, 1763, 1618, 1618, 1618,
     1618, 1763,  423,  424,  425, 1763, 1763, 1763, 1393,  933,
     1532, 1532, 1532, 1763, 1532, 1532, 1535, 1536, 1537, 1763,
     1538, 1763, 1763, 1538, 1763, 1763, 1763,  933, 1763, 1763,

     1539, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1394, 1395,
     1396,  200, 1763, 1763, 1763, 1763, 1392, 1621, 1621, 1621,
     1621, 1763, 1763, 1763, 1763,  249, 1763, 1763, 1763,  933,
     1763,  275, 1763, 1763, 1586,  251, 1763, 1763, 1763, 1763,
     1763, 1763, 1763,  249, 1763, 1763, 1763,  933, 1763,  554,
     1763, 1393, 1763,  251, 1763, 1763, 1763, 1763, 1763, 1763,
     1763,  423,  424,  425, 1540, 1540, 1540, 1540, 1540, 1587,
     1540, 1541, 1763, 1540, 1540, 1540, 1763, 1763, 1540, 1763,
     1540, 1394, 1395, 1396, 1763, 1763, 1542, 1540, 1763, 1763,
     1540, 1763, 1621, 1621, 1621, 1621, 1763, 1763, 1763, 1588,

     1589, 1590, 1763, 1540,  933, 1540, 1541, 1540, 1763, 1763,
     1763, 1499, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763,  933, 1763, 1763, 1763, 1500, 1763, 1763, 1763,
     1540, 1540, 1540, 1763, 1540, 1540, 1543, 1544, 1545,  426,
      427,  428,  429,  430,  431,  432, 1499,  433, 1763,  434,
      435,  436,  437,  438,  439,  440,  441,  442, 1561, 1561,
     1561, 1561, 1561, 1763, 1561, 1562, 1763, 1561, 1561, 1561,
     1400, 1763, 1561, 1763, 1561, 1763, 1501, 1502, 1503,  249,
     1563, 1561, 1763, 1763, 1561,  275, 1763, 1763, 1763,  251,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1561, 1763, 1561,

     1562, 1561, 1763, 1763, 1400, 1401, 1481, 1481, 1481, 1481,
      927, 1763, 1763,  249, 1763, 1763, 1763, 1763, 1763,  275,
     1763, 1763, 1763,  251, 1561, 1561, 1561, 1763, 1561, 1561,
     1564, 1565, 1566,  830, 1763, 1402, 1403, 1404, 1763, 1401,
      531, 1763,  532, 1763, 1377, 1377, 1377, 1377,  832, 1763,
     1763, 1763,  535, 1763, 1763, 1763, 1378, 1763, 1763, 1763,
      928,  929,  930, 1763, 1763, 1763, 1763, 1594,  822, 1402,
     1403, 1404, 1407, 1763, 1378, 1763,  249, 1763, 1763, 1763,
     1763,  249,  554, 1763, 1763, 1763,  251,  275, 1763, 1763,
     1763,  251, 1763, 1763, 1763, 1763, 1763, 1763,  834,  835,

      836,  830, 1595, 1763, 1763, 1763, 1763, 1408,  531, 1763,
      532, 1763, 1377, 1377, 1377, 1377,  832, 1763, 1763, 1763,
      535, 1763, 1763, 1763, 1378, 1763, 1407, 1763, 1763, 1763,
     1763, 1763, 1596, 1597, 1598,  249,  822, 1409, 1410, 1411,
     1415,  275, 1378, 1415, 1763,  251, 1763, 1763, 1763,  249,
     1763, 1763,  249, 1763, 1415,  554, 1763, 1763,  554,  251,
     1763, 1408,  251,  249, 1763, 1763,  834,  835,  836,  554,
     1763, 1763, 1763,  251, 1763, 1416, 1763, 1763, 1416, 1763,
     1763, 1623, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1416,
      297, 1409, 1410, 1411, 1763, 1763,  636, 1763, 1763, 1763,

      299, 1763, 1763, 1763, 1763, 1417, 1418, 1419, 1417, 1418,
     1419, 1763, 1763, 1763, 1763, 1763, 1624, 1763, 1763, 1417,
     1418, 1419,  934, 1763, 1763, 1763, 1763, 1763, 1763,  613,
     1763,  614, 1763, 1453, 1453, 1453, 1453,  936, 1763, 1763,
     1763,  617, 1763, 1763, 1763, 1454, 1625, 1626, 1627, 1468,
     1763, 1763, 1763, 1763, 1763, 1763, 1468,  926,  297, 1763,
     1763, 1632, 1763, 1454,  315,  297, 1763, 1763,  299, 1763,
      297,  315, 1763, 1763, 1763,  299,  636, 1763, 1763, 1763,
      299, 1763, 1763, 1763, 1469, 1763, 1763,  938,  939,  940,
      934, 1469, 1763, 1763, 1763, 1763, 1633,  613, 1763,  614,

     1763, 1453, 1453, 1453, 1453,  936, 1763, 1763, 1763,  617,
     1763, 1763, 1763, 1454, 1470, 1471, 1472, 1763, 1763, 1763,
     1763, 1470, 1471, 1472, 1476,  926, 1634, 1635, 1636, 1476,
     1763, 1454, 1640,  297, 1763, 1763, 1763, 1763,  297,  315,
     1763,  297, 1763,  299,  315, 1763, 1763,  636,  299, 1763,
     1763,  299, 1763, 1483, 1763,  938,  939,  940, 1763, 1477,
     1763, 1763,  297, 1763, 1477, 1483, 1763, 1641,  315, 1763,
     1763, 1763,  299, 1763,  297, 1763, 1763, 1763, 1763, 1763,
      315, 1763, 1763, 1763,  299, 1763, 1763, 1763, 1484, 1478,
     1479, 1480, 1491, 1763, 1478, 1479, 1480, 1642, 1643, 1644,

     1484,  297, 1763, 1763, 1763, 1763, 1491,  636, 1763, 1763,
     1763,  299, 1763, 1763, 1491,  297, 1763, 1763, 1485, 1486,
     1487,  636, 1763,  297, 1763,  299, 1763, 1492, 1763,  636,
     1485, 1486, 1487,  299, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1492, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1492,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1493, 1494, 1495,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1493, 1494, 1495, 1763, 1763, 1763, 1763, 1763, 1493,
     1494, 1495,  426,  427,  428,  429,  430,  431,  432, 1763,
      433, 1763,  434,  435,  436,  437,  438,  439,  440,  441,

      442, 1670, 1670, 1670, 1670, 1670, 1763, 1670, 1671, 1763,
     1670, 1670, 1670, 1763, 1763, 1670, 1763, 1670, 1763, 1763,
     1763, 1763, 1763, 1672, 1670, 1763, 1763, 1670, 1763, 1763,
     1577, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,  249,
     1670, 1763, 1670, 1671, 1670,  554, 1763, 1763, 1763,  251,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1578, 1763, 1670, 1670, 1670,
     1763, 1670, 1670, 1673, 1674, 1675, 1677, 1677, 1677, 1677,
     1677, 1763, 1677, 1678, 1763, 1677, 1677, 1677, 1763, 1763,
     1677, 1763, 1677, 1763, 1763, 1579, 1580, 1581, 1679, 1677,

     1763, 1763, 1677, 1763, 1763, 1577, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763,  249, 1677, 1763, 1677, 1678, 1677,
      554, 1763, 1763, 1763,  251, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1578, 1763, 1677, 1677, 1677, 1763, 1677, 1677, 1680, 1681,
     1682, 1684, 1684, 1684, 1684, 1684, 1763, 1684, 1685, 1763,
     1684, 1684, 1684, 1763, 1763, 1684, 1763, 1684, 1763, 1763,
     1579, 1580, 1581, 1686, 1684, 1763, 1763, 1684, 1763, 1763,
     1577, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,  249,
     1684, 1763, 1684, 1685, 1684,  554, 1763, 1763, 1763,  251,

     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1578, 1763, 1684, 1684, 1684,
     1763, 1684, 1684, 1687, 1688, 1689, 1691, 1691, 1691, 1691,
     1691, 1763, 1691, 1692, 1763, 1691, 1691, 1691, 1763, 1763,
     1691, 1763, 1691, 1763, 1763, 1579, 1580, 1581, 1693, 1691,
     1763, 1763, 1691, 1763, 1763, 1586, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763,  249, 1691, 1763, 1691, 1692, 1691,
      554, 1763, 1763, 1763,  251, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1587, 1763, 1691, 1691, 1691, 1763, 1691, 1691, 1694, 1695,

     1696, 1697, 1697, 1697, 1697, 1697, 1763, 1697, 1698, 1763,
     1697, 1697, 1697, 1763, 1763, 1697, 1586, 1697, 1763, 1763,
     1588, 1589, 1590, 1699, 1697,  249, 1763, 1697, 1763, 1763,
     1763,  554, 1763, 1763, 1763,  251, 1763, 1763, 1763, 1763,
     1697, 1763, 1697, 1698, 1697, 1763, 1763, 1763, 1763, 1763,
     1763, 1587, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1697, 1697, 1697,
     1763, 1697, 1697, 1700, 1701, 1702,  830, 1763, 1763, 1763,
     1763, 1588, 1589, 1590, 1586,  532, 1763, 1572, 1572, 1572,
     1572,  832, 1763,  249, 1763,  535, 1763, 1763, 1763,  554,

     1763, 1594, 1763,  251, 1763, 1763, 1763, 1763, 1763, 1763,
      249,  822, 1763, 1763, 1763, 1763,  554, 1763, 1763, 1587,
      251, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1595, 1763, 1763, 1763,
     1763,  834,  835,  836,  830, 1763, 1763, 1763, 1763, 1588,
     1589, 1590, 1763,  532, 1763, 1575, 1575, 1575, 1575,  832,
     1763, 1594, 1763,  535, 1763, 1763, 1596, 1597, 1598, 1594,
      249, 1763, 1763, 1763, 1763, 1763,  554, 1763,  249,  822,
      251, 1763, 1763, 1763,  554, 1763, 1763, 1763,  251, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1595, 1623, 1763, 1763,

     1763, 1763, 1763, 1763, 1595, 1763,  297, 1763, 1763,  834,
      835,  836,  636, 1763, 1763, 1763,  299, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1623, 1763, 1596, 1597, 1598, 1763,
     1763, 1763, 1624,  297, 1596, 1597, 1598,  934, 1763,  636,
     1763, 1763, 1763,  299, 1763, 1763,  614, 1763, 1618, 1618,
     1618, 1618,  936, 1763, 1763, 1763,  617, 1763, 1763, 1624,
     1623, 1763, 1625, 1626, 1627, 1632, 1763, 1763, 1763,  297,
     1763, 1763,  926, 1763,  297,  636, 1763, 1632, 1763,  299,
      636, 1763, 1763, 1763,  299, 1763,  297, 1763, 1763, 1625,
     1626, 1627,  636, 1763, 1763, 1624,  299, 1763, 1763, 1763,

     1633, 1763,  938,  939,  940,  934, 1763, 1763, 1763, 1763,
     1763, 1763, 1633, 1763,  614, 1763, 1621, 1621, 1621, 1621,
      936, 1763, 1763, 1763,  617, 1625, 1626, 1627, 1763, 1763,
     1634, 1635, 1636, 1763, 1763, 1763, 1763, 1763, 1632, 1763,
      926, 1640, 1634, 1635, 1636, 1763, 1640,  297, 1763, 1640,
      297, 1763, 1763,  636, 1763,  297,  636,  299,  297, 1763,
      299,  636, 1763, 1763,  636,  299, 1763, 1763,  299, 1763,
      938,  939,  940, 1633, 1763, 1763, 1641, 1763, 1763, 1763,
     1763, 1641, 1763, 1763, 1641, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,

     1763, 1763, 1763, 1634, 1635, 1636, 1642, 1643, 1644, 1763,
     1763, 1642, 1643, 1644, 1642, 1643, 1644, 1737, 1737, 1737,
     1737, 1737, 1763, 1737, 1738, 1763, 1737, 1737, 1737, 1763,
     1763, 1737, 1763, 1737, 1763, 1763, 1763, 1763, 1763, 1739,
     1737, 1763, 1763, 1737, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1737, 1763, 1737, 1738,
     1737, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1737, 1737, 1737, 1763, 1737, 1737, 1740,
     1741, 1742, 1745, 1745, 1745, 1745, 1745, 1763, 1745, 1746,

     1763, 1745, 1745, 1745, 1763, 1763, 1745, 1763, 1745, 1763,
     1763, 1763, 1763, 1763, 1747, 1745, 1763, 1763, 1745, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1745, 1763, 1745, 1746, 1745, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1745, 1745,
     1745, 1763, 1745, 1745, 1748, 1749, 1750,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   94,   94,   94,   94,   94,   94,   94,   94,   94,

       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,

      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  171,  171, 1763, 1763, 1763,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171, 1763,
      171,  171,  171,  171,  171,  230,  230, 1763,  230, 1763,
     1763, 1763,  230, 1763,  230,  230,  232,  232, 1763, 1763,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  247, 1763,  247, 1763, 1763,  247,

      247, 1763,  247, 1763,  247,  247, 1763,  247,  247,  247,
      247,  247,  247,  273, 1763,  273, 1763, 1763,  273,  273,
     1763,  273, 1763,  273,  273, 1763,  273,  273,  273,  273,
      273,  273,  280, 1763,  280, 1763, 1763,  280,  280, 1763,
     1763, 1763,  280,  280, 1763, 1763,  280, 1763,  280,  280,
      280,  295, 1763,  295, 1763, 1763,  295,  295, 1763,  295,
      295,  295,  295, 1763,  295,  295,  295,  295,  295,  295,
      313, 1763,  313, 1763, 1763,  313,  313, 1763,  313,  313,
      313,  313, 1763,  313,  313,  313,  313,  313,  313,  320,
     1763,  320, 1763, 1763,  320,  320, 1763, 1763,  320,  320,

      320, 1763, 1763,  320, 1763,  320,  320,  320,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  358, 1763, 1763, 1763,  358, 1763,  358,  358,
      366,  366,  366, 1763,  366,  366, 1763, 1763,  366, 1763,
     1763,  366,  366,  366,  366,  366,  384, 1763, 1763, 1763,
     1763,  384, 1763,  384,  384, 1763, 1763,  384, 1763,  384,
      384,  384, 1763,  384,  384,  384, 1763,  384,  384,  384,
      393,  393, 1763, 1763,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,

      393,  393,  393,  393,  399,  399, 1763,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  402,  402,
     1763,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  422, 1763,  422, 1763,
     1763,  422,  422, 1763, 1763,  422,  422,  422, 1763, 1763,
      422,  422,  422,  422,  422,  476,  476, 1763,  476, 1763,

     1763, 1763,  476, 1763,  476,  476,  232,  232, 1763, 1763,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      496, 1763,  496, 1763, 1763,  496,  496, 1763,  496, 1763,
      496,  496, 1763,  496,  496,  496,  496,  496,  496,  247,
     1763,  247, 1763, 1763,  247,  247, 1763,  247, 1763,  247,
      247, 1763,  247,  247,  247,  247,  247,  247,  504, 1763,
      504, 1763, 1763,  504,  504, 1763,  504, 1763,  504,  504,
     1763,  504,  504,  504,  504,  504,  504,  510, 1763,  510,
     1763, 1763,  510,  510, 1763, 1763, 1763,  510,  510, 1763,

     1763,  510, 1763,  510,  510,  510,  520, 1763,  520, 1763,
     1763,  520,  520, 1763,  520, 1763,  520,  520, 1763,  520,
      520,  520,  520,  520,  520,  529, 1763,  529, 1763, 1763,
      529,  529,  529,  529, 1763,  529,  529, 1763,  529,  529,
     1763,  529,  529,  529,  552, 1763,  552, 1763, 1763,  552,
      552, 1763,  552, 1763,  552,  552, 1763,  552,  552,  552,
      552,  552,  552,  273, 1763,  273, 1763, 1763,  273,  273,
     1763,  273, 1763,  273,  273, 1763,  273,  273,  273,  273,
      273,  273,  559, 1763,  559, 1763, 1763,  559,  559, 1763,
     1763, 1763,  559, 1763, 1763, 1763,  559,  559,  559,  559,

      559,  565, 1763,  565, 1763, 1763,  565,  565, 1763,  565,
     1763,  565,  565, 1763,  565,  565,  565,  565,  565,  565,
      580, 1763,  580, 1763, 1763,  580,  580, 1763,  580,  580,
      580,  580, 1763,  580,  580,  580,  580,  580,  580,  295,
     1763,  295, 1763, 1763,  295,  295, 1763,  295,  295,  295,
      295, 1763,  295,  295,  295,  295,  295,  295,  588, 1763,
      588, 1763, 1763,  588,  588, 1763,  588,  588,  588,  588,
     1763,  588,  588,  588,  588,  588,  588,  594, 1763,  594,
     1763, 1763,  594,  594, 1763, 1763,  594,  594,  594, 1763,
     1763,  594, 1763,  594,  594,  594,  602, 1763,  602, 1763,

     1763,  602,  602, 1763,  602,  602,  602,  602, 1763,  602,
      602,  602,  602,  602,  602,  611, 1763,  611, 1763, 1763,
      611,  611,  611,  611,  611,  611,  611, 1763,  611,  611,
     1763,  611,  611,  611,  634, 1763,  634, 1763, 1763,  634,
      634, 1763,  634,  634,  634,  634, 1763,  634,  634,  634,
      634,  634,  634,  313, 1763,  313, 1763, 1763,  313,  313,
     1763,  313,  313,  313,  313, 1763,  313,  313,  313,  313,
      313,  313,  641, 1763,  641, 1763, 1763,  641,  641, 1763,
     1763,  641,  641, 1763, 1763, 1763,  641,  641,  641,  641,
      641,  647, 1763,  647, 1763, 1763,  647,  647, 1763,  647,

      647,  647,  647, 1763,  647,  647,  647,  647,  647,  647,
      358, 1763, 1763, 1763,  358, 1763,  358,  358,  366, 1763,
     1763, 1763,  366, 1763,  366,  366,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479, 1763,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      230,  230, 1763,  230, 1763, 1763, 1763,  230, 1763,  230,
      230,  384, 1763, 1763, 1763, 1763,  384, 1763,  384,  384,
     1763, 1763,  384, 1763,  384,  384,  384, 1763,  384,  384,
      384, 1763,  384,  384,  384,  393,  393, 1763, 1763,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,

      393,  393,  393,  393,  393,  393,  393,  393,  393,  402,
      402, 1763,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  171,  171, 1763, 1763, 1763,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171, 1763,  171,  171,  171,  171,  171,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  476, 1763, 1763, 1763,  476, 1763,  476,  476,  700,
     1763, 1763,  700, 1763, 1763, 1763,  700, 1763,  700,  700,

      422, 1763,  422, 1763, 1763,  422,  422, 1763, 1763,  422,
      422,  422, 1763, 1763,  422,  422,  422,  422,  422,  778,
     1763,  778, 1763, 1763, 1763,  778, 1763,  778,  778,  529,
     1763,  529, 1763, 1763,  529,  529, 1763, 1763, 1763,  529,
      529, 1763,  529,  529, 1763,  529,  529,  529,  496, 1763,
      496, 1763, 1763,  496,  496, 1763,  496, 1763,  496,  496,
     1763,  496,  496,  496,  496,  496,  496,  784, 1763,  784,
     1763, 1763,  784,  784, 1763,  784, 1763,  784,  784, 1763,
      784,  784,  784,  784,  784,  784,  792, 1763,  792, 1763,
     1763,  792,  792, 1763,  792, 1763,  792,  792, 1763,  792,

      792,  792,  792,  792,  792,  504, 1763,  504, 1763, 1763,
      504,  504, 1763,  504, 1763,  504,  504, 1763,  504,  504,
      504,  504,  504,  504,  800, 1763,  800, 1763, 1763,  800,
      800, 1763, 1763, 1763,  800,  800, 1763, 1763,  800,  800,
      800,  800,  800,  806, 1763,  806, 1763, 1763,  806,  806,
     1763, 1763, 1763,  806, 1763, 1763, 1763,  806,  806,  806,
      806,  806,  813, 1763,  813, 1763, 1763,  813,  813, 1763,
      813, 1763,  813,  813, 1763,  813,  813,  813,  813,  813,
      813,  520, 1763,  520, 1763, 1763,  520,  520, 1763,  520,
     1763,  520,  520, 1763,  520,  520,  520,  520,  520,  520,

      822, 1763,  822, 1763, 1763,  822,  822, 1763, 1763, 1763,
      822,  822, 1763, 1763,  822,  822,  822,  822,  822,  829,
     1763,  829, 1763, 1763,  829,  829,  829,  829, 1763,  829,
      829, 1763,  829,  829,  829,  829,  829,  829,  837, 1763,
      837, 1763, 1763,  837,  837, 1763, 1763, 1763,  837, 1763,
     1763, 1763,  837,  837,  837,  837,  837,  841, 1763,  841,
     1763, 1763,  841,  841, 1763, 1763, 1763,  841,  841, 1763,
     1763,  841, 1763,  841,  841,  841,  855, 1763,  855, 1763,
     1763,  855,  855, 1763,  855, 1763,  855,  855, 1763,  855,
      855,  855,  855,  855,  855,  552, 1763,  552, 1763, 1763,

      552,  552, 1763,  552, 1763,  552,  552, 1763,  552,  552,
      552,  552,  552,  552,  864, 1763,  864, 1763, 1763,  864,
      864, 1763, 1763, 1763,  864, 1763, 1763, 1763,  864,  864,
      864,  864,  864,  559, 1763,  559, 1763, 1763,  559,  559,
     1763, 1763, 1763,  559, 1763, 1763, 1763,  559,  559,  559,
      559,  559,  873, 1763,  873, 1763, 1763,  873,  873, 1763,
      873, 1763,  873,  873, 1763,  873,  873,  873,  873,  873,
      873,  565, 1763,  565, 1763, 1763,  565,  565, 1763,  565,
     1763,  565,  565, 1763,  565,  565,  565,  565,  565,  565,
      611, 1763,  611, 1763, 1763,  611,  611, 1763, 1763,  611,

      611,  611, 1763,  611,  611, 1763,  611,  611,  611,  580,
     1763,  580, 1763, 1763,  580,  580, 1763,  580,  580,  580,
      580, 1763,  580,  580,  580,  580,  580,  580,  888, 1763,
      888, 1763, 1763,  888,  888, 1763,  888,  888,  888,  888,
     1763,  888,  888,  888,  888,  888,  888,  896, 1763,  896,
     1763, 1763,  896,  896, 1763,  896,  896,  896,  896, 1763,
      896,  896,  896,  896,  896,  896,  588, 1763,  588, 1763,
     1763,  588,  588, 1763,  588,  588,  588,  588, 1763,  588,
      588,  588,  588,  588,  588,  904, 1763,  904, 1763, 1763,
      904,  904, 1763, 1763,  904,  904,  904, 1763, 1763,  904,

      904,  904,  904,  904,  910, 1763,  910, 1763, 1763,  910,
      910, 1763, 1763,  910,  910, 1763, 1763, 1763,  910,  910,
      910,  910,  910,  917, 1763,  917, 1763, 1763,  917,  917,
     1763,  917,  917,  917,  917, 1763,  917,  917,  917,  917,
      917,  917,  602, 1763,  602, 1763, 1763,  602,  602, 1763,
      602,  602,  602,  602, 1763,  602,  602,  602,  602,  602,
      602,  926, 1763,  926, 1763, 1763,  926,  926, 1763, 1763,
      926,  926,  926, 1763, 1763,  926,  926,  926,  926,  926,
      933, 1763,  933, 1763, 1763,  933,  933,  933,  933,  933,
      933,  933, 1763,  933,  933,  933,  933,  933,  933,  941,

     1763,  941, 1763, 1763,  941,  941, 1763, 1763,  941,  941,
     1763, 1763, 1763,  941,  941,  941,  941,  941,  945, 1763,
      945, 1763, 1763,  945,  945, 1763, 1763,  945,  945,  945,
     1763, 1763,  945, 1763,  945,  945,  945,  959, 1763,  959,
     1763, 1763,  959,  959, 1763,  959,  959,  959,  959, 1763,
      959,  959,  959,  959,  959,  959,  634, 1763,  634, 1763,
     1763,  634,  634, 1763,  634,  634,  634,  634, 1763,  634,
      634,  634,  634,  634,  634,  968, 1763,  968, 1763, 1763,
      968,  968, 1763, 1763,  968,  968, 1763, 1763, 1763,  968,
      968,  968,  968,  968,  641, 1763,  641, 1763, 1763,  641,

      641, 1763, 1763,  641,  641, 1763, 1763, 1763,  641,  641,
      641,  641,  641,  977, 1763,  977, 1763, 1763,  977,  977,
     1763,  977,  977,  977,  977, 1763,  977,  977,  977,  977,
      977,  977,  647, 1763,  647, 1763, 1763,  647,  647, 1763,
      647,  647,  647,  647, 1763,  647,  647,  647,  647,  647,
      647,  700, 1763, 1763,  700, 1763, 1763, 1763,  700, 1763,
      700,  700,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479, 1763,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  384, 1763, 1763, 1763,
     1763,  384, 1763,  384,  384, 1763, 1763,  384, 1763,  384,

      384,  384, 1763,  384,  384,  384, 1763,  384,  384,  384,
      476,  476, 1763,  476, 1763, 1763, 1763,  476, 1763,  476,
      476,  747,  747,  747,  747,  747, 1763,  747,  747,  747,
      747, 1763, 1763,  747,  747, 1763, 1763,  747,  747,  747,
     1763,  747, 1763, 1763,  747,  422, 1763, 1763,  422,  422,
     1763,  422, 1763, 1763,  422,  422, 1763, 1763,  422,  422,
      422, 1763, 1763,  422,  422,  422,  422,  422,  778, 1763,
      778, 1763, 1763, 1763,  778, 1763,  778,  778,  829, 1763,
      829, 1763, 1763,  829,  829,  829,  829, 1763,  829,  829,
     1763,  829,  829,  829,  829,  829,  829,  822, 1763,  822,

     1763, 1763,  822,  822, 1763, 1763, 1763,  822,  822, 1763,
     1763,  822,  822,  822,  822,  822,  529, 1763,  529, 1763,
     1763,  529,  529, 1763,  529, 1763,  529,  529, 1763,  529,
      529, 1763,  529,  529,  529, 1086, 1763, 1086, 1763, 1763,
     1086, 1086, 1763, 1086, 1763, 1086, 1086, 1763, 1086, 1086,
     1086, 1086, 1086, 1086,  784, 1763,  784, 1763, 1763,  784,
      784, 1763,  784, 1763,  784,  784, 1763,  784,  784,  784,
      784,  784,  784,  792, 1763,  792, 1763, 1763,  792,  792,
     1763,  792, 1763,  792,  792, 1763,  792,  792,  792,  792,
      792,  792,  800, 1763,  800, 1763, 1763,  800,  800, 1763,

     1763, 1763,  800,  800, 1763, 1763,  800,  800,  800,  800,
      800, 1098, 1763, 1098, 1763, 1763, 1098, 1098, 1763, 1763,
     1763, 1098, 1763, 1763, 1763, 1098, 1098, 1098, 1098, 1098,
      806, 1763,  806, 1763, 1763,  806,  806, 1763, 1763, 1763,
      806, 1763, 1763, 1763,  806,  806,  806,  806,  806,  813,
     1763,  813, 1763, 1763,  813,  813, 1763,  813, 1763,  813,
      813, 1763,  813,  813,  813,  813,  813,  813, 1110, 1763,
     1110, 1763, 1763, 1110, 1110, 1763, 1763, 1763, 1110, 1763,
     1763, 1763, 1110, 1110, 1110, 1110, 1110, 1116, 1763, 1116,
     1763, 1763, 1116, 1116, 1763, 1763, 1763, 1116, 1763, 1763,

     1763, 1116, 1116, 1116, 1116, 1116, 1122, 1763, 1122, 1763,
     1763, 1122, 1122, 1763, 1763, 1763, 1122, 1763, 1763, 1763,
     1122, 1122, 1122, 1122, 1122,  837, 1763,  837, 1763, 1763,
      837,  837, 1763, 1763, 1763,  837, 1763, 1763, 1763,  837,
      837,  837,  837,  837, 1130, 1763, 1130, 1763, 1763, 1130,
     1130, 1763, 1763, 1763, 1130, 1130, 1763, 1763, 1130, 1130,
     1130, 1130, 1130, 1144, 1763, 1144, 1763, 1763, 1144, 1144,
     1763, 1144, 1763, 1144, 1144, 1763, 1144, 1144, 1144, 1144,
     1144, 1144,  496, 1763,  496, 1763, 1763,  496,  496, 1763,
      496, 1763,  496,  496, 1763,  496,  496,  496,  496,  496,

      496, 1153, 1763, 1153, 1763, 1763, 1153, 1153, 1763, 1153,
     1763, 1153, 1153, 1763, 1153, 1153, 1153, 1153, 1153, 1153,
     1160, 1763, 1160, 1763, 1763, 1160, 1160, 1763, 1160, 1763,
     1160, 1160, 1763, 1160, 1160, 1160, 1160, 1160, 1160, 1166,
     1763, 1166, 1763, 1763, 1166, 1166, 1763, 1763, 1763, 1166,
     1166, 1763, 1763, 1166, 1763, 1166, 1166, 1166,  864, 1763,
      864, 1763, 1763,  864,  864, 1763, 1763, 1763,  864, 1763,
     1763, 1763,  864,  864,  864,  864,  864,  873, 1763,  873,
     1763, 1763,  873,  873, 1763,  873, 1763,  873,  873, 1763,
      873,  873,  873,  873,  873,  873,  933, 1763,  933, 1763,

     1763,  933,  933,  933,  933,  933,  933,  933, 1763,  933,
      933,  933,  933,  933,  933,  926, 1763,  926, 1763, 1763,
      926,  926, 1763, 1763,  926,  926,  926, 1763, 1763,  926,
      926,  926,  926,  926,  611, 1763,  611, 1763, 1763,  611,
      611, 1763,  611,  611,  611,  611, 1763,  611,  611, 1763,
      611,  611,  611, 1184, 1763, 1184, 1763, 1763, 1184, 1184,
     1763, 1184, 1184, 1184, 1184, 1763, 1184, 1184, 1184, 1184,
     1184, 1184,  888, 1763,  888, 1763, 1763,  888,  888, 1763,
      888,  888,  888,  888, 1763,  888,  888,  888,  888,  888,
      888,  896, 1763,  896, 1763, 1763,  896,  896, 1763,  896,

      896,  896,  896, 1763,  896,  896,  896,  896,  896,  896,
      904, 1763,  904, 1763, 1763,  904,  904, 1763, 1763,  904,
      904,  904, 1763, 1763,  904,  904,  904,  904,  904, 1196,
     1763, 1196, 1763, 1763, 1196, 1196, 1763, 1763, 1196, 1196,
     1763, 1763, 1763, 1196, 1196, 1196, 1196, 1196,  910, 1763,
      910, 1763, 1763,  910,  910, 1763, 1763,  910,  910, 1763,
     1763, 1763,  910,  910,  910,  910,  910,  917, 1763,  917,
     1763, 1763,  917,  917, 1763,  917,  917,  917,  917, 1763,
      917,  917,  917,  917,  917,  917, 1208, 1763, 1208, 1763,
     1763, 1208, 1208, 1763, 1763, 1208, 1208, 1763, 1763, 1763,

     1208, 1208, 1208, 1208, 1208, 1214, 1763, 1214, 1763, 1763,
     1214, 1214, 1763, 1763, 1214, 1214, 1763, 1763, 1763, 1214,
     1214, 1214, 1214, 1214, 1220, 1763, 1220, 1763, 1763, 1220,
     1220, 1763, 1763, 1220, 1220, 1763, 1763, 1763, 1220, 1220,
     1220, 1220, 1220,  941, 1763,  941, 1763, 1763,  941,  941,
     1763, 1763,  941,  941, 1763, 1763, 1763,  941,  941,  941,
      941,  941, 1228, 1763, 1228, 1763, 1763, 1228, 1228, 1763,
     1763, 1228, 1228, 1228, 1763, 1763, 1228, 1228, 1228, 1228,
     1228, 1242, 1763, 1242, 1763, 1763, 1242, 1242, 1763, 1242,
     1242, 1242, 1242, 1763, 1242, 1242, 1242, 1242, 1242, 1242,

      580, 1763,  580, 1763, 1763,  580,  580, 1763,  580,  580,
      580,  580, 1763,  580,  580,  580,  580,  580,  580, 1251,
     1763, 1251, 1763, 1763, 1251, 1251, 1763, 1251, 1251, 1251,
     1251, 1763, 1251, 1251, 1251, 1251, 1251, 1251, 1258, 1763,
     1258, 1763, 1763, 1258, 1258, 1763, 1258, 1258, 1258, 1258,
     1763, 1258, 1258, 1258, 1258, 1258, 1258, 1264, 1763, 1264,
     1763, 1763, 1264, 1264, 1763, 1763, 1264, 1264, 1264, 1763,
     1763, 1264, 1763, 1264, 1264, 1264,  968, 1763,  968, 1763,
     1763,  968,  968, 1763, 1763,  968,  968, 1763, 1763, 1763,
      968,  968,  968,  968,  968,  977, 1763,  977, 1763, 1763,

      977,  977, 1763,  977,  977,  977,  977, 1763,  977,  977,
      977,  977,  977,  977,  700, 1763, 1763,  700, 1763, 1763,
     1763,  700, 1763,  700,  700,  384, 1763, 1763, 1763, 1763,
      384, 1763,  384,  384, 1763, 1763,  384, 1763,  384,  384,
      384, 1763,  384,  384,  384, 1763,  384,  384,  384,  476,
     1763, 1763, 1763,  476, 1763,  476,  476, 1053, 1053, 1053,
     1053, 1053, 1763, 1053, 1053, 1053, 1053, 1763, 1763, 1053,
     1053, 1763, 1763, 1053, 1053, 1053, 1763, 1053, 1763, 1053,
     1053, 1063, 1063, 1063, 1063, 1063, 1763, 1063, 1063, 1063,
     1063, 1763, 1763, 1063, 1063, 1763, 1763, 1063, 1063, 1063,

     1763, 1063, 1063, 1763, 1063,  422, 1763,  422, 1763, 1763,
      422,  422, 1763, 1763,  422,  422,  422, 1763, 1763,  422,
      422,  422,  422,  422,  529, 1763,  529, 1763, 1763,  529,
      529, 1763, 1763, 1763,  529,  529, 1763,  529,  529, 1763,
      529,  529,  529,  829, 1763,  829, 1763, 1763,  829,  829,
     1763,  829, 1763,  829,  829, 1763,  829,  829,  829,  829,
      829,  829, 1086, 1763, 1086, 1763, 1763, 1086, 1086, 1763,
     1086, 1763, 1086, 1086, 1763, 1086, 1086, 1086, 1086, 1086,
     1086, 1098, 1763, 1098, 1763, 1763, 1098, 1098, 1763, 1763,
     1763, 1098, 1763, 1763, 1763, 1098, 1098, 1098, 1098, 1098,

     1110, 1763, 1110, 1763, 1763, 1110, 1110, 1763, 1763, 1763,
     1110, 1763, 1763, 1763, 1110, 1110, 1110, 1110, 1110, 1116,
     1763, 1116, 1763, 1763, 1116, 1116, 1763, 1763, 1763, 1116,
     1763, 1763, 1763, 1116, 1116, 1116, 1116, 1116,  822, 1763,
      822, 1763, 1763,  822,  822, 1763, 1763, 1763,  822,  822,
     1763, 1763,  822,  822,  822,  822,  822, 1122, 1763, 1122,
     1763, 1763, 1122, 1122, 1763, 1763, 1763, 1122, 1763, 1763,
     1763, 1122, 1122, 1122, 1122, 1122, 1130, 1763, 1130, 1763,
     1763, 1130, 1130, 1763, 1763, 1763, 1130, 1130, 1763, 1763,
     1130, 1130, 1130, 1130, 1130, 1144, 1763, 1144, 1763, 1763,

     1144, 1144, 1763, 1144, 1763, 1144, 1144, 1763, 1144, 1144,
     1144, 1144, 1144, 1144, 1391, 1763, 1391, 1763, 1763, 1391,
     1391, 1763, 1391, 1763, 1391, 1391, 1763, 1391, 1391, 1391,
     1391, 1391, 1391, 1399, 1763, 1399, 1763, 1763, 1399, 1399,
     1763, 1399, 1763, 1399, 1399, 1763, 1399, 1399, 1399, 1399,
     1399, 1399, 1153, 1763, 1153, 1763, 1763, 1153, 1153, 1763,
     1153, 1763, 1153, 1153, 1763, 1153, 1153, 1153, 1153, 1153,
     1153, 1406, 1763, 1406, 1763, 1763, 1406, 1406, 1763, 1406,
     1763, 1406, 1406, 1763, 1406, 1406, 1406, 1406, 1406, 1406,
     1414, 1763, 1414, 1763, 1763, 1414, 1414, 1763, 1414, 1763,

     1414, 1414, 1763, 1414, 1414, 1414, 1414, 1414, 1414, 1160,
     1763, 1160, 1763, 1763, 1160, 1160, 1763, 1160, 1763, 1160,
     1160, 1763, 1160, 1160, 1160, 1160, 1160, 1160, 1422, 1763,
     1422, 1763, 1763, 1422, 1422, 1763, 1763, 1763, 1422, 1422,
     1763, 1763, 1422, 1422, 1422, 1422, 1422, 1428, 1763, 1428,
     1763, 1763, 1428, 1428, 1763, 1763, 1763, 1428, 1763, 1763,
     1763, 1428, 1428, 1428, 1428, 1428,  611, 1763,  611, 1763,
     1763,  611,  611, 1763, 1763,  611,  611,  611, 1763,  611,
      611, 1763,  611,  611,  611,  933, 1763,  933, 1763, 1763,
      933,  933, 1763,  933,  933,  933,  933, 1763,  933,  933,

      933,  933,  933,  933, 1184, 1763, 1184, 1763, 1763, 1184,
     1184, 1763, 1184, 1184, 1184, 1184, 1763, 1184, 1184, 1184,
     1184, 1184, 1184, 1196, 1763, 1196, 1763, 1763, 1196, 1196,
     1763, 1763, 1196, 1196, 1763, 1763, 1763, 1196, 1196, 1196,
     1196, 1196, 1208, 1763, 1208, 1763, 1763, 1208, 1208, 1763,
     1763, 1208, 1208, 1763, 1763, 1763, 1208, 1208, 1208, 1208,
     1208, 1214, 1763, 1214, 1763, 1763, 1214, 1214, 1763, 1763,
     1214, 1214, 1763, 1763, 1763, 1214, 1214, 1214, 1214, 1214,
      926, 1763,  926, 1763, 1763,  926,  926, 1763, 1763,  926,
      926,  926, 1763, 1763,  926,  926,  926,  926,  926, 1220,

     1763, 1220, 1763, 1763, 1220, 1220, 1763, 1763, 1220, 1220,
     1763, 1763, 1763, 1220, 1220, 1220, 1220, 1220, 1228, 1763,
     1228, 1763, 1763, 1228, 1228, 1763, 1763, 1228, 1228, 1228,
     1763, 1763, 1228, 1228, 1228, 1228, 1228, 1242, 1763, 1242,
     1763, 1763, 1242, 1242, 1763, 1242, 1242, 1242, 1242, 1763,
     1242, 1242, 1242, 1242, 1242, 1242, 1467, 1763, 1467, 1763,
     1763, 1467, 1467, 1763, 1467, 1467, 1467, 1467, 1763, 1467,
     1467, 1467, 1467, 1467, 1467, 1475, 1763, 1475, 1763, 1763,
     1475, 1475, 1763, 1475, 1475, 1475, 1475, 1763, 1475, 1475,
     1475, 1475, 1475, 1475, 1251, 1763, 1251, 1763, 1763, 1251,

     1251, 1763, 1251, 1251, 1251, 1251, 1763, 1251, 1251, 1251,
     1251, 1251, 1251, 1482, 1763, 1482, 1763, 1763, 1482, 1482,
     1763, 1482, 1482, 1482, 1482, 1763, 1482, 1482, 1482, 1482,
     1482, 1482, 1490, 1763, 1490, 1763, 1763, 1490, 1490, 1763,
     1490, 1490, 1490, 1490, 1763, 1490, 1490, 1490, 1490, 1490,
     1490, 1258, 1763, 1258, 1763, 1763, 1258, 1258, 1763, 1258,
     1258, 1258, 1258, 1763, 1258, 1258, 1258, 1258, 1258, 1258,
     1498, 1763, 1498, 1763, 1763, 1498, 1498, 1763, 1763, 1498,
     1498, 1498, 1763, 1763, 1498, 1498, 1498, 1498, 1498, 1504,
     1763, 1504, 1763, 1763, 1504, 1504, 1763, 1763, 1504, 1504,

     1763, 1763, 1763, 1504, 1504, 1504, 1504, 1504,  384,  384,
      384, 1763,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  476,  476, 1763,  476, 1763, 1763, 1763,  476,
     1763,  476,  476, 1312, 1312, 1312, 1312, 1312, 1763, 1312,
     1312, 1312, 1312, 1763, 1763, 1312, 1312, 1763, 1763, 1312,
     1312, 1312, 1763, 1312, 1312, 1763, 1312, 1320, 1320, 1320,
     1320, 1320, 1763, 1320, 1320, 1320, 1320, 1763, 1763, 1320,
     1320, 1763, 1763, 1320, 1320, 1320, 1763, 1320, 1763, 1763,
     1320, 1332, 1332, 1332, 1332, 1332, 1763, 1332, 1332, 1332,

     1332, 1763, 1763, 1332, 1332, 1763, 1763, 1332, 1332, 1332,
     1763, 1332, 1763, 1763, 1332, 1343, 1343, 1343, 1343, 1343,
     1763, 1343, 1343, 1343, 1343, 1763, 1763, 1343, 1343, 1763,
     1763, 1343, 1343, 1343, 1763, 1343, 1763, 1763, 1343, 1351,
     1351, 1351, 1351, 1351, 1763, 1351, 1351, 1351, 1351, 1763,
     1763, 1351, 1351, 1763, 1763, 1351, 1351, 1351, 1763, 1351,
     1763, 1763, 1351,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  829, 1763,  829,
     1763, 1763,  829,  829,  829,  829, 1763,  829,  829, 1763,

      829,  829,  829,  829,  829,  829,  822, 1763,  822, 1763,
     1763,  822,  822, 1763, 1763, 1763,  822,  822, 1763, 1763,
      822,  822,  822,  822,  822, 1576, 1763, 1576, 1763, 1763,
     1576, 1576, 1763, 1576, 1763, 1576, 1576, 1763, 1576, 1576,
     1576, 1576, 1576, 1576, 1391, 1763, 1391, 1763, 1763, 1391,
     1391, 1763, 1391, 1763, 1391, 1391, 1763, 1391, 1391, 1391,
     1391, 1391, 1391, 1585, 1763, 1585, 1763, 1763, 1585, 1585,
     1763, 1585, 1763, 1585, 1585, 1763, 1585, 1585, 1585, 1585,
     1585, 1585, 1399, 1763, 1399, 1763, 1763, 1399, 1399, 1763,
     1399, 1763, 1399, 1399, 1763, 1399, 1399, 1399, 1399, 1399,

     1399, 1593, 1763, 1593, 1763, 1763, 1593, 1593, 1763, 1593,
     1763, 1593, 1593, 1763, 1593, 1593, 1593, 1593, 1593, 1593,
     1406, 1763, 1406, 1763, 1763, 1406, 1406, 1763, 1406, 1763,
     1406, 1406, 1763, 1406, 1406, 1406, 1406, 1406, 1406, 1414,
     1763, 1414, 1763, 1763, 1414, 1414, 1763, 1414, 1763, 1414,
     1414, 1763, 1414, 1414, 1414, 1414, 1414, 1414, 1422, 1763,
     1422, 1763, 1763, 1422, 1422, 1763, 1763, 1763, 1422, 1422,
     1763, 1763, 1422, 1422, 1422, 1422, 1422, 1605, 1763, 1605,
     1763, 1763, 1605, 1605, 1763, 1763, 1763, 1605, 1763, 1763,
     1763, 1605, 1605, 1605, 1605, 1605, 1428, 1763, 1428, 1763,

     1763, 1428, 1428, 1763, 1763, 1763, 1428, 1763, 1763, 1763,
     1428, 1428, 1428, 1428, 1428,  933, 1763,  933, 1763, 1763,
      933,  933,  933,  933,  933,  933,  933, 1763,  933,  933,
      933,  933,  933,  933,  926, 1763,  926, 1763, 1763,  926,
      926, 1763, 1763,  926,  926,  926, 1763, 1763,  926,  926,
      926,  926,  926, 1622, 1763, 1622, 1763, 1763, 1622, 1622,
     1763, 1622, 1622, 1622, 1622, 1763, 1622, 1622, 1622, 1622,
     1622, 1622, 1467, 1763, 1467, 1763, 1763, 1467, 1467, 1763,
     1467, 1467, 1467, 1467, 1763, 1467, 1467, 1467, 1467, 1467,
     1467, 1631, 1763, 1631, 1763, 1763, 1631, 1631, 1763, 1631,

     1631, 1631, 1631, 1763, 1631, 1631, 1631, 1631, 1631, 1631,
     1475, 1763, 1475, 1763, 1763, 1475, 1475, 1763, 1475, 1475,
     1475, 1475, 1763, 1475, 1475, 1475, 1475, 1475, 1475, 1639,
     1763, 1639, 1763, 1763, 1639, 1639, 1763, 1639, 1639, 1639,
     1639, 1763, 1639, 1639, 1639, 1639, 1639, 1639, 1482, 1763,
     1482, 1763, 1763, 1482, 1482, 1763, 1482, 1482, 1482, 1482,
     1763, 1482, 1482, 1482, 1482, 1482, 1482, 1490, 1763, 1490,
     1763, 1763, 1490, 1490, 1763, 1490, 1490, 1490, 1490, 1763,
     1490, 1490, 1490, 1490, 1490, 1490, 1498, 1763, 1498, 1763,
     1763, 1498, 1498, 1763, 1763, 1498, 1498, 1498, 1763, 1763,

     1498, 1498, 1498, 1498, 1498, 1651, 1763, 1651, 1763, 1763,
     1651, 1651, 1763, 1763, 1651, 1651, 1763, 1763, 1763, 1651,
     1651, 1651, 1651, 1651, 1504, 1763, 1504, 1763, 1763, 1504,
     1504, 1763, 1763, 1504, 1504, 1763, 1763, 1763, 1504, 1504,
     1504, 1504, 1504, 1532, 1532, 1532, 1532, 1532, 1763, 1532,
     1532, 1532, 1532, 1763, 1763, 1532, 1532, 1763, 1763, 1532,
     1532, 1532, 1763, 1532, 1763, 1763, 1532, 1540, 1540, 1540,
     1540, 1540, 1763, 1540, 1540, 1540, 1540, 1763, 1763, 1540,
     1540, 1763, 1763, 1540, 1540, 1540, 1763, 1540, 1763, 1763,
     1540, 1561, 1561, 1561, 1561, 1561, 1763, 1561, 1561, 1561,

     1561, 1763, 1763, 1561, 1561, 1763, 1763, 1561, 1561, 1561,
     1763, 1561, 1763, 1763, 1561,  422, 1763,  422, 1763, 1763,
      422,  422, 1763, 1763,  422,  422,  422, 1763, 1763,  422,
      422,  422,  422,  422,  476, 1763,  476, 1763, 1763, 1763,
      476, 1763,  476,  476,  829, 1763,  829, 1763, 1763,  829,
      829, 1763,  829, 1763,  829,  829, 1763,  829,  829,  829,
      829,  829,  829, 1576, 1763, 1576, 1763, 1763, 1576, 1576,
     1763, 1576, 1763, 1576, 1576, 1763, 1576, 1576, 1576, 1576,
     1576, 1576, 1585, 1763, 1585, 1763, 1763, 1585, 1585, 1763,
     1585, 1763, 1585, 1585, 1763, 1585, 1585, 1585, 1585, 1585,

     1585, 1593, 1763, 1593, 1763, 1763, 1593, 1593, 1763, 1593,
     1763, 1593, 1593, 1763, 1593, 1593, 1593, 1593, 1593, 1593,
     1605, 1763, 1605, 1763, 1763, 1605, 1605, 1763, 1763, 1763,
     1605, 1763, 1763, 1763, 1605, 1605, 1605, 1605, 1605,  933,
     1763,  933, 1763, 1763,  933,  933, 1763,  933,  933,  933,
      933, 1763,  933,  933,  933,  933,  933,  933, 1622, 1763,
     1622, 1763, 1763, 1622, 1622, 1763, 1622, 1622, 1622, 1622,
     1763, 1622, 1622, 1622, 1622, 1622, 1622, 1631, 1763, 1631,
     1763, 1763, 1631, 1631, 1763, 1631, 1631, 1631, 1631, 1763,
     1631, 1631, 1631, 1631, 1631, 1631, 1639, 1763, 1639, 1763,

     1763, 1639, 1639, 1763, 1639, 1639, 1639, 1639, 1763, 1639,
     1639, 1639, 1639, 1639, 1639, 1670, 1670, 1670, 1670, 1670,
     1763, 1670, 1670, 1670, 1670, 1763, 1763, 1670, 1670, 1763,
     1763, 1670, 1670, 1670, 1763, 1670, 1763, 1763, 1670, 1677,
     1677, 1677, 1677, 1677, 1763, 1677, 1677, 1677, 1677, 1763,
     1763, 1677, 1677, 1763, 1763, 1677, 1677, 1677, 1763, 1677,
     1763, 1763, 1677, 1684, 1684, 1684, 1684, 1684, 1763, 1684,
     1684, 1684, 1684, 1763, 1763, 1684, 1684, 1763, 1763, 1684,
     1684, 1684, 1763, 1684, 1763, 1763, 1684, 1691, 1691, 1691,
     1691, 1691, 1763, 1691, 1691, 1691, 1691, 1763, 1763, 1691,

     1691, 1763, 1763, 1691, 1691, 1691, 1763, 1691, 1763, 1763,
     1691, 1697, 1697, 1697, 1697, 1697, 1763, 1697, 1697, 1697,
     1697, 1763, 1763, 1697, 1697, 1763, 1763, 1697, 1697, 1697,
     1763, 1697, 1763, 1763, 1697, 1737, 1737, 1737, 1737, 1737,
     1763, 1737, 1737, 1737, 1737, 1763, 1763, 1737, 1737, 1763,
     1763, 1737, 1737, 1737, 1763, 1737, 1763, 1763, 1737, 1745,
     1745, 1745, 1745, 1745, 1763, 1745, 1745, 1745, 1745, 1763,
     1763, 1745, 1745, 1763, 1763, 1745, 1745, 1745, 1763, 1745,
     1763, 1763, 1745,   33, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,

     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763
    } ;

static const flex_int16_t yy_chk[13560] =
    {   0,
        0,    0,    1,    1,    1,    2,    2,    2,   11,   11,
       12,   12,   38,   42,  145,   38,   42,  145,   38,   42,
       57,    0,   57,   38,   42,   44,    1,    0,   44,    2,
       73,   73,   73,   73,   38,   42,  401,   44,   52,   44,
       44,   52,   44,   44,   44,   44,   51,    0,   51,   51,
       51,   51,   77,   77,  401,   52,   52,   52,   52,  121,
      121,  121,   52,  138,  138,  197,   77,  197,   77,   77,
       77,   77,    1,    1,    1,    2,    2,    2,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    9,    9,    9,    9,   34,   34,   34,
        9,  440,    9,    9,    9,    9,  440,    9,    9,    9,
       39, 1348,   39,   39,   39, 1354,   40,    9,   40,   40,
       40,   41,  714,   41,   41,   41,  134,  134,  134,  134,
      714,    9,    9,    9,   95,  151,  108,   95,  151,  108,
     1355,   13,   13,   13,   13, 1356,   13,   14,   14,   14,
       14, 1363,   14,   21,   21,   21,   21,  139,   21,    9,
      139,    9,    9,    9,    9,    9,    9,   10,   10,   10,
       10,   90,   90,   95,   10,  108,   10,   10,   10,   10,
       13,   10,   10,   10,  191,   90,   14,   90,   90,   90,

       90,   10,   21,   54, 1364,   54,  139,   54,   54,   54,
       54,  143,  143,  184,  184,   10,   10,   10, 1365,   54,
       13,   13,   13,   13,   13, 1366,   14,   14,   14,   14,
       14,  191,   21,   21,   21,   21,   21,   54,  155,  155,
      155,  155,  230,   10,  230,   10,   10,   10,   10,   10,
       10,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   17,   17,   17,   17,
      135,  224, 1367,  135,  224,   22,   22,   22,   22, 1368,
       22,   29,   29,  331,  331,   29,   30,   30,  346,  346,
       30,   17,   67, 1369,  135,   67,  142,  142,  235,  334,
      132,  235,  334,  132,   67,   17,   67,   67,   17,   67,
       67,   67,   67,   82,   22,  132,   82,  378,  378,   29,
      142,  171,  171,  171,   30,   82,  349,   82,   82,  349,
       82,   82,   82,   82, 1370,   17,   17,   17,   17,   17,

       18,   18,   18,   18,   22,   22,   22,   22,   22,   29,
       29,   29,   29,   29,   30,   30,   30,   30,   30,  157,
      157,  157,  157,  404,  404,   18,   86,   48,  330,   86,
      136,  330,  136,   48,  136,  136,  136,  136,   48,   18,
       68,   86,   18,   86,   86,   86,   86,  406,  406,   68,
       86,  180,  180,  180,  172,   68,  172,  172,  172,   68,
      369,   48, 1371,  369,   48,  158,   48,  330,  435,   18,
       18,   18,   18,   18,   19,   68, 1372,   19,   48,  158,
       19,  435,   19,   19,  369,   48,   19,   19,   19,   19,
       19,   19,   19,   19,   19, 1373,   74,  158,   74,   19,

       74,   74,   74,   74, 1374,   68,   68,   68,  221,  221,
      221,  221,   74,   19,   75,   19,   23,   23,   23,   23,
       87, 1375,   87,   75,   87,   87,   87,   87, 1376,   75,
       74,   76,  199,   75,  416,  416,   87,   76,   83,   76,
     1381,   23,   76,   76,   76,   76,   76,   83,  173,   75,
      173,  173,  173,   83,   87,   23, 1382,   83,   23,   88,
      174,  417,  174,  174,  174,  417,  417,  181,   88,  181,
      181,  181, 1383,   83,   88,  275,  275,  275,   88,   75,
       75,   75,  199,  199,  199,   23,   23,   23,   23,   23,
       24,   24,   24,   24,   88, 1384,   76,   76,   76,  371,

      133,  371, 1385,   83,   83,   83,  133, 1386,   89,  236,
      236,  133,  236,  698,   89,   24,   89,  698,  698,   89,
       89,   89,   89,   89,   88,   88,   88,  204, 1387,   24,
      287,  287,   24,  287,  133,  710,  710,  133,  159,  133,
      159,  159,  159,  159, 1394,  182,  168,  182,  182,  182,
     1395,  133,  159,  204,  201,  985,  985,  168,  133,   24,
       24,   24,   24,   24,   25,   25,   25,   25,  335,  335,
      159,  335,   25,   89,   89,   89, 1396,  204,  204,  204,
      168,   25,   25,   25,   25,  168,  201, 1397,  201,  168,
       25,   25,   25,   25,  350,  350,  168,  350, 1398,  168,

      187,  168,  168,  187,  201,  201,  201,   25,   25,   25,
       25,   25,   25,   26,   26,   26,   26,  187,  187,  187,
      187,   26,  380,  177,  187,  380,  177,  986,  986,  177,
       26,   26,   26,   26,  177,  222,  222,  222,  222,   26,
       26,   26,   26, 1402,  183,  177,  202,  183, 1403,  186,
      183,  186,  186,  186,  186,  183,   26,   26,   26,   26,
       26,   26,   27,   27,   27,   27,  183,   27,   27,  216,
     1404,   27,   27,   27,  185,   27,   27,  185,  202,   27,
       27,   27,   27,   27,   27, 1409,  185,  345,  185,  185,
      345,  185,  185,  185,  185,  195,  202,  202,  202,  195,

       27,  195,   27,   27,  195,  195,  216, 1410, 1411,  188,
       27,  188,  208,  188,  188,  188,  188,   27, 1412,  216,
      216,  216,   27, 1413,  207,  188,  345,   27, 1417,   27,
       27,   28,   28,   28,   28, 1418,   28,   28,  206,  208,
       28,   28,   28,  188,   28,   28,  207, 1419,   28,   28,
       28,   28,   28,   28,  196,  426,  196,  426,  203,  196,
      196,  196,  208,  208,  208,  238,  238,  238,  206,   28,
      238,   28,   28,  362,  207,  207,  207,  227, 1420,   28,
      203,  227,  227,  227,  227,  362,   28,  203,  206,  206,
      206,   28,  362,  203,  381,  381,   28,  381,   28,   28,

       49, 1421,  382,   49,   49,  382, 1425,   49,  203,  203,
      203,   49,   49, 1426,   49,  214,   49,   49,   49,   49,
       49,   49,  385,   49,   49,  385,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,  655,   49,
      655,  214, 1427,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,  214,  214,  214,   49, 1429,
     1430,   49,   49,   49,   59,   59,   59,  223, 1431,  223,
     1432,  223,  223,  223,  223,  233,  233,  233,  233, 1433,
       59,   59,   59,  223,  211, 1434,  225, 1435,  225, 1436,

      225,  225,  225,  225, 1439, 1440,  205,  315,  315,  315,
      209,  223,  225,  338,  338,  338,   59,   59,  338, 1441,
       59,   59,  244, 1442,  244,  244,  244,  244,   59,  211,
      225,   59,  209,   59, 1443,   59,   59,   69,  205,  205,
      205,  212, 1444,   69,  211,  211,  211,  210,   69,   69,
       69,   69,   69,   69,   69, 1445,  205,  205,  205, 1446,
      209,  209,  209,   69,   69,   69,   69,   69,   69,  210,
      368,   69,  213,  368,   69, 1447,   69,  377,  212, 1448,
      377,  212,  210,  215,  407,  368,  217,  407,   69, 1449,
     1450,  212,  212,  212, 1451,   69,   71,  210,  210,  210,

      249,  249,  249,  249,  251,   71, 1452,   71,   71,   71,
       71,   71,  213,  215,  437,   71,  377,  437,  215,  251,
      217, 1457,  213,  213,  213,  245,  245,  245,  245, 1458,
     1459,   71,  245,  215,  215,  215,  217,  217,  217, 1460,
      229, 1461,  229, 1462,  229,  229,  229,  229,  265,  265,
      265,  265,  231,  231,  231,  231,  229,  231,  231,  231,
      231,   71,   71,   71,   85,  297,  297,  297,  297,  251,
      251,  251, 1463,   85,  229,   85,   85,   85,   85,   85,
      256,  486,  661,   85,  486,  661,  243,  660,  660,  243,
      660,  256,  256,  256,  256, 1470, 1471,  256,  243,   85,

      243,  243, 1472,  243,  243,  243,  243,  269,  359,  359,
      359,  269,  269,  269,  269,  292, 1473,  292,  292,  292,
      292,  305,  305,  305,  305,  364,  364,  364,  364,   85,
       85,   85,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,

      100,  100,  100,  100,  100,  100,  100,  112,  112,  112,
     1474,  112,  388,  246,  112,  246,  321,  246,  246,  246,
      246,  247, 1478,  112,  112,  112,  388,  299,  309,  246,
      247, 1479,  309,  309,  309,  309,  247, 1480,  667,  321,
      247,  667,  299,  682,  388,  112,  682,  246,  112,  112,
      112,  321,  428,  112,  112, 1485,  247, 1486,  321,  428,
      697,  112,  697,  697,  112,  428,  112, 1487,  112,  112,
      122,  122,  122,  122,  666,  666,  248,  666, 1488,  122,
      122,  122,  122, 1489, 1493,  248,  247,  247,  247, 1494,
     1495,  248,  299,  299,  299,  248,  122,  122,  122,  122,

      122,  122,  129,  717,  129,  129,  717, 1496,  129,  129,
      129,  248, 1497,  129,  129,  129,  129,  250,  352,  352,
      352,  129,  370,  352,  370, 1501,  250,  370,  370,  370,
      252, 1502,  250, 1503,  129, 1505,  250,  129, 1506,  252,
     1507,  248,  248,  248,  403,  252,  403,  403,  403,  252,
     1508, 1509,  250,  418,  418,  418,  291,  681,  681,  291,
      681,  129,  130,  130,  130,  252,  130, 1510,  291,  130,
      291,  291, 1511,  291,  291,  291,  291, 1512,  130,  130,
      130,  422,  250,  250,  250, 1515,  130,  365,  365,  365,
      365, 1519,  257, 1520,  699,  252,  252,  252,  699,  699,

      130,  257, 1521,  130,  130,  130, 1523,  257,  130,  130,
     1525,  257,  374,  374,  374,  374,  130, 1527, 1528,  130,
     1529,  130, 1530,  130,  130,  160, 1535,  257,  160, 1536,
      160,  422,  422,  422,  160,  160,  160,  372,  160,  372,
     1537,  372,  372,  372,  372, 1543,  160,  272,  272,  272,
      272, 1544,  272,  272,  272,  272,  419,  257,  257,  257,
      419,  419,  419,  160,  272,  160,  160,  294, 1545,  294,
     1564,  294,  294,  294,  294,  390,  390,  390,  390, 1565,
      373, 1566,  272,  294,  373,  373,  373,  373, 1568, 1569,
      160, 1570,  160,  160,  200,  200,  200,  200,  200,  200,

      200,  294,  200, 1571,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228, 1573,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  266,  430,
      430,  430, 1574,  443, 1579,  266, 1580,  266, 1581,  266,

      266,  266,  266,  266,  487,  487,  487,  266, 1582,  487,
      724,  266,  375,  724,  375,  273,  375,  375,  375,  375,
      724, 1583,  274,  266,  273,  443,  444,  276, 1003,  266,
      273,  274, 1003, 1003,  273, 1584,  276,  274,  512,  512,
      512,  274,  276,  443,  443,  443,  276,  387, 1588, 1589,
      273,  444, 1590,  266,  266,  266,  268,  274,  387,  387,
      387,  387,  276,  268,  387,  268, 1591,  268,  268,  268,
      268,  268,  534,  534,  534,  268,  444,  444,  444,  268,
      273,  273,  273,  293, 1592, 1596,  293,  274,  274,  274,
     1597, 1598,  276,  276,  276, 1599, 1600,  268,  293, 1601,

      293,  293,  293,  293,  391, 1602,  391,  293, 1603,  391,
      391,  391,  391,  409,  544,  544,  544,  409,  409,  409,
      409,  268,  268,  268,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
     1604,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  280,

      410,  410,  410,  410,  288, 1606,  445,  295,  280, 1607,
      447, 1608,  410,  288,  280,  653,  295,  653,  280,  288,
      653,  653,  295,  288, 1609, 1610,  295, 1611,  296,  775,
      410,  775,  775,  529,  280, 1612, 1613,  296, 1614,  288,
      298,  445,  295,  296, 1615,  447,  412,  296,  412,  298,
     1616,  412,  412,  412,  412,  298,  445,  445,  445,  298,
      447,  447,  447,  296,  280,  280,  280,  282, 1617,  288,
      288,  288,  295,  295,  295,  298,  282, 1619,  282,  282,
      282,  282,  282,  529,  529,  529,  282, 1620, 1625,  300,
      554,  554,  554,  296,  296,  296, 1626, 1627,  300, 1628,

      304, 1629,  282, 1630,  300,  298,  298,  298,  300,  304,
     1634,  459,  559,  559,  559,  304,  596,  596,  596,  304,
      470,  470,  470,  470,  300, 1635,  389, 1636,  389,  389,
      389,  389,  282,  282,  282,  304,  312,  312,  312,  312,
      389,  312,  312,  312,  312,  459,  392,  446,  392,  392,
      392,  392, 1637,  312,  300,  300,  300, 1638,  389, 1642,
      392,  459,  459,  459, 1643,  304,  304,  304,  306, 1644,
     1645,  312, 1646,  448, 1647,  306, 1648,  306,  392,  306,
      306,  306,  306,  306, 1649,  446,  446,  306,  449, 1650,
     1652,  306,  616,  616,  616,  313, 1653,  446,  446,  446,

     1654, 1655,  314,  306,  313,  448, 1656,  316, 1657,  306,
      313,  314, 1658,  454,  313,  449,  316,  314,  626,  626,
      626,  314,  316,  448,  448,  448,  316, 1659,  450, 1360,
      313, 1360, 1360,  306,  306,  306,  308,  314,  449,  449,
      449,  457,  316,  308, 1660,  308,  451,  308,  308,  308,
      308,  308,  454, 1662, 1664,  308, 1666, 1673,  450,  308,
      313,  313,  313,  454,  454,  454,  450,  314,  314,  314,
     1674, 1675,  316,  316,  316, 1680, 1681,  308,  450,  450,
      450,  473,  451, 1682,  457,  473,  473,  473,  473, 1687,
     1688,  457,  457,  457, 1689, 1694,  451,  451,  451, 1695,

     1696,  308,  308,  308,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
     1700,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  320,
     1701,  453, 1702, 1705,  327,  452, 1706, 1707,  320,  456,
      636,  636,  636,  327,  320,  641,  641,  641,  320,  327,

      411, 1708,  411,  327,  411,  411,  411,  411, 1709, 1710,
      452, 1711, 1712,  458,  320,  453,  411, 1713,  453,  327,
     1714,  463,  480,  480,  480,  480, 1715,  456, 1716,  461,
     1717,  453,  453,  453,  411,  452,  452,  452,  458,  456,
      456,  456,  464, 1718,  320,  320,  320,  322,  462,  327,
      327,  327,  465,  673,  673,  673,  322,  463,  322,  322,
      322,  322,  322,  458,  458,  458,  322,  460,  461, 1719,
      460,  463,  463,  463, 1720, 1721,  464,  460,  466,  461,
      461,  461,  322,  467, 1722,  465,  462, 1723,  460, 1724,
     1725,  674,  464,  464,  464,  674,  674,  674,  462,  462,

      462, 1726,  465,  465,  465,  483,  483,  483,  483,  692,
      692,  692,  322,  322,  322,  360,  360,  360,  360, 1727,
     1728,  466,  467, 1729,  360,  360,  360,  360,  466,  466,
      466, 1730, 1731,  467,  467,  467, 1732, 1740,  460,  460,
      460,  360,  360,  360,  360,  360,  360,  393,  541,  701,
      393, 1741,  393,  701,  701,  701,  393,  393,  393,  472,
      393,  472, 1742,  472,  472,  472,  472,  475,  393,  475,
     1748,  475,  475,  475,  475,  472,  484, 1749,  484,  484,
      484,  484, 1750,  475,  477,  393,  477,  393,  393,  477,
      477,  477,  477,  472,  485,  485,  485,  485,  541,  541,

      541,  475,  478, 1751,  478, 1752,  478,  478,  478,  478,
     1733, 1753,  393, 1754,  393,  393,  421, 1755,  478, 1756,
      421,  421,  421,  421,  491,  491,  491,  491, 1733,  421,
      421,  421,  421,  482, 1757,  482,  478, 1758,  482,  482,
      482,  482,  503,  503,  503,  503,  421,  421,  421,  421,
      421,  421,  455,  455,  455,  455,  455,  611,  455,  455,
     1347,  455,  455,  455, 1346,  492,  455, 1337,  455,  492,
      492,  492,  492,  757,  455,  455,  757, 1336,  455, 1335,
      494, 1325,  494,  757,  494,  494,  494,  494,  802,  802,
      802,  455, 1792,  455,  455,  455,  494,  495, 1792,  495,

     1324, 1323,  495,  495,  495,  495,  531,  611,  611,  611,
      531,  531,  531,  531,  494,  806,  806,  806,  455,  455,
      455, 1318,  455,  455,  455,  455,  455,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471, 1317,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,

      471,  471,  493,  575,  575,  575,  575, 1316, 1307,  496,
     1305,  623,  510,  493,  493,  493,  493,  493,  496, 1304,
      497,  493, 1302,  498,  496,  493, 1788,  510,  496,  497,
     1788,  499,  498, 1300, 1299,  497, 1788, 1297,  498,  497,
      499, 1296,  498,  493,  496,  504,  499,  510, 1295, 1294,
      499,  662,  662,  662,  504,  497,  662, 1291,  498, 1813,
      504,  623,  623,  623,  504, 1813,  499,  493,  493,  493,
      587,  587,  587,  587,  496,  496,  496,  510,  510,  510,
      504,  823,  823,  823,  505,  497,  497,  497,  498,  498,
      498, 1007, 1008,  505, 1007, 1008,  499,  499,  499,  505,

      535, 1007, 1008,  505, 1290,  506, 1018, 1289,  520, 1018,
      504,  504,  504,  521,  506,  535, 1018,  520,  532,  505,
      506, 1288,  521,  520,  506, 1287,  522,  520,  521, 1286,
     1814,  545,  521,  532, 1278,  522, 1814,  532,  822, 1277,
      506,  522, 1276,  520, 1275,  522,  545, 1274,  521,  505,
      505,  505,  528,  528,  528,  528, 1273,  528,  528,  528,
      528,  522,  827,  827,  827,  535,  535,  535, 1272,  528,
      506,  506,  506,  520,  520,  520, 1822, 1271,  521,  521,
      521, 1270, 1822,  532,  532,  532, 1269,  528,  822,  822,
      822,  522,  522,  522,  526, 1268,  545,  545,  545, 1267,

     1265,  526, 1263,  526, 1262,  526,  526,  526,  526,  526,
      668,  668,  668,  526, 1828,  668, 1831,  526, 1831,  536,
     1828,  536, 1831, 1261,  536,  536,  536,  536,  536,  832,
      832,  832,  540, 1257,  540,  526,  540,  540,  540,  540,
      672,  672,  672,  672, 1256,  546, 1255,  546,  540, 1248,
      546,  546,  546,  546,  546,  594,  837,  837,  837,  526,
      526,  526,  527,  864,  864,  864,  540, 1247,  617,  527,
      594,  527, 1246,  527,  527,  527,  527,  527,  536,  536,
      536,  527,  550,  617,  550,  527,  550,  550,  550,  550,
      594,  680,  680,  680,  680,  576,  829,  527,  550,  576,

      576,  576,  576,  527,  546,  546,  546,  579, 1031,  579,
     1236, 1031,  579,  579,  579,  579,  550,  552, 1031,  702,
      594,  594,  594,  702,  702,  702,  552,  527,  527,  527,
      533, 1234,  552,  617,  617,  617,  552,  533, 1233,  533,
     1232,  533,  533,  533,  533,  533,  829,  829,  829,  533,
     1231, 1230,  552,  533,  578, 1227,  578,  553,  578,  578,
      578,  578,  654, 1226,  654,  533,  553,  654,  654,  654,
      578,  533,  553,  613, 1225, 1874,  553,  613,  613,  613,
      613, 1874,  552,  552,  552,  555, 1224, 1223,  578, 1817,
     1222,  830,  553, 1817,  555,  533,  533,  533,  543, 1817,

      555, 1221, 1877,  627,  555,  543, 1217,  543, 1877,  543,
      543,  543,  543,  543,  906,  906,  906,  543,  627, 1216,
      555,  543,  553,  553,  553,  565,  686,  686,  686,  686,
      614, 1215, 1213,  543,  565,  910,  910,  910,  566,  543,
      565,  830,  830,  830,  565,  614, 1212,  566, 1211,  614,
      555,  555,  555,  566,  927,  927,  927,  566, 1210, 1209,
      565, 1878, 1207,  543,  543,  543,  551, 1878,  627,  627,
      627, 1206, 1870,  566,  567,  551, 1870,  551,  551,  551,
      551,  551, 1870,  567, 1205,  551,  931,  931,  931,  567,
      565,  565,  565,  567, 1928,  614,  614,  614, 1204,  580,

     1928,  551,  581,  566,  566,  566, 1931, 1203,  580,  567,
     1202,  581, 1931, 1033,  580, 1201, 1033,  581,  580, 1200,
      678,  581,  678, 1033,  678,  678,  678,  678,  936,  936,
      936,  551,  551,  551,  580, 1880, 1199,  581, 1880,  567,
      567,  567,  571,  679, 1880,  679, 1198,  679,  679,  679,
      679,  571,  926,  571,  571,  571,  571,  571,  941,  941,
      941,  571, 1197, 1195,  580,  580,  580,  581,  581,  581,
      582,  685,  685,  685,  685, 1194, 1932,  571,  583,  582,
      933,  588, 1932,  685, 1193,  582, 1974,  583, 1035,  582,
      588, 1035, 1974,  583, 1192, 1191,  588,  583, 1035, 1190,

      588,  685,  926,  926,  926,  582, 1189,  571,  571,  571,
      577, 1188, 1871,  583, 1871, 1187,  588, 1046, 1871,  589,
     1046,  577,  577,  577,  577,  577, 1180, 1046,  589,  577,
      933,  933,  933,  577,  589,  582,  582,  582,  589,  687,
      687,  687,  687,  583,  583,  583,  588,  588,  588, 1179,
     1072,  577,  590, 1072,  589,  602,  769,  769,  769,  769,
     1072,  590, 1975,  603,  602, 1178, 1177,  590, 1975, 1176,
      602,  590,  603, 2028,  602,  577,  577,  577,  603, 2028,
      604, 1175,  603, 1174,  589,  589,  589,  590, 1173,  604,
      602,  774,  774,  774,  774,  604, 1172, 1171,  603,  604,

      777, 1170,  777,  777,  777,  777,  610,  610,  610,  610,
     2029,  610,  610,  610,  610,  604, 2029,  590,  590,  590,
      602,  602,  602,  610,  782,  782,  782,  782,  603,  603,
      603,  618, 1293,  618, 1169, 1293,  618,  618,  618,  618,
      618,  610, 1293,  934, 1167,  604,  604,  604,  608,  831,
      831,  831,  831, 1165,  860,  608, 1164,  608, 1163,  608,
      608,  608,  608,  608,  968,  968,  968,  608,  622,  860,
      622,  608,  622,  622,  622,  622,  886,  886,  886,  886,
      696,  696,  696,  696,  622,  696,  696,  696,  696,  608,
      618,  618,  618,  934,  934,  934,  987,  987,  987,  628,

     1301,  628,  622, 1301,  628,  628,  628,  628,  628, 1159,
     1301,  800, 1158,  608,  608,  608,  609, 1048, 1157,  860,
      860,  860,  964,  609, 1150,  609,  800,  609,  609,  609,
      609,  609,  988,  988,  988,  609,  632,  964,  632,  609,
      632,  632,  632,  632, 1313,  732,  800, 1313,  732, 1048,
     1039,  609,  632, 1149, 1313,  732, 1148,  609,  628,  628,
      628, 1138,  768,  768,  768,  768,  732, 1048, 1048, 1048,
      632,  634, 1136, 1135,  768, 1134,  800,  800,  800, 1039,
      634,  609,  609,  609,  615, 1133,  634,  964,  964,  964,
      634,  615,  768,  615, 1132,  615,  615,  615,  615,  615,

     1039, 1039, 1039,  615, 1129, 1038,  634,  615,  694, 1128,
      694,  635,  694,  694,  694,  694,  732,  732,  732,  615,
      635, 1098, 1098, 1098,  694,  615,  635,  770, 1127,  770,
      635,  770,  770,  770,  770, 1126,  634,  634,  634,  637,
     1125, 1124,  694, 1038, 1123, 1119,  635, 1118,  637,  615,
      615,  615,  625, 1117,  637, 1038, 1038, 1038,  637,  625,
     1115,  625, 1114,  625,  625,  625,  625,  625, 1110, 1110,
     1110,  625, 1113, 1112,  637,  625,  635,  635,  635,  647,
     1321,  733, 1111, 1321,  733, 1109, 1326,  625,  647, 1326,
     1321,  733,  648,  625,  647,  801, 1326, 1872,  647, 1872,

     1108,  648,  733, 1872,  637,  637,  637,  648, 1107, 1106,
      801,  648, 1105, 1104,  647, 1103, 1102,  625,  625,  625,
      633,  845,  845,  845,  845,  845, 1101,  648,  649,  633,
      801,  633,  633,  633,  633,  633,  993,  649, 1100,  633,
      993,  993,  993,  649,  647,  647,  647,  649,  935,  935,
      935,  935,  733,  733,  733,  633, 1099,  648,  648,  648,
      801,  801,  801,  649,  695, 1097,  695, 1096,  695,  695,
      695,  695, 1116, 1116, 1116,  845,  845,  845,  734, 1095,
      695,  734, 1122, 1122, 1122,  633,  633,  633,  734, 1001,
     1001, 1001, 1001,  649,  649,  649,  656, 1094,  695,  734,

     1093, 1001, 1092,  736, 1091,  656,  736,  656,  656,  656,
      656,  656, 1090,  736, 1089,  656, 1069, 1068,  735, 1001,
     1067,  735, 1059,  734,  736, 1168, 1168, 1168,  735, 1058,
     1057,  656, 1032, 1030,  738, 1029,  995,  738,  995,  735,
      995,  995,  995,  995,  738, 1196, 1196, 1196,  736,  734,
      734,  734,  773, 1028,  773,  738, 1027,  773,  773,  773,
      773,  656,  656,  656,  676,  735, 1026, 1025,  676,  676,
      676,  676, 1024, 1023,  736,  736,  736,  676,  676,  676,
      676, 1022, 1328,  737, 1021, 1328,  737,  738, 1020,  735,
      735,  735, 1328,  737,  676,  676,  676,  676,  676,  676,

      704,  704,  704,  704,  737,  738,  738,  738, 1019,  704,
      704,  704,  704,  739, 1004, 1037,  739, 1017, 1004, 1004,
     1004, 1016,  740,  739, 1049,  740,  704,  704,  704,  704,
      704,  704,  740, 1015,  739, 1311, 1014,  742, 1311,  737,
      742,  741, 1013,  740,  741, 1311, 1037,  742, 1012, 1330,
      743,  741, 1330,  743,  737,  737,  737, 1011,  742, 1330,
      743, 1010,  741, 1049,  739, 1037, 1037, 1037,  841,  745,
      740,  743,  745, 1009, 1049, 1049, 1049,  744, 1006,  745,
      744,  996, 1311,  841,  739,  739,  739,  744,  741,  992,
      745,  984,  983,  740,  740,  740,  746,  742,  744,  746,

     1208, 1208, 1208,  841,  982,  981,  746,  980,  742,  742,
      742,  976,  741,  741,  741,  748,  975,  746,  748,  974,
      744,  743,  743,  743,  776,  748,  776,  973,  745,  776,
      776,  776,  776,  841,  841,  841,  748, 1214, 1214, 1214,
      745,  745,  745, 1220, 1220, 1220,  746,  972,  744,  744,
      744,  753,  971,  970,  753,  759,  969,  967,  759,  966,
      965,  753,  952,  756,  951,  759,  756,  746,  746,  746,
      948,  947,  753,  756,  946,  754,  759,  944,  754, 1040,
     1080, 1080, 1080, 1080,  756,  754,  748,  748,  748,  749,
      749,  749,  749,  749,  749,  749,  754,  749,  943,  749,

      749,  749,  749,  749,  749,  749,  749,  749,  942,  846,
      756,  753,  759,  846,  846,  846,  846, 1040, 1045,  754,
      940,  939,  753,  753,  753,  846,  759,  759,  759, 1040,
     1040, 1040,  938,  930,  756,  756,  756, 1077,  929, 1077,
     1077, 1077, 1077,  846,  928,  924,  754,  754,  754,  755,
      755,  755,  755,  755,  923,  755,  755,  922,  755,  755,
      755, 1045,  921,  755,  760,  755,  920,  760, 1045, 1045,
     1045,  755,  755,  854,  760,  755,  916,  854,  854,  854,
      854, 1266, 1266, 1266,  762,  760,  915,  762,  755,  854,
      755,  755,  755,  767,  762,  767,  914,  767,  767,  767,

      767,  913,  912,  755,  911,  762,  909,  854, 1081,  767,
     1081, 1081, 1081, 1081,  760,  755,  755,  755,  908,  755,
      755,  755,  755,  755,  851,  907,  851,  767,  904,  851,
      851,  851,  851,  762,  903,  760,  760,  760,  761,  761,
      761,  761,  761,  904,  761,  761,  902,  761,  761,  761,
     1042,  901,  761,  900,  761,  762,  762,  762,  899,  895,
      761,  761,  764,  904,  761,  764,  763,  894,  893,  763,
      892,  891,  764, 1050,  882,  765,  763,  761,  765,  761,
      761,  761,  880,  764, 1042,  765,  761,  763,  853,  853,
      853,  853,  853,  904,  904,  904,  765,  879,  878, 1050,

     1042, 1042, 1042,  877,  761,  761,  761,  876,  761,  761,
      761,  761,  761,  763,  955,  872,  955,  871,  870,  955,
      955,  955,  955, 1050, 1050, 1050,  765, 1082, 1082, 1082,
     1082,  869,  868,  764,  764,  764,  867,  763,  763,  763,
      866,  865,  853,  853,  853,  863,  765,  765,  765,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  862,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,

      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  772,  861,  772,  905,  772,  772,
      772,  772,  779, 1052,  779,  848,  779,  779,  779,  779,
      772,  847,  905,  844,  781, 1054,  781,  843,  779,  781,
      781,  781,  781,  781,  784, 1424, 1424, 1424,  772, 1052,
      842, 1315,  905,  784, 1315, 1333,  779,  780, 1333,  784,
      840, 1315, 1064,  784,  780, 1333,  780,  839,  780,  780,
      780,  780,  780, 1052, 1052, 1052,  780,  838,  836,  784,
      780,  835,  905,  905,  905, 1054, 1054, 1054,  783, 1428,

     1428, 1428,  780,  781,  781,  781, 1315,  783,  780,  783,
      783,  783,  783,  783,  834,  826,  785,  783, 1056,  784,
      784,  784, 1064, 1064, 1064,  785,  825,  786, 1500, 1500,
     1500,  785,  780,  780,  780,  785,  786,  824,  792,  820,
     1056,  793,  786,  819,  818, 1338,  786,  792, 1338,  817,
      793,  785,  794,  792,  816, 1338,  793,  792,  812,  811,
      793,  794,  786,  783,  783,  783,  810,  794, 1056, 1056,
     1056,  794,  809,  792, 1061, 1339,  793,  808, 1339,  807,
      813,  785,  785,  785,  805, 1339,  804,  794, 1319,  813,
      803, 1319,  786,  786,  786,  813,  945,  799, 1319,  813,

      798,  814,  797,  792,  792,  792,  793,  793,  793,  796,
      814,  945,  795,  815, 1061,  813,  814,  794,  794,  794,
      814,  791,  815,  790, 1061, 1061, 1061,  789,  815,  788,
     1329,  945,  815, 1329, 1339, 1319,  814,  850,  787,  850,
     1329,  850,  850,  850,  850,  813,  813,  813,  815,  833,
      778,  833,  766,  850,  833,  833,  833,  833,  833,  752,
      751,  945,  945,  945,  750,  731,  814,  814,  814,  950,
      730,  850,  729,  950,  950,  950,  950,  728,  815,  815,
      815,  821,  727, 1329,  726,  950,  725,  723,  821,  722,
      821,  721,  821,  821,  821,  821,  821, 1504, 1504, 1504,

      821,  720,  718,  950,  821, 1605, 1605, 1605,  833,  833,
      833, 1141, 1141, 1141, 1141,  855,  821,  716,  856, 1651,
     1651, 1651,  821,  715,  855, 1340,  713,  856, 1340, 1344,
      855,  712, 1344,  856,  855, 1340,  857,  856,  857, 1344,
      857,  857,  857,  857, 1066,  711,  821,  821,  821,  828,
      855,  709,  857,  856,  708,  707,  828, 1070,  828,  706,
      828,  828,  828,  828,  828,  705, 1066,  703,  828,  700,
      857,  883,  828,  883,  690,  883,  883,  883,  883,  689,
      855,  855,  855,  856,  856,  856,  688,  883,  671, 1070,
      828,  670,  665,  664, 1066, 1066, 1066, 1239, 1239, 1239,

     1239, 1352,  659, 1517, 1352,  883, 1517, 1070, 1070, 1070,
      658, 1352,  657, 1517,  828,  828,  828,  849,  849,  849,
      849,  849,  849,  849,  849,  849,  849,  849,  849,  849,
      849,  849,  849,  652,  849,  849,  849,  849,  849,  849,
      849,  849,  849,  849,  849,  849,  849,  849,  849,  849,
      849,  849,  849,  849,  849,  849,  849,  849,  849,  849,
      849,  849,  849,  849,  849,  849,  849,  849,  849,  849,
      849,  849,  849,  849,  849,  849,  849,  849,  849,  849,
      849,  849,  849,  849,  849,  849,  849,  849,  849,  849,
      849,  849,  858, 1358, 1358, 1358, 1358,  651,  650,  859,

      646,  858, 1130,  858,  858,  858,  858,  858,  859,  645,
      873,  858,  644,  874,  859,  643,  642, 1130,  859,  873,
      640,  875,  874, 1350,  639,  873, 1350,  858,  874,  873,
      875, 1074,  874, 1350,  859,  638,  875, 1130,  631, 1044,
      875,  630, 1044,  629,  624,  873,  621,  620,  874, 1044,
      619,  949,  949,  949,  949,  949,  875,  858,  858,  858,
     1044,  612,  607, 1074,  859,  859,  859, 1130, 1130, 1130,
     1350,  606,  605,  601,  600,  873,  873,  873,  874,  874,
      874, 1074, 1074, 1074,  599,  598,  875,  875,  875,  881,
      957,  957,  957,  957,  957,  597,  595,  593,  881,  592,

      881,  881,  881,  881,  881,  949,  949,  949,  881,  591,
     1044, 1044, 1044,  586,  885, 1522,  885,  887, 1522,  885,
      885,  885,  885,  885,  881, 1522,  887,  585,  887,  887,
      887,  887,  887,  954,  584,  954,  887,  954,  954,  954,
      954,  574,  573,  888,  957,  957,  957,  572,  570,  954,
     1524,  569,  888, 1524,  881,  881,  881,  884,  888,  568,
     1524,  564,  888,  563,  884,  562,  884,  954,  884,  884,
      884,  884,  884,  885,  885,  885,  884,  561,  888,  560,
      884,  889,  887,  887,  887,  558,  890,  557,  556,  549,
      889,  548,  884,  547, 1060,  890,  889, 1060,  884,  542,

      889,  890,  539, 1526, 1060,  890, 1526,  538,  888,  888,
      888,  537,  530, 1526,  525, 1060,  889,  524,  523,  896,
      517,  890,  884,  884,  884, 1076,  897, 1076,  896,  516,
     1076, 1076, 1076, 1076,  896,  897,  515,  514,  896,  513,
      898,  897,  511,  509,  508,  897,  889,  889,  889,  898,
      507,  890,  890,  890,  896,  898,  502,  501,  500,  898,
     1331,  897,  917, 1331,  490, 1060, 1060, 1060,  489,  469,
     1331,  917,  468, 1342, 1533,  898, 1342,  917,  442,  918,
      441,  917,  439, 1342,  896,  896,  896,  438,  918,  436,
      434,  897,  897,  897,  918, 1131,  433,  917,  918,  432,

      919, 1538,  431,  429, 1538,  898,  898,  898,  427,  919,
     1131, 1538,  425,  424,  918,  919,  958,  423, 1331,  919,
      958,  958,  958,  958, 1533, 1533, 1533,  917,  917,  917,
     1131,  396,  958, 1342,  937,  919,  937,  395,  394,  937,
      937,  937,  937,  937,  918,  918,  918,  376,  356,  355,
      958, 1079,  343, 1079,  959,  342, 1079, 1079, 1079, 1079,
     1131, 1131, 1131,  959,  329,  919,  919,  919,  925,  959,
      328,  326,  325,  959,  324,  925,  319,  925,  318,  925,
      925,  925,  925,  925,  317,  303,  302,  925,  301,  959,
      290,  925,  289,  937,  937,  937,  960,  286, 1152, 1152,

     1152, 1152, 1152,  925,  285,  960,  284, 1349,  281,  925,
     1349,  960,  279,  278,  277,  960,  255, 1349,  254,  959,
      959,  959,  961, 1541,  961, 1166,  961,  961,  961,  961,
      253,  960,  242,  925,  925,  925,  932,  241,  961,  220,
     1166,  219,  218,  932, 1562,  932,  176,  932,  932,  932,
      932,  932, 1152, 1152, 1152,  932,  961,  166,  164,  932,
     1166,  960,  960,  960, 1002,  163, 1002, 1349, 1002, 1002,
     1002, 1002,  162, 1541, 1541, 1541,  161,  932,  153,  147,
     1002, 1285, 1285, 1285, 1285,  141, 1285, 1285, 1285, 1285,
     1166, 1166, 1166,  137, 1562, 1562, 1562,  128, 1002,  126,

      125,  932,  932,  932,  953,  953,  953,  953,  953,  953,
      953,  953,  953,  953,  953,  953,  953,  953,  953,  953,
      124,  953,  953,  953,  953,  953,  953,  953,  953,  953,
      953,  953,  953,  953,  953,  953,  953,  953,  953,  953,
      953,  953,  953,  953,  953,  953,  953,  953,  953,  953,
      953,  953,  953,  953,  953,  953,  953,  953,  953,  953,
      953,  953,  953,  953,  953,  953,  953,  953,  953,  953,
      953,  953,  953,  953,  953,  953,  953,  953,  953,  962,
     1567,  119, 1567, 1567, 1567, 1567,  963,  116,  962,  115,
      962,  962,  962,  962,  962,  963,  114,  977,  962,  110,

      978,  963,  106, 1228,  104,  963,  977,  103,  979,  978,
     1549,  102,  977, 1549,  962,  978,  977,  979, 1228,  978,
     1549,  963,   97,  979, 1075,   93, 1075,  979, 1075, 1075,
     1075, 1075,  977,   92,   91,  978,   84,   81, 1228, 1552,
     1075,   80, 1552,  979,  962,  962,  962, 1555,   79, 1552,
     1555,  963,  963,  963, 1547,   72,   66, 1555, 1075,   65,
       64,   50,  977,  977,  977,  978,  978,  978, 1228, 1228,
     1228,   46,   37,  979,  979,  979,  991, 1250, 1250, 1250,
     1250, 1250,   36,   33,   32,  991,   31,  991,  991,  991,
      991,  991, 1084, 1547, 1084,  991, 1084, 1084, 1084, 1084,

     1086,    0, 1551, 1087, 1547, 1547, 1547, 1669, 1084, 1086,
     1669,  991, 1087, 1703,    0, 1086, 1703, 1669, 1087, 1086,
        0, 1088, 1087, 1703, 1735,    0, 1084, 1735,    0,    0,
     1088, 1250, 1250, 1250, 1735, 1086, 1088,    0, 1087,    0,
     1088,  991,  991,  991,  994, 1551,    0,    0,  994,  994,
      994,  994, 1551, 1551, 1551,    0, 1088,  994,  994,  994,
      994,    0,    0,    0, 1557, 1086, 1086, 1086, 1087, 1087,
     1087,    0,    0,    0,  994,  994,  994,  994,  994,  994,
      997,  997, 1671,  997,    0,  997, 1088, 1088, 1088,  997,
      997,  997, 1137,  997,    0,    0, 1137, 1137, 1137, 1137,

        0,  997,    0, 1557, 1121,    0, 1121,    0, 1137, 1121,
     1121, 1121, 1121, 1121, 1557, 1557, 1557,    0,  997,    0,
      997,  997, 1140,    0, 1140,    0, 1137, 1140, 1140, 1140,
     1140, 1140, 1671, 1671, 1671, 1143,    0,    0, 1229, 1143,
     1143, 1143, 1143,    0,    0,  997,    0,  997,  997,  998,
      998, 1143,  998, 1229,  998,    0,    0, 1144,  998,  998,
      998, 1678,  998, 1121, 1121, 1121, 1144,    0,    0, 1143,
      998, 1264, 1144, 1229, 1743,    0, 1144, 1743,    0,    0,
        0, 1140, 1140, 1140, 1743,    0, 1264,  998,    0,  998,
      998, 1182, 1144, 1182,    0, 1182, 1182, 1182, 1182,    0,

        0,    0,    0, 1229, 1229, 1229, 1264, 1182,    0,    0,
        0, 1678, 1678, 1678,  998,    0,  998,  998, 1005, 1005,
     1005, 1005, 1144, 1144, 1144, 1182,    0, 1005, 1005, 1005,
     1005, 1379, 1379, 1379, 1379, 1379, 1264, 1264, 1264,    0,
        0,    0,    0,    0, 1005, 1005, 1005, 1005, 1005, 1005,
     1041, 1041, 1041, 1041, 1041,    0, 1041, 1041,    0, 1041,
     1041, 1041,    0, 1359, 1041, 1359, 1041, 1359, 1359, 1359,
     1359,    0, 1041, 1041, 1235,    0, 1041,    0, 1235, 1235,
     1235, 1235,    0,    0,    0, 1379, 1379, 1379, 1142, 1041,
     1235, 1041, 1041, 1041, 1685, 1145,    0, 1142, 1041, 1142,

     1142, 1142, 1142, 1142, 1145,    0, 1692, 1142, 1235,    0,
     1145,    0,    0,    0, 1145,    0, 1041, 1041, 1041,    0,
     1041, 1041, 1041, 1041, 1041, 1043, 1043, 1043, 1043, 1043,
     1145, 1043, 1043,    0, 1043, 1043, 1043,    0,    0, 1043,
        0, 1043,    0,    0, 1685, 1685, 1685, 1043, 1043,    0,
        0, 1043,    0, 1142, 1142, 1142, 1692, 1692, 1692,    0,
     1145, 1145, 1145,    0, 1043,    0, 1043, 1043, 1043, 1219,
     1146, 1219,    0,    0, 1219, 1219, 1219, 1219, 1219, 1146,
        0, 1698,    0,    0,    0, 1146,    0,    0,    0, 1146,
        0, 1043, 1043, 1043, 1738, 1043, 1043, 1043, 1043, 1043,

     1051, 1051, 1051, 1051, 1051, 1146, 1051, 1051,    0, 1051,
     1051, 1051, 1746,    0, 1051,    0, 1051,    0,    0,    0,
        0,    0, 1051, 1051,    0,    0, 1051,    0, 1219, 1219,
     1219, 1698, 1698, 1698,    0, 1146, 1146, 1146,    0, 1051,
        0, 1051, 1051, 1051, 1738, 1738, 1738,    0,    0,    0,
        0,    0, 1238,    0, 1238,    0,    0, 1238, 1238, 1238,
     1238, 1238, 1746, 1746, 1746,    0, 1051, 1051, 1051,    0,
     1051, 1051, 1051, 1051, 1051, 1055, 1055, 1055, 1055, 1055,
     1055, 1055,    0, 1055, 1422, 1055, 1055, 1055, 1055, 1055,
     1055, 1055, 1055, 1055, 1062, 1062, 1062, 1062, 1062, 1422,

     1062, 1062,    0, 1062, 1062, 1062,    0,    0, 1062,    0,
     1062, 1238, 1238, 1238,    0,    0, 1062, 1062,    0, 1422,
     1062,    0,    0, 1147,    0,    0,    0,    0,    0,    0,
        0,    0, 1147, 1062,    0, 1062, 1062, 1062, 1147,    0,
     1241,    0, 1147,    0, 1241, 1241, 1241, 1241,    0, 1422,
     1422, 1422,    0,    0,    0,    0, 1241,    0, 1147,    0,
     1062, 1062, 1062,    0, 1062, 1062, 1062, 1062, 1062, 1071,
     1071, 1071, 1071, 1071, 1241, 1071, 1071,    0, 1071, 1071,
     1071,    0,    0, 1071, 1151, 1071,    0, 1153, 1147, 1147,
     1147, 1071, 1071, 1151,    0, 1071, 1153,    0,    0, 1151,

        0,    0, 1153, 1151,    0,    0, 1153,    0, 1071,    0,
     1071, 1071, 1071, 1759, 1759, 1759,    0,    0,    0, 1151,
        0,    0, 1153,    0,    0,    0,    0,    0,    0,    0,
     1423, 1759, 1759, 1759, 1759, 1071, 1071, 1071,    0, 1071,
     1071, 1071, 1071, 1071, 1083, 1423,    0,    0,    0, 1151,
     1151, 1151, 1153, 1153, 1153, 1083, 1083, 1083, 1083, 1083,
        0,    0,    0, 1083,    0, 1423,    0, 1083, 1154,    0,
        0, 1156,    0,    0,    0,    0,    0, 1154,    0, 1160,
     1156,    0,    0, 1154,    0, 1083, 1156, 1154, 1160,    0,
     1156,    0,    0,    0, 1160, 1423, 1423, 1423, 1160,    0,

        0,    0,    0, 1154,    0,    0, 1156,    0,    0, 1083,
     1083, 1083, 1085,    0, 1160,    0,    0, 1498,    0,    0,
        0, 1085,    0, 1085, 1085, 1085, 1085, 1085,    0,    0,
        0, 1085, 1498, 1154, 1154, 1154, 1156, 1156, 1156, 1161,
     1560,    0,    0, 1560, 1160, 1160, 1160, 1085, 1161,    0,
     1560, 1162, 1498,    0, 1161,    0,    0,    0, 1161,    0,
     1162, 1560,    0,    0,    0,    0, 1162,    0,    0,    0,
     1162,    0,    0,    0, 1161,    0,    0, 1085, 1085, 1085,
     1120,    0, 1498, 1498, 1498,    0, 1162, 1120,    0, 1120,
        0, 1120, 1120, 1120, 1120, 1120,    0,    0,    0, 1120,

        0,    0,    0, 1120, 1161, 1161, 1161,    0,    0,    0,
        0, 1560, 1560, 1560, 1184, 1120, 1162, 1162, 1162, 1185,
        0, 1120,    0, 1184,    0,    0,    0,    0, 1185, 1184,
        0,    0,    0, 1184, 1185, 1284,    0, 1284, 1185, 1284,
     1284, 1284, 1284,    0,    0, 1120, 1120, 1120, 1155, 1184,
        0, 1284,    0,    0, 1185, 1186,    0, 1155,    0, 1155,
     1155, 1155, 1155, 1155, 1186,    0,    0, 1155,    0, 1284,
     1186, 1380,    0,    0, 1186, 1380, 1380, 1380, 1380, 1184,
     1184, 1184, 1240, 1155, 1185, 1185, 1185, 1380,    0, 1242,
     1186, 1240,    0, 1240, 1240, 1240, 1240, 1240, 1242,    0,

        0, 1240,    0,    0, 1242, 1380,    0,    0, 1242,    0,
        0,    0,    0, 1155, 1155, 1155, 1181,    0,    0,    0,
     1186, 1186, 1186, 1243, 1242,    0,    0, 1181, 1181, 1181,
     1181, 1181, 1243,    0,    0, 1181,    0,    0, 1243, 1181,
        0,    0, 1243,    0, 1244,    0,    0, 1240, 1240, 1240,
        0, 1245,    0, 1244, 1242, 1242, 1242, 1181, 1243, 1244,
     1245,    0,    0, 1244,    0,    0, 1245,    0,    0, 1362,
     1245, 1362,    0,    0, 1362, 1362, 1362, 1362, 1362, 1244,
        0, 1181, 1181, 1181, 1183,    0, 1245,    0, 1243, 1243,
     1243,    0,    0, 1183,    0, 1183, 1183, 1183, 1183, 1183,

        0,    0,    0, 1183,    0,    0,    0,    0,    0, 1244,
     1244, 1244, 1249,    0,    0,    0, 1245, 1245, 1245, 1183,
        0, 1249,    0, 1251,    0,    0,    0, 1249, 1362, 1362,
     1362, 1249, 1251,    0,    0,    0,    0,    0, 1251,    0,
        0,    0, 1251,    0,    0,    0,    0, 1249,    0, 1183,
     1183, 1183, 1218, 1388, 1388, 1388, 1388, 1388, 1251, 1218,
        0, 1218,    0, 1218, 1218, 1218, 1218, 1218,    0,    0,
        0, 1218,    0,    0,    0, 1218, 1252, 1249, 1249, 1249,
        0,    0,    0,    0,    0, 1252,    0, 1218, 1251, 1251,
     1251, 1252,    0, 1218,    0, 1252,    0,    0, 1389,    0,

        0, 1254, 1389, 1389, 1389, 1389,    0, 1388, 1388, 1388,
     1254, 1252,    0,    0, 1389, 1258, 1254, 1218, 1218, 1218,
     1254,    0,    0,    0, 1258,    0,    0,    0,    0,    0,
     1258,    0, 1389,    0, 1258,    0, 1254,    0,    0,    0,
        0, 1252, 1252, 1252, 1253, 1405, 1405, 1405, 1405, 1405,
     1258,    0,    0, 1253,    0, 1253, 1253, 1253, 1253, 1253,
        0,    0,    0, 1253,    0,    0, 1254, 1254, 1254, 1259,
     1455, 1455, 1455, 1455, 1455,    0,    0, 1260, 1259, 1253,
     1258, 1258, 1258,    0, 1259,    0, 1260,    0, 1259,    0,
        0,    0, 1260,    0,    0,    0, 1260,    0,    0, 1405,

     1405, 1405,    0,    0, 1259,    0,    0,    0,    0, 1253,
     1253, 1253, 1260, 1378,    0, 1378,    0,    0, 1378, 1378,
     1378, 1378, 1378, 1390, 1455, 1455, 1455, 1390, 1390, 1390,
     1390,    0, 1391,    0, 1259, 1259, 1259,    0,    0, 1390,
        0, 1391, 1260, 1260, 1260, 1279, 1279, 1391, 1279,    0,
     1279, 1391,    0,    0, 1279, 1279, 1279, 1390, 1279,    0,
        0,    0,    0,    0,    0,    0, 1279, 1391,    0,    0,
        0,    0, 1378, 1378, 1378,    0,    0, 1464, 1464, 1464,
     1464, 1464,    0, 1279,    0, 1279, 1279, 1438,    0, 1438,
        0,    0, 1438, 1438, 1438, 1438, 1438, 1391, 1391, 1391,

     1454, 1683, 1454,    0, 1683, 1454, 1454, 1454, 1454, 1454,
     1279, 1683, 1279, 1279, 1308, 1308, 1308, 1308, 1308,    0,
     1308, 1308, 1683, 1308, 1308, 1308,    0,    0, 1308,    0,
     1308, 1464, 1464, 1464,    0,    0, 1308, 1308,    0,    0,
     1308,    0,    0, 1392,    0,    0, 1438, 1438, 1438,    0,
        0,    0, 1392, 1308,    0, 1308, 1308, 1308, 1392, 1454,
     1454, 1454, 1392, 1456,    0,    0,    0, 1456, 1456, 1456,
     1456,    0, 1683, 1683, 1683,    0,    0,    0, 1392, 1456,
     1308, 1308, 1308,    0, 1308, 1308, 1308, 1308, 1308, 1309,
     1309, 1309, 1309, 1309,    0, 1309,    0, 1456, 1309, 1309,

     1309,    0,    0, 1309,    0, 1309,    0,    0, 1392, 1392,
     1392, 1309, 1309, 1465,    0, 1309, 1393, 1465, 1465, 1465,
     1465,    0,    0,    0,    0, 1393,    0,    0, 1309, 1465,
     1309, 1393, 1309,    0, 1399, 1393,    0,    0,    0,    0,
        0,    0,    0, 1399,    0,    0,    0, 1465,    0, 1399,
        0, 1393,    0, 1399,    0, 1309, 1309, 1309,    0, 1309,
     1309, 1309, 1309, 1309, 1310, 1310, 1310, 1310, 1310, 1399,
     1310, 1310,    0, 1310, 1310, 1310,    0,    0, 1310,    0,
     1310, 1393, 1393, 1393,    0,    0, 1310, 1310, 1466,    0,
     1310,    0, 1466, 1466, 1466, 1466,    0,    0,    0, 1399,

     1399, 1399,    0, 1310, 1466, 1310, 1310, 1310,    0,    0,
        0, 1499,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1466,    0,    0,    0, 1499,    0,    0,    0,
     1310, 1310, 1310,    0, 1310, 1310, 1310, 1310, 1310, 1314,
     1314, 1314, 1314, 1314, 1314, 1314, 1499, 1314,    0, 1314,
     1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1357, 1357,
     1357, 1357, 1357,    0, 1357, 1357,    0, 1357, 1357, 1357,
     1400,    0, 1357,    0, 1357,    0, 1499, 1499, 1499, 1400,
     1357, 1357,    0,    0, 1357, 1400,    0,    0,    0, 1400,
        0,    0,    0,    0,    0,    0,    0, 1357,    0, 1357,

     1357, 1357,    0,    0, 1401, 1400, 1481, 1481, 1481, 1481,
     1481,    0,    0, 1401,    0,    0,    0,    0,    0, 1401,
        0,    0,    0, 1401, 1357, 1357, 1357,    0, 1357, 1357,
     1357, 1357, 1357, 1361,    0, 1400, 1400, 1400,    0, 1401,
     1361,    0, 1361,    0, 1361, 1361, 1361, 1361, 1361,    0,
        0,    0, 1361,    0,    0,    0, 1361,    0,    0,    0,
     1481, 1481, 1481,    0,    0,    0,    0, 1406, 1361, 1401,
     1401, 1401, 1407,    0, 1361,    0, 1406,    0,    0,    0,
        0, 1407, 1406,    0,    0,    0, 1406, 1407,    0,    0,
        0, 1407,    0,    0,    0,    0,    0,    0, 1361, 1361,

     1361, 1377, 1406,    0,    0,    0,    0, 1407, 1377,    0,
     1377,    0, 1377, 1377, 1377, 1377, 1377,    0,    0,    0,
     1377,    0,    0,    0, 1377,    0, 1408,    0,    0,    0,
        0,    0, 1406, 1406, 1406, 1408, 1377, 1407, 1407, 1407,
     1414, 1408, 1377, 1415,    0, 1408,    0,    0,    0, 1414,
        0,    0, 1415,    0, 1416, 1414,    0,    0, 1415, 1414,
        0, 1408, 1415, 1416,    0,    0, 1377, 1377, 1377, 1416,
        0,    0,    0, 1416,    0, 1414,    0,    0, 1415,    0,
        0, 1467,    0,    0,    0,    0,    0,    0,    0, 1416,
     1467, 1408, 1408, 1408,    0,    0, 1467,    0,    0,    0,

     1467,    0,    0,    0,    0, 1414, 1414, 1414, 1415, 1415,
     1415,    0,    0,    0,    0,    0, 1467,    0,    0, 1416,
     1416, 1416, 1437,    0,    0,    0,    0,    0,    0, 1437,
        0, 1437,    0, 1437, 1437, 1437, 1437, 1437,    0,    0,
        0, 1437,    0,    0,    0, 1437, 1467, 1467, 1467, 1468,
        0,    0,    0,    0,    0,    0, 1469, 1437, 1468,    0,
        0, 1475,    0, 1437, 1468, 1469,    0,    0, 1468,    0,
     1475, 1469,    0,    0,    0, 1469, 1475,    0,    0,    0,
     1475,    0,    0,    0, 1468,    0,    0, 1437, 1437, 1437,
     1453, 1469,    0,    0,    0,    0, 1475, 1453,    0, 1453,

        0, 1453, 1453, 1453, 1453, 1453,    0,    0,    0, 1453,
        0,    0,    0, 1453, 1468, 1468, 1468,    0,    0,    0,
        0, 1469, 1469, 1469, 1476, 1453, 1475, 1475, 1475, 1477,
        0, 1453, 1482, 1476,    0,    0,    0,    0, 1477, 1476,
        0, 1482,    0, 1476, 1477,    0,    0, 1482, 1477,    0,
        0, 1482,    0, 1483,    0, 1453, 1453, 1453,    0, 1476,
        0,    0, 1483,    0, 1477, 1484,    0, 1482, 1483,    0,
        0,    0, 1483,    0, 1484,    0,    0,    0,    0,    0,
     1484,    0,    0,    0, 1484,    0,    0,    0, 1483, 1476,
     1476, 1476, 1490,    0, 1477, 1477, 1477, 1482, 1482, 1482,

     1484, 1490,    0,    0,    0,    0, 1491, 1490,    0,    0,
        0, 1490,    0,    0, 1492, 1491,    0,    0, 1483, 1483,
     1483, 1491,    0, 1492,    0, 1491,    0, 1490,    0, 1492,
     1484, 1484, 1484, 1492,    0,    0,    0,    0,    0,    0,
        0, 1491,    0,    0,    0,    0,    0,    0,    0, 1492,
        0,    0,    0,    0,    0,    0,    0, 1490, 1490, 1490,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1491, 1491, 1491,    0,    0,    0,    0,    0, 1492,
     1492, 1492, 1534, 1534, 1534, 1534, 1534, 1534, 1534,    0,
     1534,    0, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534,

     1534, 1546, 1546, 1546, 1546, 1546,    0, 1546, 1546,    0,
     1546, 1546, 1546,    0,    0, 1546,    0, 1546,    0,    0,
        0,    0,    0, 1546, 1546,    0,    0, 1546,    0,    0,
     1576,    0,    0,    0,    0,    0,    0,    0,    0, 1576,
     1546,    0, 1546, 1546, 1546, 1576,    0,    0,    0, 1576,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1576,    0, 1546, 1546, 1546,
        0, 1546, 1546, 1546, 1546, 1546, 1548, 1548, 1548, 1548,
     1548,    0, 1548, 1548,    0, 1548, 1548, 1548,    0,    0,
     1548,    0, 1548,    0,    0, 1576, 1576, 1576, 1548, 1548,

        0,    0, 1548,    0,    0, 1577,    0,    0,    0,    0,
        0,    0,    0,    0, 1577, 1548,    0, 1548, 1548, 1548,
     1577,    0,    0,    0, 1577,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1577,    0, 1548, 1548, 1548,    0, 1548, 1548, 1548, 1548,
     1548, 1554, 1554, 1554, 1554, 1554,    0, 1554, 1554,    0,
     1554, 1554, 1554,    0,    0, 1554,    0, 1554,    0,    0,
     1577, 1577, 1577, 1554, 1554,    0,    0, 1554,    0,    0,
     1578,    0,    0,    0,    0,    0,    0,    0,    0, 1578,
     1554,    0, 1554, 1554, 1554, 1578,    0,    0,    0, 1578,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1578,    0, 1554, 1554, 1554,
        0, 1554, 1554, 1554, 1554, 1554, 1558, 1558, 1558, 1558,
     1558,    0, 1558, 1558,    0, 1558, 1558, 1558,    0,    0,
     1558,    0, 1558,    0,    0, 1578, 1578, 1578, 1558, 1558,
        0,    0, 1558,    0,    0, 1585,    0,    0,    0,    0,
        0,    0,    0,    0, 1585, 1558,    0, 1558, 1558, 1558,
     1585,    0,    0,    0, 1585,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1585,    0, 1558, 1558, 1558,    0, 1558, 1558, 1558, 1558,

     1558, 1559, 1559, 1559, 1559, 1559,    0, 1559, 1559,    0,
     1559, 1559, 1559,    0,    0, 1559, 1586, 1559,    0,    0,
     1585, 1585, 1585, 1559, 1559, 1586,    0, 1559,    0,    0,
        0, 1586,    0,    0,    0, 1586,    0,    0,    0,    0,
     1559,    0, 1559, 1559, 1559,    0,    0,    0,    0,    0,
        0, 1586,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1559, 1559, 1559,
        0, 1559, 1559, 1559, 1559, 1559, 1572,    0,    0,    0,
        0, 1586, 1586, 1586, 1587, 1572,    0, 1572, 1572, 1572,
     1572, 1572,    0, 1587,    0, 1572,    0,    0,    0, 1587,

        0, 1593,    0, 1587,    0,    0,    0,    0,    0,    0,
     1593, 1572,    0,    0,    0,    0, 1593,    0,    0, 1587,
     1593,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1593,    0,    0,    0,
        0, 1572, 1572, 1572, 1575,    0,    0,    0,    0, 1587,
     1587, 1587,    0, 1575,    0, 1575, 1575, 1575, 1575, 1575,
        0, 1594,    0, 1575,    0,    0, 1593, 1593, 1593, 1595,
     1594,    0,    0,    0,    0,    0, 1594,    0, 1595, 1575,
     1594,    0,    0,    0, 1595,    0,    0,    0, 1595,    0,
        0,    0,    0,    0,    0,    0, 1594, 1622,    0,    0,

        0,    0,    0,    0, 1595,    0, 1622,    0,    0, 1575,
     1575, 1575, 1622,    0,    0,    0, 1622,    0,    0,    0,
        0,    0,    0,    0, 1623,    0, 1594, 1594, 1594,    0,
        0,    0, 1622, 1623, 1595, 1595, 1595, 1618,    0, 1623,
        0,    0,    0, 1623,    0,    0, 1618,    0, 1618, 1618,
     1618, 1618, 1618,    0,    0,    0, 1618,    0,    0, 1623,
     1624,    0, 1622, 1622, 1622, 1631,    0,    0,    0, 1624,
        0,    0, 1618,    0, 1631, 1624,    0, 1632,    0, 1624,
     1631,    0,    0,    0, 1631,    0, 1632,    0,    0, 1623,
     1623, 1623, 1632,    0,    0, 1624, 1632,    0,    0,    0,

     1631,    0, 1618, 1618, 1618, 1621,    0,    0,    0,    0,
        0,    0, 1632,    0, 1621,    0, 1621, 1621, 1621, 1621,
     1621,    0,    0,    0, 1621, 1624, 1624, 1624,    0,    0,
     1631, 1631, 1631,    0,    0,    0,    0,    0, 1633,    0,
     1621, 1639, 1632, 1632, 1632,    0, 1640, 1633,    0, 1641,
     1639,    0,    0, 1633,    0, 1640, 1639, 1633, 1641,    0,
     1639, 1640,    0,    0, 1641, 1640,    0,    0, 1641,    0,
     1621, 1621, 1621, 1633,    0,    0, 1639,    0,    0,    0,
        0, 1640,    0,    0, 1641,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0, 1633, 1633, 1633, 1639, 1639, 1639,    0,
        0, 1640, 1640, 1640, 1641, 1641, 1641, 1676, 1676, 1676,
     1676, 1676,    0, 1676, 1676,    0, 1676, 1676, 1676,    0,
        0, 1676,    0, 1676,    0,    0,    0,    0,    0, 1676,
     1676,    0,    0, 1676,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1676,    0, 1676, 1676,
     1676,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1676, 1676, 1676,    0, 1676, 1676, 1676,
     1676, 1676, 1690, 1690, 1690, 1690, 1690,    0, 1690, 1690,

        0, 1690, 1690, 1690,    0,    0, 1690,    0, 1690,    0,
        0,    0,    0,    0, 1690, 1690,    0,    0, 1690,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1690,    0, 1690, 1690, 1690,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1690, 1690,
     1690,    0, 1690, 1690, 1690, 1690, 1690, 1764, 1764, 1764,
     1764, 1764, 1764, 1764, 1764, 1764, 1764, 1764, 1764, 1764,
     1764, 1764, 1764, 1764, 1764, 1764, 1764, 1764, 1764, 1764,
     1764, 1765, 1765, 1765, 1765, 1765, 1765, 1765, 1765, 1765,

     1765, 1765, 1765, 1765, 1765, 1765, 1765, 1765, 1765, 1765,
     1765, 1765, 1765, 1765, 1765, 1766, 1766, 1766, 1766, 1766,
     1766, 1766, 1766, 1766, 1766, 1766, 1766, 1766, 1766, 1766,
     1766, 1766, 1766, 1766, 1766, 1766, 1766, 1766, 1766, 1767,
     1767, 1767, 1767, 1767, 1767, 1767, 1767, 1767, 1767, 1767,
     1767, 1767, 1767, 1767, 1767, 1767, 1767, 1767, 1767, 1767,
     1767, 1767, 1767, 1768, 1768, 1768, 1768, 1768, 1768, 1768,
     1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768,
     1768, 1768, 1768, 1768, 1768, 1768, 1768, 1769, 1769, 1769,
     1769, 1769, 1769, 1769, 1769, 1769, 1769, 1769, 1769, 1769,

     1769, 1769, 1769, 1769, 1769, 1769, 1769, 1769, 1769, 1769,
     1769, 1770, 1770,    0,    0,    0, 1770, 1770, 1770, 1770,
     1770, 1770, 1770, 1770, 1770, 1770, 1770, 1770, 1770,    0,
     1770, 1770, 1770, 1770, 1770, 1771, 1771,    0, 1771,    0,
        0,    0, 1771,    0, 1771, 1771, 1772, 1772,    0,    0,
     1772, 1772, 1772, 1772, 1772, 1772, 1772, 1772, 1772, 1772,
     1772, 1772, 1772, 1772, 1772, 1772, 1772, 1772, 1772, 1772,
     1773, 1773, 1773, 1773, 1773, 1773, 1773, 1773, 1773, 1773,
     1773, 1773, 1773, 1773, 1773, 1773, 1773, 1773, 1773, 1773,
     1773, 1773, 1773, 1773, 1774,    0, 1774,    0,    0, 1774,

     1774,    0, 1774,    0, 1774, 1774,    0, 1774, 1774, 1774,
     1774, 1774, 1774, 1775,    0, 1775,    0,    0, 1775, 1775,
        0, 1775,    0, 1775, 1775,    0, 1775, 1775, 1775, 1775,
     1775, 1775, 1776,    0, 1776,    0,    0, 1776, 1776,    0,
        0,    0, 1776, 1776,    0,    0, 1776,    0, 1776, 1776,
     1776, 1777,    0, 1777,    0,    0, 1777, 1777,    0, 1777,
     1777, 1777, 1777,    0, 1777, 1777, 1777, 1777, 1777, 1777,
     1778,    0, 1778,    0,    0, 1778, 1778,    0, 1778, 1778,
     1778, 1778,    0, 1778, 1778, 1778, 1778, 1778, 1778, 1779,
        0, 1779,    0,    0, 1779, 1779,    0,    0, 1779, 1779,

     1779,    0,    0, 1779,    0, 1779, 1779, 1779, 1780, 1780,
     1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780,
     1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780,
     1780, 1780, 1781,    0,    0,    0, 1781,    0, 1781, 1781,
     1782, 1782, 1782,    0, 1782, 1782,    0,    0, 1782,    0,
        0, 1782, 1782, 1782, 1782, 1782, 1783,    0,    0,    0,
        0, 1783,    0, 1783, 1783,    0,    0, 1783,    0, 1783,
     1783, 1783,    0, 1783, 1783, 1783,    0, 1783, 1783, 1783,
     1784, 1784,    0,    0, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,

     1784, 1784, 1784, 1784, 1785, 1785,    0, 1785, 1785, 1785,
     1785, 1785, 1785, 1785, 1785, 1785, 1785, 1785, 1785, 1785,
     1785, 1785, 1785, 1785, 1785, 1785, 1785, 1785, 1786, 1786,
        0, 1786, 1786, 1786, 1786, 1786, 1786, 1786, 1786, 1786,
     1786, 1786, 1786, 1786, 1786, 1786, 1786, 1786, 1786, 1786,
     1786, 1786, 1787, 1787, 1787, 1787, 1787, 1787, 1787, 1787,
     1787, 1787, 1787, 1787, 1787, 1787, 1787, 1787, 1787, 1787,
     1787, 1787, 1787, 1787, 1787, 1787, 1789,    0, 1789,    0,
        0, 1789, 1789,    0,    0, 1789, 1789, 1789,    0,    0,
     1789, 1789, 1789, 1789, 1789, 1790, 1790,    0, 1790,    0,

        0,    0, 1790,    0, 1790, 1790, 1791, 1791,    0,    0,
     1791, 1791, 1791, 1791, 1791, 1791, 1791, 1791, 1791, 1791,
     1791, 1791, 1791, 1791, 1791, 1791, 1791, 1791, 1791, 1791,
     1793,    0, 1793,    0,    0, 1793, 1793,    0, 1793,    0,
     1793, 1793,    0, 1793, 1793, 1793, 1793, 1793, 1793, 1794,
        0, 1794,    0,    0, 1794, 1794,    0, 1794,    0, 1794,
     1794,    0, 1794, 1794, 1794, 1794, 1794, 1794, 1795,    0,
     1795,    0,    0, 1795, 1795,    0, 1795,    0, 1795, 1795,
        0, 1795, 1795, 1795, 1795, 1795, 1795, 1796,    0, 1796,
        0,    0, 1796, 1796,    0,    0,    0, 1796, 1796,    0,

        0, 1796,    0, 1796, 1796, 1796, 1797,    0, 1797,    0,
        0, 1797, 1797,    0, 1797,    0, 1797, 1797,    0, 1797,
     1797, 1797, 1797, 1797, 1797, 1798,    0, 1798,    0,    0,
     1798, 1798, 1798, 1798,    0, 1798, 1798,    0, 1798, 1798,
        0, 1798, 1798, 1798, 1799,    0, 1799,    0,    0, 1799,
     1799,    0, 1799,    0, 1799, 1799,    0, 1799, 1799, 1799,
     1799, 1799, 1799, 1800,    0, 1800,    0,    0, 1800, 1800,
        0, 1800,    0, 1800, 1800,    0, 1800, 1800, 1800, 1800,
     1800, 1800, 1801,    0, 1801,    0,    0, 1801, 1801,    0,
        0,    0, 1801,    0,    0,    0, 1801, 1801, 1801, 1801,

     1801, 1802,    0, 1802,    0,    0, 1802, 1802,    0, 1802,
        0, 1802, 1802,    0, 1802, 1802, 1802, 1802, 1802, 1802,
     1803,    0, 1803,    0,    0, 1803, 1803,    0, 1803, 1803,
     1803, 1803,    0, 1803, 1803, 1803, 1803, 1803, 1803, 1804,
        0, 1804,    0,    0, 1804, 1804,    0, 1804, 1804, 1804,
     1804,    0, 1804, 1804, 1804, 1804, 1804, 1804, 1805,    0,
     1805,    0,    0, 1805, 1805,    0, 1805, 1805, 1805, 1805,
        0, 1805, 1805, 1805, 1805, 1805, 1805, 1806,    0, 1806,
        0,    0, 1806, 1806,    0,    0, 1806, 1806, 1806,    0,
        0, 1806,    0, 1806, 1806, 1806, 1807,    0, 1807,    0,

        0, 1807, 1807,    0, 1807, 1807, 1807, 1807,    0, 1807,
     1807, 1807, 1807, 1807, 1807, 1808,    0, 1808,    0,    0,
     1808, 1808, 1808, 1808, 1808, 1808, 1808,    0, 1808, 1808,
        0, 1808, 1808, 1808, 1809,    0, 1809,    0,    0, 1809,
     1809,    0, 1809, 1809, 1809, 1809,    0, 1809, 1809, 1809,
     1809, 1809, 1809, 1810,    0, 1810,    0,    0, 1810, 1810,
        0, 1810, 1810, 1810, 1810,    0, 1810, 1810, 1810, 1810,
     1810, 1810, 1811,    0, 1811,    0,    0, 1811, 1811,    0,
        0, 1811, 1811,    0,    0,    0, 1811, 1811, 1811, 1811,
     1811, 1812,    0, 1812,    0,    0, 1812, 1812,    0, 1812,

     1812, 1812, 1812,    0, 1812, 1812, 1812, 1812, 1812, 1812,
     1815,    0,    0,    0, 1815,    0, 1815, 1815, 1816,    0,
        0,    0, 1816,    0, 1816, 1816, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,    0,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1819, 1819,    0, 1819,    0,    0,    0, 1819,    0, 1819,
     1819, 1820,    0,    0,    0,    0, 1820,    0, 1820, 1820,
        0,    0, 1820,    0, 1820, 1820, 1820,    0, 1820, 1820,
     1820,    0, 1820, 1820, 1820, 1821, 1821,    0,    0, 1821,
     1821, 1821, 1821, 1821, 1821, 1821, 1821, 1821, 1821, 1821,

     1821, 1821, 1821, 1821, 1821, 1821, 1821, 1821, 1821, 1823,
     1823,    0, 1823, 1823, 1823, 1823, 1823, 1823, 1823, 1823,
     1823, 1823, 1823, 1823, 1823, 1823, 1823, 1823, 1823, 1823,
     1823, 1823, 1823, 1824, 1824,    0,    0,    0, 1824, 1824,
     1824, 1824, 1824, 1824, 1824, 1824, 1824, 1824, 1824, 1824,
     1824,    0, 1824, 1824, 1824, 1824, 1824, 1825, 1825, 1825,
     1825, 1825, 1825, 1825, 1825, 1825, 1825, 1825, 1825, 1825,
     1825, 1825, 1825, 1825, 1825, 1825, 1825, 1825, 1825, 1825,
     1825, 1826,    0,    0,    0, 1826,    0, 1826, 1826, 1827,
        0,    0, 1827,    0,    0,    0, 1827,    0, 1827, 1827,

     1829,    0, 1829,    0,    0, 1829, 1829,    0,    0, 1829,
     1829, 1829,    0,    0, 1829, 1829, 1829, 1829, 1829, 1830,
        0, 1830,    0,    0,    0, 1830,    0, 1830, 1830, 1832,
        0, 1832,    0,    0, 1832, 1832,    0,    0,    0, 1832,
     1832,    0, 1832, 1832,    0, 1832, 1832, 1832, 1833,    0,
     1833,    0,    0, 1833, 1833,    0, 1833,    0, 1833, 1833,
        0, 1833, 1833, 1833, 1833, 1833, 1833, 1834,    0, 1834,
        0,    0, 1834, 1834,    0, 1834,    0, 1834, 1834,    0,
     1834, 1834, 1834, 1834, 1834, 1834, 1835,    0, 1835,    0,
        0, 1835, 1835,    0, 1835,    0, 1835, 1835,    0, 1835,

     1835, 1835, 1835, 1835, 1835, 1836,    0, 1836,    0,    0,
     1836, 1836,    0, 1836,    0, 1836, 1836,    0, 1836, 1836,
     1836, 1836, 1836, 1836, 1837,    0, 1837,    0,    0, 1837,
     1837,    0,    0,    0, 1837, 1837,    0,    0, 1837, 1837,
     1837, 1837, 1837, 1838,    0, 1838,    0,    0, 1838, 1838,
        0,    0,    0, 1838,    0,    0,    0, 1838, 1838, 1838,
     1838, 1838, 1839,    0, 1839,    0,    0, 1839, 1839,    0,
     1839,    0, 1839, 1839,    0, 1839, 1839, 1839, 1839, 1839,
     1839, 1840,    0, 1840,    0,    0, 1840, 1840,    0, 1840,
        0, 1840, 1840,    0, 1840, 1840, 1840, 1840, 1840, 1840,

     1841,    0, 1841,    0,    0, 1841, 1841,    0,    0,    0,
     1841, 1841,    0,    0, 1841, 1841, 1841, 1841, 1841, 1842,
        0, 1842,    0,    0, 1842, 1842, 1842, 1842,    0, 1842,
     1842,    0, 1842, 1842, 1842, 1842, 1842, 1842, 1843,    0,
     1843,    0,    0, 1843, 1843,    0,    0,    0, 1843,    0,
        0,    0, 1843, 1843, 1843, 1843, 1843, 1844,    0, 1844,
        0,    0, 1844, 1844,    0,    0,    0, 1844, 1844,    0,
        0, 1844,    0, 1844, 1844, 1844, 1845,    0, 1845,    0,
        0, 1845, 1845,    0, 1845,    0, 1845, 1845,    0, 1845,
     1845, 1845, 1845, 1845, 1845, 1846,    0, 1846,    0,    0,

     1846, 1846,    0, 1846,    0, 1846, 1846,    0, 1846, 1846,
     1846, 1846, 1846, 1846, 1847,    0, 1847,    0,    0, 1847,
     1847,    0,    0,    0, 1847,    0,    0,    0, 1847, 1847,
     1847, 1847, 1847, 1848,    0, 1848,    0,    0, 1848, 1848,
        0,    0,    0, 1848,    0,    0,    0, 1848, 1848, 1848,
     1848, 1848, 1849,    0, 1849,    0,    0, 1849, 1849,    0,
     1849,    0, 1849, 1849,    0, 1849, 1849, 1849, 1849, 1849,
     1849, 1850,    0, 1850,    0,    0, 1850, 1850,    0, 1850,
        0, 1850, 1850,    0, 1850, 1850, 1850, 1850, 1850, 1850,
     1851,    0, 1851,    0,    0, 1851, 1851,    0,    0, 1851,

     1851, 1851,    0, 1851, 1851,    0, 1851, 1851, 1851, 1852,
        0, 1852,    0,    0, 1852, 1852,    0, 1852, 1852, 1852,
     1852,    0, 1852, 1852, 1852, 1852, 1852, 1852, 1853,    0,
     1853,    0,    0, 1853, 1853,    0, 1853, 1853, 1853, 1853,
        0, 1853, 1853, 1853, 1853, 1853, 1853, 1854,    0, 1854,
        0,    0, 1854, 1854,    0, 1854, 1854, 1854, 1854,    0,
     1854, 1854, 1854, 1854, 1854, 1854, 1855,    0, 1855,    0,
        0, 1855, 1855,    0, 1855, 1855, 1855, 1855,    0, 1855,
     1855, 1855, 1855, 1855, 1855, 1856,    0, 1856,    0,    0,
     1856, 1856,    0,    0, 1856, 1856, 1856,    0,    0, 1856,

     1856, 1856, 1856, 1856, 1857,    0, 1857,    0,    0, 1857,
     1857,    0,    0, 1857, 1857,    0,    0,    0, 1857, 1857,
     1857, 1857, 1857, 1858,    0, 1858,    0,    0, 1858, 1858,
        0, 1858, 1858, 1858, 1858,    0, 1858, 1858, 1858, 1858,
     1858, 1858, 1859,    0, 1859,    0,    0, 1859, 1859,    0,
     1859, 1859, 1859, 1859,    0, 1859, 1859, 1859, 1859, 1859,
     1859, 1860,    0, 1860,    0,    0, 1860, 1860,    0,    0,
     1860, 1860, 1860,    0,    0, 1860, 1860, 1860, 1860, 1860,
     1861,    0, 1861,    0,    0, 1861, 1861, 1861, 1861, 1861,
     1861, 1861,    0, 1861, 1861, 1861, 1861, 1861, 1861, 1862,

        0, 1862,    0,    0, 1862, 1862,    0,    0, 1862, 1862,
        0,    0,    0, 1862, 1862, 1862, 1862, 1862, 1863,    0,
     1863,    0,    0, 1863, 1863,    0,    0, 1863, 1863, 1863,
        0,    0, 1863,    0, 1863, 1863, 1863, 1864,    0, 1864,
        0,    0, 1864, 1864,    0, 1864, 1864, 1864, 1864,    0,
     1864, 1864, 1864, 1864, 1864, 1864, 1865,    0, 1865,    0,
        0, 1865, 1865,    0, 1865, 1865, 1865, 1865,    0, 1865,
     1865, 1865, 1865, 1865, 1865, 1866,    0, 1866,    0,    0,
     1866, 1866,    0,    0, 1866, 1866,    0,    0,    0, 1866,
     1866, 1866, 1866, 1866, 1867,    0, 1867,    0,    0, 1867,

     1867,    0,    0, 1867, 1867,    0,    0,    0, 1867, 1867,
     1867, 1867, 1867, 1868,    0, 1868,    0,    0, 1868, 1868,
        0, 1868, 1868, 1868, 1868,    0, 1868, 1868, 1868, 1868,
     1868, 1868, 1869,    0, 1869,    0,    0, 1869, 1869,    0,
     1869, 1869, 1869, 1869,    0, 1869, 1869, 1869, 1869, 1869,
     1869, 1873,    0,    0, 1873,    0,    0,    0, 1873,    0,
     1873, 1873, 1875, 1875, 1875, 1875, 1875, 1875, 1875, 1875,
     1875, 1875, 1875, 1875, 1875,    0, 1875, 1875, 1875, 1875,
     1875, 1875, 1875, 1875, 1875, 1875, 1876,    0,    0,    0,
        0, 1876,    0, 1876, 1876,    0,    0, 1876,    0, 1876,

     1876, 1876,    0, 1876, 1876, 1876,    0, 1876, 1876, 1876,
     1879, 1879,    0, 1879,    0,    0,    0, 1879,    0, 1879,
     1879, 1881, 1881, 1881, 1881, 1881,    0, 1881, 1881, 1881,
     1881,    0,    0, 1881, 1881,    0,    0, 1881, 1881, 1881,
        0, 1881,    0,    0, 1881, 1882,    0,    0, 1882, 1882,
        0, 1882,    0,    0, 1882, 1882,    0,    0, 1882, 1882,
     1882,    0,    0, 1882, 1882, 1882, 1882, 1882, 1883,    0,
     1883,    0,    0,    0, 1883,    0, 1883, 1883, 1884,    0,
     1884,    0,    0, 1884, 1884, 1884, 1884,    0, 1884, 1884,
        0, 1884, 1884, 1884, 1884, 1884, 1884, 1885,    0, 1885,

        0,    0, 1885, 1885,    0,    0,    0, 1885, 1885,    0,
        0, 1885, 1885, 1885, 1885, 1885, 1886,    0, 1886,    0,
        0, 1886, 1886,    0, 1886,    0, 1886, 1886,    0, 1886,
     1886,    0, 1886, 1886, 1886, 1887,    0, 1887,    0,    0,
     1887, 1887,    0, 1887,    0, 1887, 1887,    0, 1887, 1887,
     1887, 1887, 1887, 1887, 1888,    0, 1888,    0,    0, 1888,
     1888,    0, 1888,    0, 1888, 1888,    0, 1888, 1888, 1888,
     1888, 1888, 1888, 1889,    0, 1889,    0,    0, 1889, 1889,
        0, 1889,    0, 1889, 1889,    0, 1889, 1889, 1889, 1889,
     1889, 1889, 1890,    0, 1890,    0,    0, 1890, 1890,    0,

        0,    0, 1890, 1890,    0,    0, 1890, 1890, 1890, 1890,
     1890, 1891,    0, 1891,    0,    0, 1891, 1891,    0,    0,
        0, 1891,    0,    0,    0, 1891, 1891, 1891, 1891, 1891,
     1892,    0, 1892,    0,    0, 1892, 1892,    0,    0,    0,
     1892,    0,    0,    0, 1892, 1892, 1892, 1892, 1892, 1893,
        0, 1893,    0,    0, 1893, 1893,    0, 1893,    0, 1893,
     1893,    0, 1893, 1893, 1893, 1893, 1893, 1893, 1894,    0,
     1894,    0,    0, 1894, 1894,    0,    0,    0, 1894,    0,
        0,    0, 1894, 1894, 1894, 1894, 1894, 1895,    0, 1895,
        0,    0, 1895, 1895,    0,    0,    0, 1895,    0,    0,

        0, 1895, 1895, 1895, 1895, 1895, 1896,    0, 1896,    0,
        0, 1896, 1896,    0,    0,    0, 1896,    0,    0,    0,
     1896, 1896, 1896, 1896, 1896, 1897,    0, 1897,    0,    0,
     1897, 1897,    0,    0,    0, 1897,    0,    0,    0, 1897,
     1897, 1897, 1897, 1897, 1898,    0, 1898,    0,    0, 1898,
     1898,    0,    0,    0, 1898, 1898,    0,    0, 1898, 1898,
     1898, 1898, 1898, 1899,    0, 1899,    0,    0, 1899, 1899,
        0, 1899,    0, 1899, 1899,    0, 1899, 1899, 1899, 1899,
     1899, 1899, 1900,    0, 1900,    0,    0, 1900, 1900,    0,
     1900,    0, 1900, 1900,    0, 1900, 1900, 1900, 1900, 1900,

     1900, 1901,    0, 1901,    0,    0, 1901, 1901,    0, 1901,
        0, 1901, 1901,    0, 1901, 1901, 1901, 1901, 1901, 1901,
     1902,    0, 1902,    0,    0, 1902, 1902,    0, 1902,    0,
     1902, 1902,    0, 1902, 1902, 1902, 1902, 1902, 1902, 1903,
        0, 1903,    0,    0, 1903, 1903,    0,    0,    0, 1903,
     1903,    0,    0, 1903,    0, 1903, 1903, 1903, 1904,    0,
     1904,    0,    0, 1904, 1904,    0,    0,    0, 1904,    0,
        0,    0, 1904, 1904, 1904, 1904, 1904, 1905,    0, 1905,
        0,    0, 1905, 1905,    0, 1905,    0, 1905, 1905,    0,
     1905, 1905, 1905, 1905, 1905, 1905, 1906,    0, 1906,    0,

        0, 1906, 1906, 1906, 1906, 1906, 1906, 1906,    0, 1906,
     1906, 1906, 1906, 1906, 1906, 1907,    0, 1907,    0,    0,
     1907, 1907,    0,    0, 1907, 1907, 1907,    0,    0, 1907,
     1907, 1907, 1907, 1907, 1908,    0, 1908,    0,    0, 1908,
     1908,    0, 1908, 1908, 1908, 1908,    0, 1908, 1908,    0,
     1908, 1908, 1908, 1909,    0, 1909,    0,    0, 1909, 1909,
        0, 1909, 1909, 1909, 1909,    0, 1909, 1909, 1909, 1909,
     1909, 1909, 1910,    0, 1910,    0,    0, 1910, 1910,    0,
     1910, 1910, 1910, 1910,    0, 1910, 1910, 1910, 1910, 1910,
     1910, 1911,    0, 1911,    0,    0, 1911, 1911,    0, 1911,

     1911, 1911, 1911,    0, 1911, 1911, 1911, 1911, 1911, 1911,
     1912,    0, 1912,    0,    0, 1912, 1912,    0,    0, 1912,
     1912, 1912,    0,    0, 1912, 1912, 1912, 1912, 1912, 1913,
        0, 1913,    0,    0, 1913, 1913,    0,    0, 1913, 1913,
        0,    0,    0, 1913, 1913, 1913, 1913, 1913, 1914,    0,
     1914,    0,    0, 1914, 1914,    0,    0, 1914, 1914,    0,
        0,    0, 1914, 1914, 1914, 1914, 1914, 1915,    0, 1915,
        0,    0, 1915, 1915,    0, 1915, 1915, 1915, 1915,    0,
     1915, 1915, 1915, 1915, 1915, 1915, 1916,    0, 1916,    0,
        0, 1916, 1916,    0,    0, 1916, 1916,    0,    0,    0,

     1916, 1916, 1916, 1916, 1916, 1917,    0, 1917,    0,    0,
     1917, 1917,    0,    0, 1917, 1917,    0,    0,    0, 1917,
     1917, 1917, 1917, 1917, 1918,    0, 1918,    0,    0, 1918,
     1918,    0,    0, 1918, 1918,    0,    0,    0, 1918, 1918,
     1918, 1918, 1918, 1919,    0, 1919,    0,    0, 1919, 1919,
        0,    0, 1919, 1919,    0,    0,    0, 1919, 1919, 1919,
     1919, 1919, 1920,    0, 1920,    0,    0, 1920, 1920,    0,
        0, 1920, 1920, 1920,    0,    0, 1920, 1920, 1920, 1920,
     1920, 1921,    0, 1921,    0,    0, 1921, 1921,    0, 1921,
     1921, 1921, 1921,    0, 1921, 1921, 1921, 1921, 1921, 1921,

     1922,    0, 1922,    0,    0, 1922, 1922,    0, 1922, 1922,
     1922, 1922,    0, 1922, 1922, 1922, 1922, 1922, 1922, 1923,
        0, 1923,    0,    0, 1923, 1923,    0, 1923, 1923, 1923,
     1923,    0, 1923, 1923, 1923, 1923, 1923, 1923, 1924,    0,
     1924,    0,    0, 1924, 1924,    0, 1924, 1924, 1924, 1924,
        0, 1924, 1924, 1924, 1924, 1924, 1924, 1925,    0, 1925,
        0,    0, 1925, 1925,    0,    0, 1925, 1925, 1925,    0,
        0, 1925,    0, 1925, 1925, 1925, 1926,    0, 1926,    0,
        0, 1926, 1926,    0,    0, 1926, 1926,    0,    0,    0,
     1926, 1926, 1926, 1926, 1926, 1927,    0, 1927,    0,    0,

     1927, 1927,    0, 1927, 1927, 1927, 1927,    0, 1927, 1927,
     1927, 1927, 1927, 1927, 1929,    0,    0, 1929,    0,    0,
        0, 1929,    0, 1929, 1929, 1930,    0,    0,    0,    0,
     1930,    0, 1930, 1930,    0,    0, 1930,    0, 1930, 1930,
     1930,    0, 1930, 1930, 1930,    0, 1930, 1930, 1930, 1933,
        0,    0,    0, 1933,    0, 1933, 1933, 1934, 1934, 1934,
     1934, 1934,    0, 1934, 1934, 1934, 1934,    0,    0, 1934,
     1934,    0,    0, 1934, 1934, 1934,    0, 1934,    0, 1934,
     1934, 1935, 1935, 1935, 1935, 1935,    0, 1935, 1935, 1935,
     1935,    0,    0, 1935, 1935,    0,    0, 1935, 1935, 1935,

        0, 1935, 1935,    0, 1935, 1936,    0, 1936,    0,    0,
     1936, 1936,    0,    0, 1936, 1936, 1936,    0,    0, 1936,
     1936, 1936, 1936, 1936, 1937,    0, 1937,    0,    0, 1937,
     1937,    0,    0,    0, 1937, 1937,    0, 1937, 1937,    0,
     1937, 1937, 1937, 1938,    0, 1938,    0,    0, 1938, 1938,
        0, 1938,    0, 1938, 1938,    0, 1938, 1938, 1938, 1938,
     1938, 1938, 1939,    0, 1939,    0,    0, 1939, 1939,    0,
     1939,    0, 1939, 1939,    0, 1939, 1939, 1939, 1939, 1939,
     1939, 1940,    0, 1940,    0,    0, 1940, 1940,    0,    0,
        0, 1940,    0,    0,    0, 1940, 1940, 1940, 1940, 1940,

     1941,    0, 1941,    0,    0, 1941, 1941,    0,    0,    0,
     1941,    0,    0,    0, 1941, 1941, 1941, 1941, 1941, 1942,
        0, 1942,    0,    0, 1942, 1942,    0,    0,    0, 1942,
        0,    0,    0, 1942, 1942, 1942, 1942, 1942, 1943,    0,
     1943,    0,    0, 1943, 1943,    0,    0,    0, 1943, 1943,
        0,    0, 1943, 1943, 1943, 1943, 1943, 1944,    0, 1944,
        0,    0, 1944, 1944,    0,    0,    0, 1944,    0,    0,
        0, 1944, 1944, 1944, 1944, 1944, 1945,    0, 1945,    0,
        0, 1945, 1945,    0,    0,    0, 1945, 1945,    0,    0,
     1945, 1945, 1945, 1945, 1945, 1946,    0, 1946,    0,    0,

     1946, 1946,    0, 1946,    0, 1946, 1946,    0, 1946, 1946,
     1946, 1946, 1946, 1946, 1947,    0, 1947,    0,    0, 1947,
     1947,    0, 1947,    0, 1947, 1947,    0, 1947, 1947, 1947,
     1947, 1947, 1947, 1948,    0, 1948,    0,    0, 1948, 1948,
        0, 1948,    0, 1948, 1948,    0, 1948, 1948, 1948, 1948,
     1948, 1948, 1949,    0, 1949,    0,    0, 1949, 1949,    0,
     1949,    0, 1949, 1949,    0, 1949, 1949, 1949, 1949, 1949,
     1949, 1950,    0, 1950,    0,    0, 1950, 1950,    0, 1950,
        0, 1950, 1950,    0, 1950, 1950, 1950, 1950, 1950, 1950,
     1951,    0, 1951,    0,    0, 1951, 1951,    0, 1951,    0,

     1951, 1951,    0, 1951, 1951, 1951, 1951, 1951, 1951, 1952,
        0, 1952,    0,    0, 1952, 1952,    0, 1952,    0, 1952,
     1952,    0, 1952, 1952, 1952, 1952, 1952, 1952, 1953,    0,
     1953,    0,    0, 1953, 1953,    0,    0,    0, 1953, 1953,
        0,    0, 1953, 1953, 1953, 1953, 1953, 1954,    0, 1954,
        0,    0, 1954, 1954,    0,    0,    0, 1954,    0,    0,
        0, 1954, 1954, 1954, 1954, 1954, 1955,    0, 1955,    0,
        0, 1955, 1955,    0,    0, 1955, 1955, 1955,    0, 1955,
     1955,    0, 1955, 1955, 1955, 1956,    0, 1956,    0,    0,
     1956, 1956,    0, 1956, 1956, 1956, 1956,    0, 1956, 1956,

     1956, 1956, 1956, 1956, 1957,    0, 1957,    0,    0, 1957,
     1957,    0, 1957, 1957, 1957, 1957,    0, 1957, 1957, 1957,
     1957, 1957, 1957, 1958,    0, 1958,    0,    0, 1958, 1958,
        0,    0, 1958, 1958,    0,    0,    0, 1958, 1958, 1958,
     1958, 1958, 1959,    0, 1959,    0,    0, 1959, 1959,    0,
        0, 1959, 1959,    0,    0,    0, 1959, 1959, 1959, 1959,
     1959, 1960,    0, 1960,    0,    0, 1960, 1960,    0,    0,
     1960, 1960,    0,    0,    0, 1960, 1960, 1960, 1960, 1960,
     1961,    0, 1961,    0,    0, 1961, 1961,    0,    0, 1961,
     1961, 1961,    0,    0, 1961, 1961, 1961, 1961, 1961, 1962,

        0, 1962,    0,    0, 1962, 1962,    0,    0, 1962, 1962,
        0,    0,    0, 1962, 1962, 1962, 1962, 1962, 1963,    0,
     1963,    0,    0, 1963, 1963,    0,    0, 1963, 1963, 1963,
        0,    0, 1963, 1963, 1963, 1963, 1963, 1964,    0, 1964,
        0,    0, 1964, 1964,    0, 1964, 1964, 1964, 1964,    0,
     1964, 1964, 1964, 1964, 1964, 1964, 1965,    0, 1965,    0,
        0, 1965, 1965,    0, 1965, 1965, 1965, 1965,    0, 1965,
     1965, 1965, 1965, 1965, 1965, 1966,    0, 1966,    0,    0,
     1966, 1966,    0, 1966, 1966, 1966, 1966,    0, 1966, 1966,
     1966, 1966, 1966, 1966, 1967,    0, 1967,    0,    0, 1967,

     1967,    0, 1967, 1967, 1967, 1967,    0, 1967, 1967, 1967,
     1967, 1967, 1967, 1968,    0, 1968,    0,    0, 1968, 1968,
        0, 1968, 1968, 1968, 1968,    0, 1968, 1968, 1968, 1968,
     1968, 1968, 1969,    0, 1969,    0,    0, 1969, 1969,    0,
     1969, 1969, 1969, 1969,    0, 1969, 1969, 1969, 1969, 1969,
     1969, 1970,    0, 1970,    0,    0, 1970, 1970,    0, 1970,
     1970, 1970, 1970,    0, 1970, 1970, 1970, 1970, 1970, 1970,
     1971,    0, 1971,    0,    0, 1971, 1971,    0,    0, 1971,
     1971, 1971,    0,    0, 1971, 1971, 1971, 1971, 1971, 1972,
        0, 1972,    0,    0, 1972, 1972,    0,    0, 1972, 1972,

        0,    0,    0, 1972, 1972, 1972, 1972, 1972, 1973, 1973,
     1973,    0, 1973, 1973, 1973, 1973, 1973, 1973, 1973, 1973,
     1973, 1973, 1973, 1973, 1973, 1973, 1973, 1973, 1973, 1973,
     1973, 1973, 1976, 1976,    0, 1976,    0,    0,    0, 1976,
        0, 1976, 1976, 1977, 1977, 1977, 1977, 1977,    0, 1977,
     1977, 1977, 1977,    0,    0, 1977, 1977,    0,    0, 1977,
     1977, 1977,    0, 1977, 1977,    0, 1977, 1978, 1978, 1978,
     1978, 1978,    0, 1978, 1978, 1978, 1978,    0,    0, 1978,
     1978,    0,    0, 1978, 1978, 1978,    0, 1978,    0,    0,
     1978, 1979, 1979, 1979, 1979, 1979,    0, 1979, 1979, 1979,

     1979,    0,    0, 1979, 1979,    0,    0, 1979, 1979, 1979,
        0, 1979,    0,    0, 1979, 1980, 1980, 1980, 1980, 1980,
        0, 1980, 1980, 1980, 1980,    0,    0, 1980, 1980,    0,
        0, 1980, 1980, 1980,    0, 1980,    0,    0, 1980, 1981,
     1981, 1981, 1981, 1981,    0, 1981, 1981, 1981, 1981,    0,
        0, 1981, 1981,    0,    0, 1981, 1981, 1981,    0, 1981,
        0,    0, 1981, 1982, 1982, 1982, 1982, 1982, 1982, 1982,
     1982, 1982, 1982, 1982, 1982, 1982, 1982, 1982, 1982, 1982,
     1982, 1982, 1982, 1982, 1982, 1982, 1982, 1983,    0, 1983,
        0,    0, 1983, 1983, 1983, 1983,    0, 1983, 1983,    0,

     1983, 1983, 1983, 1983, 1983, 1983, 1984,    0, 1984,    0,
        0, 1984, 1984,    0,    0,    0, 1984, 1984,    0,    0,
     1984, 1984, 1984, 1984, 1984, 1985,    0, 1985,    0,    0,
     1985, 1985,    0, 1985,    0, 1985, 1985,    0, 1985, 1985,
     1985, 1985, 1985, 1985, 1986,    0, 1986,    0,    0, 1986,
     1986,    0, 1986,    0, 1986, 1986,    0, 1986, 1986, 1986,
     1986, 1986, 1986, 1987,    0, 1987,    0,    0, 1987, 1987,
        0, 1987,    0, 1987, 1987,    0, 1987, 1987, 1987, 1987,
     1987, 1987, 1988,    0, 1988,    0,    0, 1988, 1988,    0,
     1988,    0, 1988, 1988,    0, 1988, 1988, 1988, 1988, 1988,

     1988, 1989,    0, 1989,    0,    0, 1989, 1989,    0, 1989,
        0, 1989, 1989,    0, 1989, 1989, 1989, 1989, 1989, 1989,
     1990,    0, 1990,    0,    0, 1990, 1990,    0, 1990,    0,
     1990, 1990,    0, 1990, 1990, 1990, 1990, 1990, 1990, 1991,
        0, 1991,    0,    0, 1991, 1991,    0, 1991,    0, 1991,
     1991,    0, 1991, 1991, 1991, 1991, 1991, 1991, 1992,    0,
     1992,    0,    0, 1992, 1992,    0,    0,    0, 1992, 1992,
        0,    0, 1992, 1992, 1992, 1992, 1992, 1993,    0, 1993,
        0,    0, 1993, 1993,    0,    0,    0, 1993,    0,    0,
        0, 1993, 1993, 1993, 1993, 1993, 1994,    0, 1994,    0,

        0, 1994, 1994,    0,    0,    0, 1994,    0,    0,    0,
     1994, 1994, 1994, 1994, 1994, 1995,    0, 1995,    0,    0,
     1995, 1995, 1995, 1995, 1995, 1995, 1995,    0, 1995, 1995,
     1995, 1995, 1995, 1995, 1996,    0, 1996,    0,    0, 1996,
     1996,    0,    0, 1996, 1996, 1996,    0,    0, 1996, 1996,
     1996, 1996, 1996, 1997,    0, 1997,    0,    0, 1997, 1997,
        0, 1997, 1997, 1997, 1997,    0, 1997, 1997, 1997, 1997,
     1997, 1997, 1998,    0, 1998,    0,    0, 1998, 1998,    0,
     1998, 1998, 1998, 1998,    0, 1998, 1998, 1998, 1998, 1998,
     1998, 1999,    0, 1999,    0,    0, 1999, 1999,    0, 1999,

     1999, 1999, 1999,    0, 1999, 1999, 1999, 1999, 1999, 1999,
     2000,    0, 2000,    0,    0, 2000, 2000,    0, 2000, 2000,
     2000, 2000,    0, 2000, 2000, 2000, 2000, 2000, 2000, 2001,
        0, 2001,    0,    0, 2001, 2001,    0, 2001, 2001, 2001,
     2001,    0, 2001, 2001, 2001, 2001, 2001, 2001, 2002,    0,
     2002,    0,    0, 2002, 2002,    0, 2002, 2002, 2002, 2002,
        0, 2002, 2002, 2002, 2002, 2002, 2002, 2003,    0, 2003,
        0,    0, 2003, 2003,    0, 2003, 2003, 2003, 2003,    0,
     2003, 2003, 2003, 2003, 2003, 2003, 2004,    0, 2004,    0,
        0, 2004, 2004,    0,    0, 2004, 2004, 2004,    0,    0,

     2004, 2004, 2004, 2004, 2004, 2005,    0, 2005,    0,    0,
     2005, 2005,    0,    0, 2005, 2005,    0,    0,    0, 2005,
     2005, 2005, 2005, 2005, 2006,    0, 2006,    0,    0, 2006,
     2006,    0,    0, 2006, 2006,    0,    0,    0, 2006, 2006,
     2006, 2006, 2006, 2007, 2007, 2007, 2007, 2007,    0, 2007,
     2007, 2007, 2007,    0,    0, 2007, 2007,    0,    0, 2007,
     2007, 2007,    0, 2007,    0,    0, 2007, 2008, 2008, 2008,
     2008, 2008,    0, 2008, 2008, 2008, 2008,    0,    0, 2008,
     2008,    0,    0, 2008, 2008, 2008,    0, 2008,    0,    0,
     2008, 2009, 2009, 2009, 2009, 2009,    0, 2009, 2009, 2009,

     2009,    0,    0, 2009, 2009,    0,    0, 2009, 2009, 2009,
        0, 2009,    0,    0, 2009, 2010,    0, 2010,    0,    0,
     2010, 2010,    0,    0, 2010, 2010, 2010,    0,    0, 2010,
     2010, 2010, 2010, 2010, 2011,    0, 2011,    0,    0,    0,
     2011,    0, 2011, 2011, 2012,    0, 2012,    0,    0, 2012,
     2012,    0, 2012,    0, 2012, 2012,    0, 2012, 2012, 2012,
     2012, 2012, 2012, 2013,    0, 2013,    0,    0, 2013, 2013,
        0, 2013,    0, 2013, 2013,    0, 2013, 2013, 2013, 2013,
     2013, 2013, 2014,    0, 2014,    0,    0, 2014, 2014,    0,
     2014,    0, 2014, 2014,    0, 2014, 2014, 2014, 2014, 2014,

     2014, 2015,    0, 2015,    0,    0, 2015, 2015,    0, 2015,
        0, 2015, 2015,    0, 2015, 2015, 2015, 2015, 2015, 2015,
     2016,    0, 2016,    0,    0, 2016, 2016,    0,    0,    0,
     2016,    0,    0,    0, 2016, 2016, 2016, 2016, 2016, 2017,
        0, 2017,    0,    0, 2017, 2017,    0, 2017, 2017, 2017,
     2017,    0, 2017, 2017, 2017, 2017, 2017, 2017, 2018,    0,
     2018,    0,    0, 2018, 2018,    0, 2018, 2018, 2018, 2018,
        0, 2018, 2018, 2018, 2018, 2018, 2018, 2019,    0, 2019,
        0,    0, 2019, 2019,    0, 2019, 2019, 2019, 2019,    0,
     2019, 2019, 2019, 2019, 2019, 2019, 2020,    0, 2020,    0,

        0, 2020, 2020,    0, 2020, 2020, 2020, 2020,    0, 2020,
     2020, 2020, 2020, 2020, 2020, 2021, 2021, 2021, 2021, 2021,
        0, 2021, 2021, 2021, 2021,    0,    0, 2021, 2021,    0,
        0, 2021, 2021, 2021,    0, 2021,    0,    0, 2021, 2022,
     2022, 2022, 2022, 2022,    0, 2022, 2022, 2022, 2022,    0,
        0, 2022, 2022,    0,    0, 2022, 2022, 2022,    0, 2022,
        0,    0, 2022, 2023, 2023, 2023, 2023, 2023,    0, 2023,
     2023, 2023, 2023,    0,    0, 2023, 2023,    0,    0, 2023,
     2023, 2023,    0, 2023,    0,    0, 2023, 2024, 2024, 2024,
     2024, 2024,    0, 2024, 2024, 2024, 2024,    0,    0, 2024,

     2024,    0,    0, 2024, 2024, 2024,    0, 2024,    0,    0,
     2024, 2025, 2025, 2025, 2025, 2025,    0, 2025, 2025, 2025,
     2025,    0,    0, 2025, 2025,    0,    0, 2025, 2025, 2025,
        0, 2025,    0,    0, 2025, 2026, 2026, 2026, 2026, 2026,
        0, 2026, 2026, 2026, 2026,    0,    0, 2026, 2026,    0,
        0, 2026, 2026, 2026,    0, 2026,    0,    0, 2026, 2027,
     2027, 2027, 2027, 2027,    0, 2027, 2027, 2027, 2027,    0,
        0, 2027, 2027,    0,    0, 2027, 2027, 2027,    0, 2027,
        0,    0, 2027, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,

     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763
    } ;

#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yyg->yy_full_match; /* restore poss. backed-over text */ \
yyg->yy_lp = yyg->yy_full_lp; /* restore orig. accepting pos. */ \
yyg->yy_state_ptr = yyg->yy_full_state; /* restore orig. state */ \
yy_current_state = *yyg->yy_state_ptr; /* restore curr. state */ \
++yyg->yy_lp; \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "parser.l"
/* Copyright 2009-2024
 * Kaz Kylheku <kaz@kylheku.com>
 * Vancouver, Canada
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#line 30 "parser.l"

#include <stdio.h>
#include <string.h>
#include <stdarg.h>
#include <stdlib.h>
#include <limits.h>
#include <wchar.h>
#include <signal.h>
#include "config.h"
#include "lib.h"
#include "gc.h"
#include "stream.h"
#include "utf8.h"
#include "signal.h"
#include "unwind.h"
#include "hash.h"
#include "y.tab.h"
#include "parser.h"
#include "txr.h"

#define YY_INPUT(buf, result, max_size)                                 \
  do {                                                                  \
    val self = lit("parser");                                           \
    val n = get_bytes(self, yyextra->stream,                            \
                      coerce(mem_t *, buf), max_size);                  \
    result = c_num(n, self);                                            \
  } while (0)

#define YY_DECL \
  static int yylex_impl(YYSTYPE *yylval_param, yyscan_t yyscanner)

#define YY_FATAL_ERROR(msg) lex_irrecoverable_error(msg)

int opt_loglevel = 1;   /* 0 - quiet; 1 - normal; 2 - verbose */

val form_to_ln_hash;

static int directive_tok(scanner_t *yyg, int tok, int state);

#define FLEX_NUM_VERSION 10000*YY_FLEX_MAJOR_VERSION + \
                         100*YY_FLEX_MINOR_VERSION + \
                         YY_FLEX_SUBMINOR_VERSION

#if FLEX_NUM_VERSION < 20509
int yylex_destroy(void)
{
  return 0;
}
#endif

/* Missing prototypes not generated by flex. */
int yyget_column(yyscan_t);
void yyset_column (int column_no, yyscan_t yyscanner);

/* The following function is all that libflex provides.
   By providing it here, we eliminate the need to link libflex. */
#define YY_SKIP_YYWRAP
INLINE int yywrap(yyscan_t scanner)
{
  (void) scanner;
  return 1;
}

void yyerror(scanner_t *scanner, parser_t *parser, const char *s)
{
  yyerrorf(scanner, lit("~a"), string_utf8(s), nao);
  if (parser->prepared_msg) {
    yyerrorf(scanner, lit("~a"), parser->prepared_msg, nao);
    parser->prepared_msg = nil;
  }
}

void yyerrorf(scanner_t *scanner, val fmt, ...)
{
  parser_t *parser = yyget_extra(scanner);

  if (opt_loglevel >= 1) {
    va_list vl;
    va_start (vl, fmt);
    if (opt_compat && opt_compat <= 114)
      format(std_error, lit("~a: (~a:~d): "), prog_string,
             parser->name, num(parser->lineno), nao);
    else
      format(std_error, lit("~a:~d: "),
             parser->name, num(parser->lineno), nao);

    vformat(std_error, fmt, vl);
    put_char(chr('\n'), std_error);
    va_end (vl);
  }
  parser->errors++;
}

static void yyerrprepf(scanner_t *scanner, val fmt, ...)
{
  parser_t *parser = yyget_extra(scanner);

  if (opt_loglevel >= 1) {
    va_list vl;
    va_start (vl, fmt);
    set(mkloc(parser->prepared_msg, parser->parser),
        vformat_to_string(fmt, vl));
    va_end (vl);
  }
}

static void lex_irrecoverable_error(const char *msg8)
{
  val msg = string_utf8(msg8);
  uw_throwf(error_s, lit("error in parser: ~a"), msg, nao);
}

static void out_of_range_float(scanner_t *scanner, const char *tok)
{
    yyerrorf(scanner, lit("out-of-range floating-point literal: ~a"),
             string_utf8(tok), nao);
}

static wchar_t char_esc(int letter)
{
  switch (letter) {
  case ' ': return L' ';
  case 'a': return L'\a';
  case 'b': return L'\b';
  case 't': return L'\t';
  case 'n': return L'\n';
  case 'v': return L'\v';
  case 'f': return L'\f';
  case 'r': return L'\r';
  case 'e': return 27;
  case '"': return L'"';
  case '\'': return L'\'';
  case '`': return L'`';
  case '/': return L'/';
  case '@': return L'@';
  case '\\': return L'\\';
  }

  internal_error("unhandled escape character");
}

static wchar_t num_esc(scanner_t *scn, char *num)
{
  long val = 0;

  if (num[0] == 'x' || num[0] == 'u') {
    if (strlen(num) > 7)
      yyerror(scn, yyget_extra(scn), "too many digits in hex character escape");
    else
      val = strtol(num + 1, 0, 16);
  } else {
    if (num[0] == 'o')
      num++;
    if (strlen(num) > 8)
      yyerror(scn, yyget_extra(scn), "too many digits in octal character escape");
    else
      val = strtol(num, 0, 8);
  }

  if (val < 0 || val > 0x10FFFF || convert(wchar_t, val) != val) {
    yyerror(scn, yyget_extra(scn), "numeric character escape out of range");
    val = 0;
  }

  return val;
}

static wchar_t *unicode_ident(scanner_t *scn, const char *lex)
{
  wchar_t *wlex = utf8_dup_from(lex), *ptr = wlex, wch;

  while ((wch = *ptr++)) {
    if (wch < 0x1680 || (wch >= 0x3000 && wch < 0xdc00))
      continue;

    if ((wch >= 0xdc00 && wch <= 0xdcff) ||
        (wch >= 0xd800 && wch <= 0xdbff) ||
#if FULL_UNICODE
        (wch >= 0xf0000 && wch <= 0xffffd) ||
        (wch >= 0x100000 && wch <= 0x10fffd) ||
#endif
        (wch >= 0xe000 && wch <= 0xf8ff) ||
        (wch == 0xfffe) ||
        (wch == 0xffff))
    {
      yyerror(scn, yyget_extra(scn),
              "disallowed Unicode character in identifier");
      break;
    }

    switch (wch) {
    case 0x1680: case 0x180e: case 0x2000: case 0x2001: case 0x2002:
    case 0x2003: case 0x2004: case 0x2005: case 0x2006: case 0x2007:
    case 0x2008: case 0x2009: case 0x200a: case 0x2028: case 0x2029:
    case 0x205f: case 0x3000:
      yyerror(scn, yyget_extra(scn),
              "Unicode space occurs in identifier");
      break;
    default:
      continue;
    }

    break;
  }

  return wlex;
}

static char *remove_char(char *str, int c)
{
  char *dst = str, *src = str;

  while (*src) {
    int ch = *src++;
    if (ch != c)
      *dst++ = ch;
  }

  *dst = 0;

  return str;
}

#line 4514 "lex.yy.c"
#define YY_NO_INPUT 1

#line 4517 "lex.yy.c"

#define INITIAL 0
#define SPECIAL 1
#define BRACED 2
#define NESTED 3
#define REGEX 4
#define SREGEX 5
#define STRLIT 6
#define CHRLIT 7
#define QSILIT 8
#define QSPECIAL 9
#define WLIT 10
#define QWLIT 11
#define BUFLIT 12
#define JSON 13
#define JLIT 14
#define JMARKER 15

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE parser_t *

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    yy_state_type *yy_state_buf;
    yy_state_type *yy_state_ptr;
    char *yy_full_match;
    int yy_lp;

    /* These are only needed for trailing context rules,
     * but there's no conditional variable for that yet. */
    int yy_looking_for_trail_begin;
    int yy_full_lp;
    int *yy_full_state;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

    static void yy_push_state ( int _new_state , yyscan_t yyscanner);
    
    static void yy_pop_state ( yyscan_t yyscanner );
    
    static int yy_top_state ( yyscan_t yyscanner );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! yyg->yy_state_buf )
            yyg->yy_state_buf = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  , yyscanner);
        if ( ! yyg->yy_state_buf )
            YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 325 "parser.l"


#line 4833 "lex.yy.c"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();

		yyg->yy_state_ptr = yyg->yy_state_buf;
		*yyg->yy_state_ptr++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1764 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			*yyg->yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 1763 );

yy_find_action:
		yy_current_state = *--yyg->yy_state_ptr;
		yyg->yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yyg->yy_lp && yyg->yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yyg->yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yyg->yy_looking_for_trail_begin )
					{
					if ( yy_act == yyg->yy_looking_for_trail_begin )
						{
						yyg->yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yyg->yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yyg->yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					yyg->yy_full_match = yy_cp;
					yyg->yy_full_state = yyg->yy_state_ptr;
					yyg->yy_full_lp = yyg->yy_lp;
					break;
					}
				++yyg->yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yyg->yy_state_ptr;
			yyg->yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 327 "parser.l"
{
  wchar_t *wtxt = utf8_dup_from(yytext);

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->val = int_str_wc(wtxt, num(10));
  free(wtxt);
  return NUMBER;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 340 "parser.l"
{
  wchar_t *wtxt = utf8_dup_from(remove_char(yytext, ','));

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->val = int_str_wc(wtxt, num(10));
  free(wtxt);
  return NUMBER;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 353 "parser.l"
{
  wchar_t *wtxt = utf8_dup_from(remove_char(yytext + 2, ','));
  int base;

  switch (yytext[1]) {
  case 'x': base = 16; break;
  case 'o': base = 8; break;
  case 'b': default: base = 2; break;
  }

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->val = int_str_wc(wtxt, num_fast(base));
  free(wtxt);
  return NUMBER;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 373 "parser.l"
{
  int base = 0;
  val str = string_own(utf8_dup_from(yytext + 2));

  switch (yytext[1]) {
  case 'x': base = 16; break;
  case 'o': base = 8; break;
  case 'b': default: base = 2; break;
  }

  yyerrorf(yyg, lit("trailing junk in numeric literal: ~a~a~a"),
           chr(yytext[0]), chr(yytext[1]), str, nao);

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->val = int_str(str, num_fast(base));
  return NUMBER;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 395 "parser.l"
{
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  if ((yylval->val = flo_str_utf8(yytext)) == nil)
    out_of_range_float(yyg, yytext);

  return NUMBER;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 407 "parser.l"
{
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  remove_char(yytext, ',');

  if ((yylval->val = flo_str_utf8(yytext)) == nil)
    out_of_range_float(yyg, yytext);

  return NUMBER;
}
	YY_BREAK
case 7:
#line 423 "parser.l"
case 8:
#line 424 "parser.l"
case 9:
YY_RULE_SETUP
#line 424 "parser.l"
{
  val str = string_utf8(yytext);

  yyerrorf(yyg, lit("trailing junk in floating-point literal: ~a"), str, nao);

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  if ((yylval->val = flo_str_utf8(yytext)) == nil)
    out_of_range_float(yyg, yytext);

  return NUMBER;
}
	YY_BREAK
case 10:
/* rule 10 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 440 "parser.l"
{
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  if ((yylval->val = flo_str_utf8(yytext)) == nil)
    out_of_range_float(yyg, yytext);

  return NUMBER;
}
	YY_BREAK
case 11:
#line 453 "parser.l"
case 12:
YY_RULE_SETUP
#line 453 "parser.l"
{
  wchar_t *wtxt = utf8_dup_from(yytext + 1);

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  yylval->val = int_str_wc(wtxt, num(10));
  free(wtxt);
  return METANUM;
}
	YY_BREAK
case 13:
#line 466 "parser.l"
case 14:
YY_RULE_SETUP
#line 466 "parser.l"
{
  wchar_t *wtxt = utf8_dup_from(yytext + 3);

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  yylval->val = int_str_wc(wtxt, num(16));
  free(wtxt);
  return METANUM;
}
	YY_BREAK
case 15:
#line 479 "parser.l"
case 16:
YY_RULE_SETUP
#line 479 "parser.l"
{
  wchar_t *wtxt = utf8_dup_from(yytext + 3);

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  yylval->val = int_str_wc(wtxt, num(8));
  free(wtxt);
  return METANUM;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 491 "parser.l"
{
  wchar_t *wtxt = utf8_dup_from(yytext + 3);

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  yylval->val = int_str_wc(wtxt, num(2));
  free(wtxt);
  return METANUM;
}
	YY_BREAK
case 18:
#line 504 "parser.l"
case 19:
#line 505 "parser.l"
case 20:
YY_RULE_SETUP
#line 505 "parser.l"
{
  yyerrorf(yyg, lit("cramped floating-point literal: "
                    "space needed between ~a and dot."),
                    string_own(utf8_dup_from(yytext)),
                    nao);

  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->lexeme = unicode_ident(yyg, yytext);
  return SYMTOK;
}
	YY_BREAK
case 21:
#line 522 "parser.l"
case 22:
#line 523 "parser.l"
case 23:
YY_RULE_SETUP
#line 523 "parser.l"
{
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yylval->lexeme = unicode_ident(yyg, yytext);
  return SYMTOK;
}
	YY_BREAK
case 24:
#line 534 "parser.l"
case 25:
YY_RULE_SETUP
#line 534 "parser.l"
{
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);

  yyerrorf(yyg, lit("bad token: ~a"),
                    string_own(utf8_dup_from(yytext)),
                    nao);
  yylval->lexeme = unicode_ident(yyg, yytext);
  return SYMTOK;
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 547 "parser.l"
{
  return directive_tok(yyg, ALL, 0);
}
	YY_BREAK
case 27:
/* rule 27 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 551 "parser.l"
{
  return directive_tok(yyg, SOME, NESTED);
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 555 "parser.l"
{
  return directive_tok(yyg, NONE, 0);
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 559 "parser.l"
{
  return directive_tok(yyg, MAYBE, 0);
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 563 "parser.l"
{
  return directive_tok(yyg, CASES, 0);
}
	YY_BREAK
case 31:
/* rule 31 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 567 "parser.l"
{
  return directive_tok(yyg, BLOCK, NESTED);
}
	YY_BREAK
case 32:
/* rule 32 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 571 "parser.l"
{
  return directive_tok(yyg, CHOOSE, NESTED);
}
	YY_BREAK
case 33:
/* rule 33 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 575 "parser.l"
{
  return directive_tok(yyg, GATHER, NESTED);
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 579 "parser.l"
{
  return directive_tok(yyg, AND, 0);
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 583 "parser.l"
{
  return directive_tok(yyg, OR, 0);
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 587 "parser.l"
{
  return directive_tok(yyg, END, 0);
}
	YY_BREAK
case 37:
/* rule 37 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 591 "parser.l"
{
  return directive_tok(yyg, COLLECT, NESTED);
}
	YY_BREAK
case 38:
/* rule 38 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 595 "parser.l"
{
  return directive_tok(yyg, COLL, NESTED);
}
	YY_BREAK
case 39:
/* rule 39 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 599 "parser.l"
{
  return directive_tok(yyg, UNTIL, NESTED);
}
	YY_BREAK
case 40:
/* rule 40 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 603 "parser.l"
{
  return directive_tok(yyg, OUTPUT, NESTED);
}
	YY_BREAK
case 41:
/* rule 41 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 607 "parser.l"
{
  return directive_tok(yyg, REPEAT, NESTED);
}
	YY_BREAK
case 42:
/* rule 42 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 611 "parser.l"
{
  return directive_tok(yyg, PUSH, NESTED);
}
	YY_BREAK
case 43:
/* rule 43 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 615 "parser.l"
{
  return directive_tok(yyg, REP, NESTED);
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 619 "parser.l"
{
  return directive_tok(yyg, SINGLE, 0);
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 623 "parser.l"
{
  return directive_tok(yyg, FIRST, 0);
}
	YY_BREAK
case 46:
/* rule 46 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 627 "parser.l"
{
  return directive_tok(yyg, LAST, NESTED);
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 631 "parser.l"
{
  return directive_tok(yyg, EMPTY, 0);
}
	YY_BREAK
case 48:
/* rule 48 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 635 "parser.l"
{
  return directive_tok(yyg, MOD, NESTED);
}
	YY_BREAK
case 49:
/* rule 49 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 639 "parser.l"
{
  return directive_tok(yyg, MODLAST, NESTED);
}
	YY_BREAK
case 50:
/* rule 50 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 643 "parser.l"
{
  return directive_tok(yyg, DEFINE, NESTED);
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 647 "parser.l"
{
  return directive_tok(yyg, TRY, 0);
}
	YY_BREAK
case 52:
/* rule 52 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 651 "parser.l"
{
  return directive_tok(yyg, CATCH, NESTED);
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 655 "parser.l"
{
  return directive_tok(yyg, FINALLY, 0);
}
	YY_BREAK
case 54:
/* rule 54 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 659 "parser.l"
{
  return directive_tok(yyg, IF, NESTED);
}
	YY_BREAK
case 55:
/* rule 55 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 663 "parser.l"
{
  return directive_tok(yyg, ELIF, NESTED);
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 667 "parser.l"
{
  return directive_tok(yyg, ELSE, 0);
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 671 "parser.l"
{
  yy_push_state(BRACED, yyscanner);
  yylval->lineno = yyextra->lineno;
  return yytext[0];
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 677 "parser.l"
{
 yy_push_state(NESTED, yyscanner);
 yylval->lineno = yyextra->lineno;
 return yytext[0];
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 683 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return (opt_compat && opt_compat <= 248) ? OLD_AT : '@';
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 688 "parser.l"
{
  yylval->chr = '*';
  return SPLICE;
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 693 "parser.l"
{
  yylval->chr = yytext[0];
  return yytext[0];
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 698 "parser.l"
{
  yy_pop_state(yyscanner);
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 63:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 707 "parser.l"
{
  yyerrorf(yyg, lit("cramped floating-point literal: "
                    "space or 0 needed between ~a and dot."),
                    string_own(utf8_dup_from(yytext)),
                    nao);

  yy_pop_state(yyscanner);
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 722 "parser.l"
{
  yy_pop_state(yyscanner);
  if (yy_top_state(yyscanner) == INITIAL
      || yy_top_state(yyscanner) == QSILIT
      || yy_top_state(yyscanner) == QWLIT)
    yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 731 "parser.l"
{
  /* Eat whitespace in directive */
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 735 "parser.l"
{
  yy_push_state(STRLIT, yyscanner);
  return '"';
}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 740 "parser.l"
{
  yy_push_state(CHRLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return HASH_BACKSLASH;
}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 746 "parser.l"
{
  yy_push_state(BUFLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return HASH_B_QUOTE;
}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 752 "parser.l"
{
  yy_push_state(REGEX, yyscanner);
  yylval->lineno = yyextra->lineno;
  return HASH_SLASH;
}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 758 "parser.l"
{
  yy_push_state(QSILIT, yyscanner);
  return '`';
}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 763 "parser.l"
{
  yy_push_state(WLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return WORDS;
}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 769 "parser.l"
{
  yy_push_state(WLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return WSPLICE;
}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 775 "parser.l"
{
  yy_push_state(QWLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return QWORDS;
}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 781 "parser.l"
{
  yy_push_state(QWLIT, yyscanner);
  yylval->lineno = yyextra->lineno;
  return QWSPLICE;
}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 787 "parser.l"
{
  return '#';
}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 791 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_H;
}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 796 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_S;
}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 801 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_R;
}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 806 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_N;
}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 811 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_T;
}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 816 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  yy_push_state(JSON, yyscanner);
  return HASH_J;
}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 822 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return HASH_SEMI;
}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 827 "parser.l"
{
  wchar_t *wtxt = utf8_dup_from(yytext + 1);
  yylval->val = int_str_wc(wtxt, num(10));
  free(wtxt);
  return HASH_N_EQUALS;
}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 834 "parser.l"
{
  wchar_t *wtxt = utf8_dup_from(yytext + 1);
  yylval->val = int_str_wc(wtxt, num(10));
  free(wtxt);
  return HASH_N_HASH;
}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 841 "parser.l"
{
  yylval->lineno = yyextra->lineno;
  return (opt_compat && opt_compat <= 185) ? OLD_DOTDOT : DOTDOT;
}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 846 "parser.l"
{
  yy_pop_state(yyscanner);
  yylval->lexeme = chk_strdup(L"@");
  return TEXT;
}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 852 "parser.l"
{
  yyextra->lineno++;
}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 856 "parser.l"
{
  yy_push_state(REGEX, yyscanner);
  return '/';
}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 861 "parser.l"
{
  yylval->chr = '.';
  return CONSDOT;
}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 866 "parser.l"
{
  yylval->chr = '.';
  return LAMBDOT;
}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 871 "parser.l"
{
  yylval->chr = '.';
  return UREFDOT;
}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 876 "parser.l"
{
  yylval->chr = '.';
  return '.';
}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 881 "parser.l"
{
  yylval->chr = '.';
  return OREFDOT;
}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 886 "parser.l"
{
  yylval->chr = '.';
  return UOREFDOT;
}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 891 "parser.l"
{
  if (YYSTATE == SPECIAL)
    yy_pop_state(yyscanner);  /* @\ continuation */
  yyextra->lineno++;
}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 897 "parser.l"
{
  wchar_t lexeme[2];
  lexeme[0] = char_esc(yytext[1]);
  lexeme[1] = 0;
  yylval->lexeme = chk_strdup(lexeme);
  yy_pop_state(yyscanner);
  return TEXT;
}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 906 "parser.l"
{
  wchar_t lexeme[2];
  lexeme[0] = num_esc(yyg, yytext + 1);
  lexeme[1] = 0;
  yylval->lexeme = chk_strdup(lexeme);

  {
    char lastchar = yytext[yyleng-1];
    if (lastchar == ';' && opt_compat && opt_compat <= 109)
      unput(lastchar);
  }

  yy_pop_state(yyscanner);
  return TEXT;
}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 922 "parser.l"
{
  yyerrorf(yyg, lit("\\x escape without digits"), nao);
}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 926 "parser.l"
{
  yyerrorf(yyg, lit("unrecognized escape \\~a"), chr(yytext[1]), nao);
}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 930 "parser.l"
{
  /* comment */
}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 934 "parser.l"
{
  val ch = chr_str(string_utf8(yytext), zero);
  if (chr_isspace(ch))
    yyerrprepf(yyg, lit("unexpected whitespace character #\\x~,02x"),
               ch, nao);
  else if (chr_isunisp(ch))
    yyerrprepf(yyg, lit("unexpected Unicode space character #\\x~,02x"),
               ch, nao);
  else if (chr_iscntrl(ch))
    yyerrprepf(yyg, lit("unexpected control character #\\x~,02x"),
               ch, nao);
  else
    yyerrprepf(yyg, lit("unexpected character #\\~a"),
               ch, nao);
  return ERRTOK;
}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 951 "parser.l"
{
  yyerrprepf(yyg, lit("non-UTF-8 byte #x~02x in directive"),
             num(convert(unsigned char, yytext[0])), nao);
  return ERRTOK;
}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 957 "parser.l"
{
  yylval->chr = '/';
  return (YYSTATE == SREGEX) ? REGCHAR : '/';
}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 962 "parser.l"
{
  yylval->chr = char_esc(yytext[1]);
  return REGCHAR;
}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 967 "parser.l"
{
  yylval->chr = num_esc(yyg, yytext + 1);
  return REGCHAR;
}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 972 "parser.l"
{
  yylval->chr = yytext[1];
  return REGTOKEN;
}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 977 "parser.l"
{
  yyextra->lineno++;
}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 981 "parser.l"
{
  yyextra->lineno++;
  yyerrprepf(yyg, lit("newline in regex"), nao);
  return ERRTOK;
}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 987 "parser.l"
{
  yyextra->lineno++;
  yylval->chr = yytext[0];
  return REGCHAR;
}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 993 "parser.l"
{
  yylval->chr = yytext[0];
  return yytext[0];
}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 998 "parser.l"
{
  yylval->chr = yytext[1];
  return REGCHAR;
}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 1003 "parser.l"
{
  if (opt_compat && opt_compat <= 105) {
    yylval->chr = yytext[1];
    return REGCHAR;
  }

  if (yytext[1] == 'x')
    yyerrprepf(yyg, lit("\\x escape without digits in regex"), nao);
  else
    yyerrprepf(yyg, lit("unrecognized escape in regex"), nao);
  return ERRTOK;
}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 1016 "parser.l"
{
  yyerrprepf(yyg, lit("dangling backslash in regex"), nao);
  return ERRTOK;
}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 1021 "parser.l"
{
  wchar_t wchr[8];
  if (utf8_from_buf(wchr, coerce(unsigned char *, yytext), yyleng) != 2) {
    yylval->lexeme = chk_strdup(wchr);
    return TEXT;
  }
  yylval->chr = wchr[0];
  return REGCHAR;
}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 1031 "parser.l"
{
  yylval->chr = convert(unsigned char, yytext[0]) + 0xDC00;
  return REGCHAR;
}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 1036 "parser.l"
{
  yylval->lexeme = utf8_dup_from(yytext);
  return SPACE;
}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 1041 "parser.l"
{
  yylval->lexeme = utf8_dup_from(yytext);
  return TEXT;
}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 1046 "parser.l"
{
  yyextra->lineno++;
  return '\n';
}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 1051 "parser.l"
{
  yy_push_state(SPECIAL, yyscanner);
  return '*';
}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 1056 "parser.l"
{
  yy_push_state(SPECIAL, yyscanner);
}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 1060 "parser.l"
{
  /* eat whole line comment */
  yyextra->lineno++;
}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 1065 "parser.l"
{
  /* comment to end of line */
}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 1069 "parser.l"
{
  yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 1074 "parser.l"
{
  yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 1079 "parser.l"
{
  yylval->chr = char_esc(yytext[1]);
  return LITCHAR;
}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 1084 "parser.l"
{
  yylval->chr = char_esc(yytext[1]);
  return LITCHAR;
}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 1089 "parser.l"
{
  yyextra->lineno++;
}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 1093 "parser.l"
{
  yyextra->lineno++;

  if (!opt_compat || opt_compat > 109)
    return ' ';
}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 1101 "parser.l"
{
  yylval->chr = num_esc(yyg, yytext+1);
  return LITCHAR;
}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 1106 "parser.l"
{
  yyerrorf(yyg, lit("\\x escape without digits"), nao);
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 1110 "parser.l"
{
  yyerrorf(yyg, lit("unrecognized escape: \\~a"), chr(yytext[1]), nao);
}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 1114 "parser.l"
{
  yylval->chr = num_esc(yyg, yytext);
  return LITCHAR;
}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 1119 "parser.l"
{
  yylval->lexeme = utf8_dup_from(yytext);
  return SYMTOK;
}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 1124 "parser.l"
{
  yylval->lexeme = utf8_dup_from(yytext);
  return SYMTOK; /* hack */
}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 1129 "parser.l"
{
  yyerrprepf(yyg, lit("newline in string literal"), nao);
  yyextra->lineno++;
  yylval->chr = yytext[0];
  return ERRTOK;
}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 1136 "parser.l"
{
  yyerrprepf(yyg, lit("newline in character literal"), nao);
  yyextra->lineno++;
  yylval->chr = yytext[0];
  return ERRTOK;
}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 1143 "parser.l"
{
  yyerrprepf(yyg, lit("newline in string quasiliteral"), nao);
  yyextra->lineno++;
  yylval->chr = yytext[0];
  return ERRTOK;
}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 1150 "parser.l"
{
  yyextra->lineno++;

  if (opt_compat && opt_compat <= 109)
    return ' ';

  yyerrprepf(yyg, lit("newline in word list literal"), nao);
  yylval->chr = yytext[0];
  return ERRTOK;
}
	YY_BREAK
case 139:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1161 "parser.l"
{
  yy_push_state(QSPECIAL, yyscanner);
  return yytext[0];
}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 1166 "parser.l"
{
  yyerrprepf(yyg, lit("malformed @ expression in quasiliteral"), nao);
  return ERRTOK;
}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 1171 "parser.l"
{
  return ' ';
}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 1175 "parser.l"
{
  yy_pop_state(yyscanner);
  return yytext[0];
}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 1180 "parser.l"
{
  yylval->chr = char_esc(yytext[1]);
  return LITCHAR;
}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 1185 "parser.l"
{
  wchar_t ch0, ch1;
  yytext[6] = 0;
  ch0 = num_esc(yyg, yytext + 1);
  ch1 = num_esc(yyg, yytext + 7);
  yylval->chr = ((ch0 - 0xD800) << 10 | (ch1 - 0xDC00)) + 0x10000;
  return LITCHAR;
}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 1194 "parser.l"
{
  wchar_t ch = num_esc(yyg, yytext + 1);
  yylval->chr = if3(ch, ch, 0xDC00);
  return LITCHAR;
}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 1200 "parser.l"
{
  yyerrorf(yyg, lit("JSON \\u escape needs four digits"), nao);
}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 1204 "parser.l"
{
  yyerrorf(yyg, lit("unrecognized JSON escape: \\~a"), chr(yytext[1]), nao);
}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 1208 "parser.l"
{
  yyerrprepf(yyg, lit("newline in JSON string"), nao);
  yyextra->lineno++;
  yylval->chr = yytext[0];
  return ERRTOK;
}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 1215 "parser.l"
{
  wchar_t wchr[8];
  if (utf8_from_buf(wchr, coerce(unsigned char *, yytext), yyleng) != 2) {
    yylval->lexeme = chk_strdup(wchr);
    return TEXT;
  }
  yylval->chr = wchr[0];
  return LITCHAR;
}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 1225 "parser.l"
{
  yylval->chr = strtol(yytext, 0, 16);
  return LITCHAR;
}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 1230 "parser.l"
{
  return '\'';
}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 1234 "parser.l"
{
}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 1237 "parser.l"
{
  yyextra->lineno++;
}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 1241 "parser.l"
{
  yyerrorf(yyg, lit("bad character ~s in buffer literal"),
           chr(yytext[0]), nao);
}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 1246 "parser.l"
{
  yylval->chr = convert(unsigned char, yytext[0]) + 0xDC00;
  return LITCHAR;
}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 1251 "parser.l"
{
  if (yyextra->read_json_int && !strpbrk(yytext, ".eE")) {
    wchar_t *wtxt = utf8_dup_from(yytext);
    yylval->val = int_str_wc(wtxt, num(10));
    free(wtxt);
  } else if ((yylval->val = flo_str_utf8(yytext)) == nil) {
    out_of_range_float(yyg, yytext);
  }
  return NUMBER;
}
	YY_BREAK
case 157:
/* rule 157 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 4);
yyg->yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1262 "parser.l"
{
  yylval->val = t;
  return JSKW;
}
	YY_BREAK
case 158:
/* rule 158 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 5);
yyg->yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1267 "parser.l"
{
  yylval->val = nil;
  return JSKW;
}
	YY_BREAK
case 159:
/* rule 159 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 4);
yyg->yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1272 "parser.l"
{
  yylval->val = null_s;
  return JSKW;
}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 1277 "parser.l"
{
  if (strcmp("true", yytext) == 0) {
    yylval->val = t;
    return JSKW;
  }

  if (strcmp("false", yytext) == 0) {
    yylval->val = nil;
    return JSKW;
  }

  if (strcmp("null", yytext) == 0) {
    yylval->val = null_s;
    return JSKW;
  }

  {
    val str = string_own(utf8_dup_from(yytext));
    yyerrorf(yyg, lit("unrecognized JSON syntax: ~a"), str, nao);
  }
}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 1299 "parser.l"
{
  yy_push_state(JLIT, yyscanner);
  return yytext[0];
}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 1304 "parser.l"
{
  yy_push_state(JMARKER, yyscanner);
  yy_push_state(NESTED, yyscanner);
  return JSPLICE;
}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 1310 "parser.l"
{
  yy_push_state(JMARKER, yyscanner);
  yy_push_state(NESTED, yyscanner);
  return yytext[0];
}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 1316 "parser.l"
{
  return yytext[0];
}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 1320 "parser.l"
{
  yyextra->lineno++;
}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 1324 "parser.l"
{
}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 1327 "parser.l"
{
  yyerrorf(yyg, lit("bad character ~s in JSON literal"),
           chr(yytext[0]), nao);
}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 1332 "parser.l"
{
  internal_error("scanner processed input JMARKER state");
}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 1336 "parser.l"
ECHO;
	YY_BREAK
#line 6540 "lex.yy.c"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(SPECIAL):
			case YY_STATE_EOF(BRACED):
			case YY_STATE_EOF(NESTED):
			case YY_STATE_EOF(REGEX):
			case YY_STATE_EOF(SREGEX):
			case YY_STATE_EOF(STRLIT):
			case YY_STATE_EOF(CHRLIT):
			case YY_STATE_EOF(QSILIT):
			case YY_STATE_EOF(QSPECIAL):
			case YY_STATE_EOF(WLIT):
			case YY_STATE_EOF(QWLIT):
			case YY_STATE_EOF(BUFLIT):
			case YY_STATE_EOF(JSON):
			case YY_STATE_EOF(JLIT):
			case YY_STATE_EOF(JMARKER):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	yyg->yy_state_ptr = yyg->yy_state_buf;
	*yyg->yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1764 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		*yyg->yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */

	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1764 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1763);
	if ( ! yy_is_jam )
		*yyg->yy_state_ptr++ = yy_current_state;

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  _new_state , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( yyg->yy_start_stack_ptr >= yyg->yy_start_stack_depth )
		{
		yy_size_t new_size;

		yyg->yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = (yy_size_t) yyg->yy_start_stack_depth * sizeof( int );

		if ( ! yyg->yy_start_stack )
			yyg->yy_start_stack = (int *) yyalloc( new_size , yyscanner );

		else
			yyg->yy_start_stack = (int *) yyrealloc(
					(void *) yyg->yy_start_stack, new_size , yyscanner );

		if ( ! yyg->yy_start_stack )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	yyg->yy_start_stack[yyg->yy_start_stack_ptr++] = YY_START;

	BEGIN(_new_state);
}

    static void yy_pop_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( --yyg->yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yyg->yy_start_stack[yyg->yy_start_stack_ptr]);
}

    static int yy_top_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	return yyg->yy_start_stack[yyg->yy_start_stack_ptr - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

    yyg->yy_state_buf = 0;
    yyg->yy_state_ptr = 0;
    yyg->yy_full_match = 0;
    yyg->yy_lp = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    yyfree ( yyg->yy_state_buf , yyscanner);
    yyg->yy_state_buf  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1336 "parser.l"


static int directive_tok(scanner_t *yyscanner, int tok, int state)
{
  struct yyguts_t *yyg = convert(struct yyguts_t *, yyscanner);
  char *pstart = yytext + 1 + strspn(yytext + 1, " \t");
  char *pcolon = strchr(pstart, ':');
  char *pend = pstart + strspn(pstart, ":-abcdefghijklmnopqrstuvwxyz");

  *pend = 0;

  if (pcolon != 0) {
    val pkgname = string_utf8((*pcolon = 0, pstart));
    val package = if3(pstart[0], find_package(pkgname), keyword_package);
    if (!package) {
      yyerrprepf(yyg, lit("package ~a not found"), pkgname, nao);
      tok = ERRTOK;
    }
    if (package != user_package && package != keyword_package) {
      val sym = string_utf8(pcolon + 1);
      yyerrprepf(yyg, lit("~a:~a: original usr package expected, not ~a"),
                 pkgname, sym, pkgname, nao);
      tok = ERRTOK;
    }
  } else {
    val symname = string_utf8(pstart);
    val sym = intern_fallback(symname, cur_package);
    val package = symbol_package(sym);

    if (package != user_package && package != keyword_package) {
      yyerrprepf(yyg, lit("~a: this is ~a:~a, not usr:~a"),
                 symname, package_name(package), symname, symname, nao);
      tok = ERRTOK;
    }
  }

  if (state != 0)
    yy_push_state(state, yyscanner);
  else
    yy_pop_state(yyscanner);
  yylval->lineno = yyextra->lineno;
  return tok;
}

void end_of_regex(scanner_t *yyg)
{
  if (YYSTATE != REGEX && YYSTATE != SREGEX)
    internal_error("end_of_regex called in wrong scanner state");

  yy_pop_state(yyg);

  if (YYSTATE != INITIAL) {
    if (yy_top_state(yyg) == INITIAL
      || yy_top_state(yyg) == QSILIT
      || yy_top_state(yyg) == QWLIT)
      yy_pop_state(yyg);
  }
}

void end_of_char(scanner_t *yyg)
{
  if (YYSTATE != CHRLIT)
    internal_error("end_of_char called in wrong scanner state");

  yy_pop_state(yyg);
}

void end_of_buflit(scanner_t *yyg)
{
  if (YYSTATE != BUFLIT)
    internal_error("end_of_buflit called in wrong scanner state");

  yy_pop_state(yyg);
}

void end_of_json(scanner_t *yyg)
{
  if (YYSTATE == JLIT)
    yy_pop_state(yyg);

  if (YYSTATE != JSON)
    internal_error("end_of_json called in wrong scanner state");

  yy_pop_state(yyg);
}

/* The complexity here is necessary because TXR Lisp parsing looks ahead
 * by one token. (The reason for *that* is the support of a.b.c referencing dot
 * syntax in TXR Lisp.)
 *
 * Consider these two different cases:
 *
 * ^#J[,~(+ 2.0 2.0)]
 * ^#J[,~(+ 2.0 2.0) #J42]
 *
 * This end_of_json_unquote function gets called when the (+ 2.0 2.0)
 * has been parsed, but the Yacc-generated parser has shifted one tokan
 * ahead.  It has read the ] token in the one case or the #J token in
 * the other. These tokens have totally different effects on the Lex
 * start condition. When the lexer reads the ] token, it pops off a NESTED
 * state, whereas the #J token wants to push on a new JSON state.
 * By the time end_of_json_unquote has been called, this has already happened.
 *
 * To deal with this, we use the dummy JMARKER start state which serves as a
 * kind of parenthesis inside the start condition stack. BHefore scanning Lisp
 * unquote within JSON, we push JMARKER state first, then the NESTED state.
 *
 * If the lookahead token is like ], and pops off a state, it will pop off
 * our NESTED state, so we are left at the JMARKER state. If the lookahead
 * token is something else like #J (HASH_J), then it will push a new
 * state like JSON on top, and we have JMARKER NESTED JSON.
 *
 * So what we are doing here is popping off everything until we get down
 * to the JMARKER state, and putting it into our little save area.
 *
 * Then we lose the JMARKER state.
 *
 * If the save area is empty, it means that the lookahead token consumed
 * our NESTED state, and so we are done.
 *
 * If the save area is not empty, it means the lookahead put something
 * extra over our NESTED state. We drop that state from our save area,
 * and restore the rest of the save area back into the stack.
 * Effectively, we are deleting the unquote-related states from the
 * interior of the start condition stack, not to disturb new material
 * initiated by the lookahead token.
 */
void end_of_json_unquote(scanner_t *yyg)
{
  int stacksave[8];
  int top = 0;

  while (YYSTATE != JMARKER) {
    stacksave[top++] = YYSTATE;
    yy_pop_state(yyg);
  }

  yy_pop_state(yyg);

  if (top-- > 0) {
    while (top > 0)
      yy_push_state(stacksave[--top], yyg);
  }
}

val source_loc(val form)
{
  return gethash(form_to_ln_hash, form);
}

val source_loc_str(val form, val alt)
{
  cons_bind (line, file, gethash(form_to_ln_hash, form));
  if (missingp(alt))
    alt = lit("source location n/a");
  return if3(line, format(nil, lit("~a:~d"), file, line, nao), alt);
}

int yylex(YYSTYPE *yylval_param, yyscan_t yyscanner)
{
  struct yyguts_t * yyg = convert(struct yyguts_t *, yyscanner);
  int yy_char;

  if (yyextra->tok_idx > 0) {
    struct yy_token *tok = &yyextra->tok_pushback[--yyextra->tok_idx];
    yyextra->recent_tok = *tok;
    *yylval_param = tok->yy_lval;
    if (tok->yy_lex_state && tok->yy_lex_state != YYSTATE)
      yy_push_state(tok->yy_lex_state, yyg);
    return tok->yy_char;
  }

  yy_char = yyextra->recent_tok.yy_char = yylex_impl(yylval_param, yyscanner);
  yyextra->recent_tok.yy_lval = *yylval_param;
  yyextra->recent_tok.yy_lex_state = YYSTATE;

  return yy_char;
}

void prime_scanner(scanner_t *yyg, enum prime_parser prim)
{
  while (YYSTATE != INITIAL)
    yy_pop_state(yyg);

  switch (prim) {
  case prime_lisp:
  case prime_interactive:
    yy_push_state(SPECIAL, yyg);
    yy_push_state(NESTED, yyg);
    yy_push_state(NESTED, yyg);
    break;
  case prime_regex:
    yy_push_state(SREGEX, yyg);
    break;
  case prime_json:
    yy_push_state(JSON, yyg);
    break;
  }
}

void scrub_scanner(scanner_t *yyg, int yy_char, wchar_t *lexeme)
{
  struct yy_token *rtok = &yyextra->recent_tok;

  if (rtok->yy_char == yy_char && rtok->yy_lval.lexeme == lexeme) {
    rtok->yy_char = 0;
    rtok->yy_lval.lexeme = 0;
  }
}

void parser_l_init(void)
{
  prot1(&form_to_ln_hash);
  form_to_ln_hash = make_eq_hash(hash_weak_keys);
  (void) &yy_fatal_error; /* suppress unused function warning */
}

